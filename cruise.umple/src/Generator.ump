/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
https://umple.org/license

Definitions of the different code- or model-transformation generators
Note that some generators such as Umlet and Violet are in their own files

 */

namespace cruise.umple.compiler;
// Allows independent code generation tools
// Different generators will do different things regarding where the files are put, etc.
interface CodeGenerator
{
  boolean setModel(UmpleModel aUmpleModel);
  boolean setOutput(String aString);
  boolean setSuboption(String subopt);
  boolean hasSuboption(String subopt);
  double getSuboptionValue(String subopt, Double defaultVal);
  void generate();
  void prepare();
  void postpare();
}

// Default implementation for generators with suboptions
class CodeGeneratorWithSubptions
{
  isA CodeGenerator;
  lazy String[] suboptions;
  public boolean hasSuboption(String subopt)
  {
    return suboptions.contains(subopt);
  }

  public boolean setSuboption(String subopt)
  {
    return suboptions.add(subopt);
  }

//this is used to get the separator value after the =  for suboptions and can be used for any other
  public double getSuboptionValue(String subopt, Double defaultVal){
    double ret = defaultVal; //define the default return value 0.5 because that is graphviz default
    String partOfString = subopt; //we want to check which suboption contains the prefix
    String modifiedString = "";

    for (String s : suboptions) { //iterates through each suboption to find the suboption that contains the prefix
      if (s.contains(partOfString)) { //checks to see if prefix is in our suboptions []
        String originalString = s; //save the string of the full suboption. for example (gvseparator=10)
        
         // Find the position of '='
        int equalsPosition = originalString.indexOf('=');

        // Extract everything after '='
        // Add 1 to skip the '=' character itself
        if (equalsPosition != -1) { // Check if '=' is found
          modifiedString = originalString.substring(equalsPosition + 1);
          ret = Double.parseDouble(modifiedString); //save the value of the double
        }
      }
    }
    return ret;
  }
}

mixset StateMachine {
  interface CodeTranslator {
    String translate(String id, StateMachine stm);
    String translate(String id, State st);
    String translate(String id, Event e);
    String translate(String id, Activity a);
  }
}

mixset Trace {
  interface CodeTranslator
  {
    String translate(String id, TraceItem traceItem);
  }
}

interface CodeTranslator
{
  String translate(String id, Attribute attribute);  
  String translate(String id, AssociationVariable aVar);
  String translate(String id, ConstraintTree constraint);
  String translate(String id, ConstraintVariable cv);
  // TODO: LH#171
  //String translate(String id, AssociationVariable associationVariable);
}
use Umple.ump;
use generators/GeneratorHelper_Code.ump;
use SuperCodeGeneratorGenerator;
// All code above belongs to the base generator file (Generator.ump)

//Below mixsets use statments. All mentioned mixsets are activited.
use CodeGenerator, UmpleGenerator, RubyGenerator , JavaGenerator , RTCppGenerator, PhpGenerator, PythonGenerator; 
use Uigu2Generator , SqlGenerator , UmpleSelfGenerator , USEGenerator , EcoreGenerator ,TestGenerator ; 
use PapyrusGenerator, XmiGenerator, TextUmlGenerator, ScxmlGenerator, CodeGvClassTraitDiagramGenerator
use EventSequenceGenerator,  FeatureDiagramCo,  EntityRelationshipCon,  SimulateGenerator,  YumlGenerator;
use XtextGenerator,  JsonGenerator,  JsonMixedGenerator,  StructureDiagramGenerator , GvStateDiagramGenerator;
use StateTableGenerator, SuperGvGeneratorGenerator, HtmlGenerator, UmpleModelWalkerGenerator,  CodeAnalysisGenerator;
use AlloyGenerator,  NuSMVGenerators, NuSMVGenerator,   NuSMVOptimizerGenerator,  SimpleMetricsGenerator, PlainRequirementsDocGenerator, CodeGvClassDiagramGenerator, ExternalGrammarGenerator;
use UmpleAnnotaiveToCompositionGenerator;
use CodeGvInstanceDiagramGenerator;
//End 

// Base case generator, allows compilation without generation for testing command line, since Java is default
use generators/Generator_CodeNothing.ump;

// Below mixsets declarations. They contain inclusion of their files.
mixset CodeGenerator { use generators/Generator_Code.ump; }
mixset UmpleGenerator { use generators/Generator_CodeUmple.ump; }
mixset RubyGenerator { 
  use generators/Generator_CodeRuby.ump; 
  use RubyGeneratorIntMixset;
  }
mixset JavaGenerator { use generators/Generator_CodeJava.ump; }
mixset PythonGenerator { use generators/Generator_CodePython.ump; }
mixset RTCppGenerator { use generators/Generator_CodeRTCpp.ump; }
mixset PhpGenerator { use generators/Generator_CodePhp.ump; }
mixset Uigu2Generator { use generators/Generator_CodeUigu2.ump; }
mixset SqlGenerator { use generators/Generator_CodeSql.ump; }
mixset UmpleSelfGenerator { use generators/Generator_CodeUmpleSelf.ump; }
mixset USEGenerator { use generators/Generator_CodeUSE.ump; }
mixset EcoreGenerator { use generators/ecoreGenerator/ecoreGeneratorConfig.ump; }
mixset TestGenerator { use generators/Generator_CodeTest.ump; }
mixset PapyrusGenerator{ use generators/papyrus/Generator_CodePapyrus.ump; }
mixset XmiGenerator{ use generators/xmi/Generator_CodeXmi.ump; }
mixset TextUmlGenerator{ use generators/Generator_CodeTextUml.ump; }
mixset ScxmlGenerator{ use generators/Generator_CodeScxml.ump; }
mixset GvStateDiagramGenerator {  use generators/statemachineDiagramGenerator/stateMachineDiagramConfig.ump;}
mixset StateTableGenerator{ use generators/Generator_CodeStateTables.ump; }
mixset EventSequenceGenerator{ use generators/Generator_CodeEventSequence.ump; }
mixset SimpleMetricsGenerator{ use generators/Generator_CodeSimpleMetrics.ump; }
mixset ExternalGrammarGenerator{ use generators/Generator_CodeExternalGrammar.ump; }
mixset CodeGvClassDiagramGenerator{ use generators/Generator_CodeGvClassDiagram.ump;}
mixset CodeGvInstanceDiagramGenerator{ use generators/Generator_CodeGvInstanceDiagram.ump;}
mixset CodeGvClassTraitDiagramGenerator{ use generators/Generator_CodeGvClassTraitDiagram.ump; }
mixset FeatureDiagramCo{ use generators/featureDiagramGenerator/FeatureDiagramConfig.ump; }
mixset EntityRelationshipCon{ use generators/entityRelationshipDiagramGenerator/entityRelationshipConfig.ump}
mixset AlloyGenerator{ use generators/alloy/Generator_CodeAlloy.ump; }
mixset NuSMVGenerators{ use generators/NuSMV/nusmvGeneratorConfig.ump; }
mixset SimulateGenerator{ use generators/Generator_CodeSimulate.ump; }
mixset YumlGenerator{ use generators/Generator_CodeYuml.ump; }
mixset XtextGenerator{ use generators/Generator_CodeXtext.ump; }
mixset JsonGenerator{ use generators/Generator_CodeJson.ump; }
mixset JsonMixedGenerator{ use generators/Generator_CodeJsonMixed.ump; }
mixset StructureDiagramGenerator{ use generators/Generator_CodeStructureDiagram.ump; }
mixset SuperCodeGeneratorGenerator{ use generators/Generator_SuperCodeGenerator.ump;}
mixset SuperGvGeneratorGenerator{ use generators/Generator_SuperGvGenerator.ump; }
mixset HtmlGenerator{ use generators/Generator_Html.ump;}
mixset UmpleModelWalkerGenerator{ use generators/Generator_UmpleModelWalker.ump;}
mixset CodeAnalysisGenerator{ use generators/Generator_CodeAnalysis.ump;}
mixset PlainRequirementsDocGenerator{ use generators/Generator_CodePlainRequirementsDoc.ump; }
mixset UmpleAnnotaiveToCompositionGenerator { use generators/Generator_CodeAnnotaiveToComposition.ump; }
//End

