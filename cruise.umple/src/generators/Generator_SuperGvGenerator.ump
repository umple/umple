class SuperGvGenerator
{
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;
  abstract;
  //The reason for bringing following inheritance here is because of Umple code generation. It generates a false method for iterface coverage.
  isA CodeGeneratorWithSubptions;

  // Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
  // off of what's contained in here.
  UmpleModel model = null;
  String output = "";


  // Basic templates for GV elements to output
  
  // Template for what will appear at the start of each graph file
  graphStart(umpleVersion) <<!// Code generated by Umple <<=<<=umpleVersion>>>>

  digraph "<<=filename>>" {
    rankdir="BT"
    node [ratio="auto" shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];
  !>>

  emit graphStart(String filename)(graphStart(UmpleModel.VERSION_NUMBER));

  // CENTRAL GENERATE METHOD
 
  public void generate()
  {
    StringBuilder code = new StringBuilder();
    StringBuilder associations = new StringBuilder();
    String className;

    // Output basic gv file header
    _graphStart(0,code,model.getUmpleFile().getSimpleFileName());

    // Set of classes we are visiting
    // We always visit from the top of the hierarchy first
    // This set ensures we track what we have visited
    HashSet visitedClasses = new HashSet();

    //gets the desired separator value. Graphviz default is 0.5 but for Umple we use 1.0 for 'normal'
    double sepVal = getSuboptionValue("gvseparator", 1.0); 
    //checks if the separator value is not 1.0 (Umple default which will be 0.5 in Graphviz).
    // If it isn't it applies the desired separator value to nodesep and ranksep
    if (sepVal != 1.0){
      Double graphVizSepVal = sepVal/2.0;
      code.append("  nodesep =" + graphVizSepVal +";\n"); //injects sepVal(desired separator value) into nodesep
      code.append("  ranksep =" + graphVizSepVal +";\n"); //injects sepVal(desired separator value) into ranksep

      // The above are for the default dot layout engine, but regular sep is used for the others
      // Except we have to subtract one suce the scaling is 1+ the value
      if (graphVizSepVal > 1.0) {
        code.append("  sep =" + (graphVizSepVal-1.0) +";\n");
      }
    }

    // set graph setting for layout algorithm if there is a suboption
    if(hasSuboption("gvneato") || hasSuboption("gvspring")) {
      code.append("  layout = neato;\n");
    }
    else if(hasSuboption("gvsfdp")) {
      code.append("  layout = sfdp;\n");
    }
    else if(hasSuboption("gvcirco")) {
      code.append("  layout = circo;\n");
    }
    else if(hasSuboption("gvtwopi")) {
      code.append("  layout = twopi;\n");
    }
    else if(hasSuboption("gvdot")) {
      // default, but can override special inout if needed
      code.append("  layout = dot;\n");
    }
    else if(hasSuboption("gvfdp") || hasSuboption("gvmanual")) {
      // manual layout uses fdp but with ! after the position
      // to actually force use of manual positions
      // note that dot and the above override manual here
      // to allow them to alter the manual layout
      code.append("  layout = fdp;\n");
    }

    // set graph setting for orthogonality if there is a suboption
    if(hasSuboption("gvortho")) {
      code.append("  splines = ortho;\n");
    }
    else if(hasSuboption("gvpolyline")) {
      code.append("  splines = polyline;\n");
    }

    // set graph settings for scale if there are suboptions
    if(hasSuboption("gvdeoverlapscale")) {
      code.append("  overlap = scale;\n");
    }
    else if(hasSuboption("gvdeoverlaportho")) {
      code.append("  overlap = ortho;\n");
    }
    else if(hasSuboption("gvdeoverlapprism")) {
      code.append("  overlap = prism;\n");
    }

    code.append("   edge [minlen=1 headclip=\"true\"];\n");
    // Iterate through each class. 
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      visitClass(uClass, visitedClasses, code, associations);
    } // End iteration through classes
    
    for (UmpleInterface uInterface : getModel().getUmpleInterfaces()){
    	createInterfacesAndTheirHirerarchy(uInterface,code); 
    }
    terminateCode(code, associations);
  }
  
  // returns true if a special algorithm is going to be requested
  // in the generator, rather than the default
  // even if gvmanual is active, these are allowed to change the manual layout
  public boolean hasSpecialLayoutAlgorithmSuboption() {
    return (hasSuboption("gvneato") || hasSuboption("gvspring")
      || hasSuboption("gvsfdp") || hasSuboption("gvcirco")
      || hasSuboption("gvtwopi") || hasSuboption("gvfdp")
      || hasSuboption("gvdot")
    );
  }

  // Actually output the class contents  
  protected void visitClass(UmpleClass uClass, Set visitedClasses, StringBuilder code, StringBuilder associations)
  {
    // Ensure we only visit once
    if(visitedClasses.contains(uClass)) {
      return;
    }
    
    // Ensure  output parents in the hierarchy first
    UmpleClass parent = uClass.getExtendsClass();
    if(parent != null) {
      visitClass(parent, visitedClasses, code, associations);
    }
    visitedClasses.add(uClass);
          
    String className = uClass.getName();
    classCreation(uClass, code);

    // Add any generalization now to parents
    // We know that parents have been output first
    UmpleClass parentClass = uClass.getExtendsClass();
    if(parentClass!= null) {
      parentClassAssoc(code, className, parentClass.getName());
    }

    interfaceCreation(uClass, code);

    // Add any associations so they are output at the end
    Set processedAssociations = new HashSet(); // needed to prevent reflexive double count
    for(Association uAssoc : uClass.getAssociations()) {
    
      // Prevent double-counting of reflexive associations
      if(processedAssociations.contains(uAssoc)) continue;
      processedAssociations.add(uAssoc);
      
      associationCreation(uClass, uAssoc, associations, className);
    }
  }

  protected abstract String generatorType();
  protected abstract void parentClassAssoc(StringBuilder code, String className, String parentName);
  protected abstract void classCreation(UmpleClass uClass, StringBuilder code);
  protected abstract void associationCreation(UmpleClass uClass, Association uAssoc, StringBuilder associations, String className);
  protected abstract void createInterfacesAndTheirHirerarchy(UmpleInterface inInterface, StringBuilder code);
  protected void interfaceCreation(UmpleClass uClass, StringBuilder code) {}

  protected void terminateCode(StringBuilder code, StringBuilder associations) {

    code.append("\n  // All associations\n");
    code.append(associations);

    code.append("}\n");

    model.setCode(code.toString());
    writeModel();
  } 

  // Output the graphviz file to a file with the .gv suffix
  protected void writeModel()
  {
    try
    {
      String path = StringFormatter.addPathOrAbsolute(
        getModel().getUmpleFile().getPath(), 
        getOutput());
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName()
          + generatorType() + ".gv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating GraphViz Diagram code." + e, e);
    }
  } 
  
  // Add the comment to a tooltip
  public static String appendTooltipComment(List<Comment> comments, boolean title)
  {
    StringBuilder tooltip = new StringBuilder();;
    for (Comment uComment : comments) {
      String text;
      if (!title) {
        text = uComment.getText().replace("\"","\\\"");
      } else {
        text = uComment.getText().replace("\"","'");
      }
      text = text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;"); // Issue1584 and 1587 "Certain kinds of comments (<,>,&) result in failure to generate graphviz"
      if(text.startsWith(" *")) {
        tooltip.append(text.substring(2)+"&#13;");
      }
      else
      {
        tooltip.append(text+"&#13;");
      }
    }
    return tooltip.toString();
  }
  
  public static String[] retArrows(Association uAssoc)
  {
    String[] arrows = new String[2];

    if (uAssoc.getIsRightComposition()) {
      arrows[0] = "dir=\"forward\", arrowhead=\"diamond\"";
      arrows[1] = "-<@>";
    }
    else if (uAssoc.getIsLeftComposition()) {
      arrows[0] = "dir=\"back\", arrowtail=\"diamond\"";
      arrows[1] = "<@>-";
    }
    else {
      if(uAssoc.getIsLeftNavigable()) {
        if(uAssoc.getIsRightNavigable()) {
          arrows[0] = "dir=\"none\"";
          arrows[1] = "--";
        }
        else {
          arrows[0] = "dir=\"back\", arrowtail=\"open\"";
          arrows[1] = "<-";
        }
      }
      else if(uAssoc.getIsRightNavigable()) {
        arrows[0] = "dir=\"forward\", arrowhead=\"open\"";
        arrows[1] = "->";
      }
      else {
        arrows[0] = "dir=\"none\"";
        arrows[1] = "--";
      }
    }

    return arrows;
  }

  public static String labelAssociation(String left, String right, String arrow, String label, String tooltip)
  {
    String association;
    String associationDetails = left + "," + right+ "," + label;
    String hrefAction = "javascript:Action.selectAssociation('" + associationDetails + "')";
    association = "  \""+left+"\" -> \""+right+"\" ["+arrow+
        ", label=\""+label+"\""+", tooltip=\""+tooltip+"\" labeltooltip=\""+tooltip+"\" headtooltip=\"" + tooltip + "\" tailtooltip=\"" + tooltip + "\" URL=\"" + hrefAction + "\"" +  // Use URL for embedding clickable actions
      " ];\n";

    return association;
  }


  public static String twoLabelAssociation(String left, String right, String arrow, String hLabel, String tLabel, String tooltip)
  {
    String association;
    String associationDetails = left + "," + right + "," + hLabel + "," + tLabel;
    String hrefAction = "javascript:Action.selectAssociation('" + associationDetails + "')";
    association = "  \""+left+"\" -> \""+right+"\" ["+arrow+
        ", taillabel=\""+tLabel+"\""+", headlabel=\""+hLabel+"\""+
        ", tooltip=\""+tooltip+"\" headtooltip=\"" + tooltip + "\" tailtooltip=\"" + tooltip + "\" URL=\"" + hrefAction + "\"" +  // Use URL for embedding clickable actions
      " ];\n";

    return association;
  }
}
}

