/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
https://umple.org/license

This file generates .gv files for use by Graphviz, representing the class diagram  in the Umple model. To generate for this format, use 
  generate GvClassDiagram;
in your umple file, or the command line option
  -g GvClassDiagram

See also GvStateDiagram
 */

namespace cruise.umple.compiler;

class GvClassDiagramGenerator
{
  isA SuperGvGenerator;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;

  // Returns what is being generated - called SuperGvGenerator
  protected String generatorType()
  {
    return "cd";
  }

  // Create the association between a class and its parent 
  // - called VisitClass in SuperGvGenerator
  protected void parentClassAssoc(StringBuilder code, String className, String parentName)
  {
    code.append("  \""+className+"\" -> \""+parentName+"\""
        +" [arrowhead=\"empty\"; samehead=\"\";];\n\n");
  }

  // Create each class - called VisitClass in SuperGvGenerator
  protected void classCreation(UmpleClass uClass, StringBuilder code)
  {
    boolean manyClass = getModel().getUmpleClasses().size() >= 200 ? true : false;

    String className = uClass.getName();
    String classColor = uClass.getDisplayColor();

    // counting all the isA (extends, subclass, and associations) - gazi
    Integer associationCount=uClass.getAssociations().length + uClass.getExtendsTraits().size() + uClass.getSubclasses().size();
    // default value for cellpadding
    Integer cellPadding=10;
    Integer multiplier=5;
    // based on the number of arrows linked, adjust the cellpadding - gazi
    if(associationCount>1 && associationCount<=20){
      cellPadding=multiplier*associationCount;
    }
    else if(associationCount>20){
      cellPadding=100;
    }

    // Arrange for manual layout of class if requested (see also code for interface)
    String classPosition = "";
    if(hasSuboption("gvmanual") && ! hasSpecialLayoutAlgorithmSuboption() ) {
      double sepValForPosition = getSuboptionValue("gvseparator", 1.0);
      classPosition = uClass.getPosition(sepValForPosition);
    }

    if (!classColor.equals("")) classColor=" style=filled, fillcolor="+classColor+" ";
    // DEBUG
    //    code.append("\n  // Class: "+className+" "+uClass.getUmplePosition()+"\n");
    code.append("\n  // Class: "+className+"\n");

    if (manyClass) {
      code.append("  \""+className+"\" ["+classPosition+classColor+"shape=record, label=\"{"+className);

      if(uClass.getIsAbstract()) {  // add abstract tag
        code.append("\n&laquo;abstract&raquo;");
      }
    } 
    else {
      code.append("  \""+className+"\" ["+classPosition+classColor+"shape=plaintext margin=0 label=");
	    
      // Different cellpadding for if the class has nothing but the
      // name because of a glitch in graphviz's graphics
      if ((uClass.getAttributes().size() == 0 || hasSuboption("hideattributes")) && 
          (uClass.getMethods().size() == 0 || !hasSuboption("showmethods")) 
          && !uClass.getIsAbstract()) {
              code.append("<<table border=\"1\" cellspacing=\"2\" cellborder=\"0\" cellpadding=\""+cellPadding+"\">"
                    +"<tr><td>    "+className+" </td></tr>");
        }
      else {
        // Different cellpadding based on attribute count. - gazi
        if(uClass.getAttributes().size()>5 && associationCount<=3){
          cellPadding=10;
        }

        code.append("<<table border=\"1\" cellspacing=\"0\" cellborder=\"0\" cellpadding=\"2\">"
                    +"<tr><td cellpadding=\""+cellPadding+"\">    "+className+" </td></tr>");
		  }
      if(uClass.getIsAbstract()) {  // add abstract tag
        code.append("<tr><td cellpadding=\"4\">&laquo;abstract&raquo;"+"</td></tr>");
      }
    }
    
    attributeCreation(uClass, code, manyClass);
    methodCreation(uClass, code, manyClass);

    // Terminate outputting the class attributes
    if(manyClass) code.append("}\"");
   	else code.append("</table>>"); 
    
    
    // Output the tooltip : Class name followed by any comment
    code.append(",\n   tooltip=\"class "+className+"\n");
    code.append(appendTooltipComment(uClass.getComments(), false));
    code.append("\"");

    // Terminate the class as a whole
    code.append("];\n");
	}

  // Create each attribute for each class - called by classCreation
  private void attributeCreation(UmpleClass uClass, StringBuilder code, boolean manyClass)
  {
    // Iterate through attributes of the class]
    boolean isFirst = true;

    if (!hasSuboption("hideattributes")) { 
      for (Attribute uAttribute : uClass.getAttributes()) {
        if (!uAttribute.isConstant()) 
        {
          if (manyClass) {
            if (isFirst) code.append("|"); // attribute block starter
            else code.append("\\\n"); // separator between attributes
          }
          else {
            if (isFirst) code.append("<hr/>"); // attribute block starter
          }
          String isList = uAttribute.getIsList() ? "[]" : ""; //Hello
          String type = uAttribute.getType().replace("<","&lt;").replace(">","&gt;");
          
          if (manyClass) {
            code.append(""+uAttribute.getName()+"\\ :\\ "+type+isList+"\\l");
          }
          else {
            StringBuilder attrTooltip = new StringBuilder();
            attrTooltip.append(type+isList+" "+uAttribute.getName()+"&#13;");
            attrTooltip.append(appendTooltipComment(uAttribute.getComments(), true));        
            code.append("<tr><td align=\"left\" href=\"\" title=\""+attrTooltip+"\">"
                  +"  "+uAttribute.getName()+" : "
                  +type+isList+"  </td></tr>");
          }
          
          isFirst = false;
        }
      }
    }
  }

  // Create each method for each class - called by classCreation
  private void methodCreation(UmpleClassifier inUmpleClassifier, StringBuilder code, boolean manyClass)
  {
    if (hasSuboption("showmethods")) {
      boolean isFirstMethod = true;
      for (Method uMethod : inUmpleClassifier.getMethods()) {
      	if (uMethod.getSource() == Method.Source.fAutoAPI)
      	  continue;

        if (manyClass) {
          if(isFirstMethod) code.append("|"); // method block starter
          else code.append("\\\n"); // separator between attributes
        }
        else {
          if (isFirstMethod) code.append("<hr/>"); // method block starter
        }
        String accessModifier = "";
        switch (uMethod.getModifier().trim()) {
          case "": accessModifier = "+"; break;
          case "private": accessModifier = "-"; break;
          case "protected": accessModifier = "#"; break;
          case "public": accessModifier = "+"; break;
        }
        String parameters = "";
        if(uMethod.hasMethodParameters()) {
          for (MethodParameter mp : uMethod.getMethodParameters()) {
            parameters += mp.getFullType() + ",";
          }
          parameters = parameters.substring(0, parameters.length() - 1); // delete last comma
        }
        parameters = parameters.replace("<","&lt;").replace(">","&gt;");
        String type = uMethod.getType().replace("<","&lt;").replace(">","&gt;");
        boolean isAbstract = uMethod.getIsAbstract();
      
        if (manyClass) {
          if (isAbstract) {
            code.append(accessModifier+ "<I>" + uMethod.getName()+"</I> ("+parameters+")\\ :\\ "+type+"\\l");
          }
          else {
            code.append(accessModifier+uMethod.getName()+"("+parameters+")\\ :\\ "+type+"\\l");
          }
        }
        else {
          StringBuilder methTooltip = new StringBuilder();
          methTooltip.append(type+" "+uMethod.getName()+"("+parameters+")"+"&#13;");
          methTooltip.append(appendTooltipComment(uMethod.getComments(), true));
      
          StringBuilder hrefString = new StringBuilder();
          hrefString.append("javascript:Action.selectMethod('");
          hrefString.append(uMethod.getName()+"','"+type+"','"+uMethod.getModifier().trim()+"')");
         
          if (isAbstract) {
            code.append("<tr><td align=\"left\" href=\""+hrefString+"\" title=\""+methTooltip+"\">"
                +"  "+accessModifier+ "<I>" + uMethod.getName() + "</I>" 
                +" ("+parameters+") : "+type+"  </td></tr>");
          }
          else {
            code.append("<tr><td align=\"left\" href=\""+hrefString+"\" title=\""+methTooltip+"\">"
              +"  "+accessModifier+uMethod.getName()
              +"("+parameters+") : "+type+"  </td></tr>");  
          }
          isFirstMethod = false;
        }
      }
    }
  }

  // Create each interface for each class - called by classCreation
  protected void interfaceCreation(UmpleClass uClass, StringBuilder code)
  {
    // Add any interface implementations so they are output at the end
    for(UmpleInterface uInterface : uClass.getParentInterface()) {
      String intColor = uInterface.getDisplayColor();
      // TO DO needs fixing - interface colour does not appear
      if (!intColor.equals("")) {
        code.append("  \""+(uInterface.getName().replace("<","&lt;").replace(">","&gt;"))
          +"\" [style=filled, fillcolor="+intColor+"];\n\n ");
      } 
      code.append("  \""+uClass.getName()+
        "\" -> \""+(uInterface.getName().replace("<","&lt;").replace(">","&gt;")));
      code.append("\" [  arrowhead=\"empty\"; samehead=\"\"; style=dashed];\n\n");
    }
  }

  // Create the associations in the class diagram
  // - called VisitClass in SuperGvGenerator
  protected void associationCreation(UmpleClass uClass, Association uAssoc, StringBuilder associations, String className)
  {
    AssociationEnd leftEnd = uAssoc.getEnd(0);
    AssociationEnd rightEnd = uAssoc.getEnd(1);
    String modifierOne = leftEnd.getModifier();
    String modifierTwo = rightEnd.getModifier();
    String visualLeftEnd, visualRightEnd, toolTip, label;
    
    String leftClass= leftEnd.getClassName();
    // Only output them when visiting one class
    if(leftClass.equals(className)) {
      String[] arrows = retArrows(uAssoc);
      String leftMult= leftEnd.toSimpleString();      
      String rightMult= rightEnd.toSimpleString();
      String rightClass= rightEnd.getClassName();
      
      if ("symmetricreflexive".equals(modifierOne) && "symmetricreflexive".equals(modifierTwo)) 
      {
        if ("undefined".equals(rightEnd.getDisplayRoleName()))
          label = leftMult+" "+leftEnd.getDisplayRoleName();
        else label = rightMult+" "+rightEnd.getDisplayRoleName();
          
        toolTip = leftClass + " " + label + " " + rightClass + "\n\nThere is a set of "+leftClass+" that have the "+label+" relationship with each other";
          
        associations.append(labelAssociation(leftClass,
          rightClass, arrows[0], label, toolTip));
      }
      else 
      {
        String nlDesc = "\n\n"; // initialize Natural Language String

        // Test the left multiplicity of the association
        String[] array = leftMult.split("\\.\\."); // Split the multiplicity of the left side 
        if (array.length == 1) {
          try {
            int leftMultInt = Integer.parseInt(leftMult);          
            if (leftMultInt > 0) {
              if ( leftMultInt == 1) {
                nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " has " + startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + ". It must always have exactly, one, and can never have none. And there is an upper bound of at most one " + getClassWithRoleName(leftEnd, "1") + ".\n";
              }
              else {
                nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " has " + leftMultInt + " " + getClassWithRoleName(leftEnd, leftMult) + "\n" + 
                " When " + startWithVowel(rightClass).toLowerCase() + getClassWithRoleName(rightEnd, "1") + " is created, its " + leftMultInt + " " + getClassWithRoleName(leftEnd, leftMult) + " must be assigned.\n";
              }
            }
          } catch (NumberFormatException ex) {
            if (leftMult.equals("*")) {
              // Text view when the multiplicity is *
              nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " has some " + getClassWithRoleName(leftEnd, "*") + ". It can have none, and there is no upper bound defined.\n";
            } 
          }
        } else {
          String leftMult1 = array[0];
          String leftMult2 = array[1];
          try {
            int leftMultInt1 = Integer.parseInt(leftMult1);
              if ( leftMultInt1 == 0) {
                nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " may have " + startWithVowel(leftClass).toLowerCase() + getClassWithRoleName(leftEnd, "0") + ". ";
              } else if (leftMultInt1 == 1) {
                nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " has at least " + leftMultInt1 + " " + getClassWithRoleName(leftEnd, leftMult1) + " and can never have none. ";
              }
              else {
                nlDesc += startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + " has at least" + leftMultInt1 + " " + getClassWithRoleName(leftEnd, leftMult1) + " and can never have none. ";
              }

              int leftMultInt2 = Integer.parseInt(leftMult2);
              if (leftMultInt2 == 1) {
                nlDesc += "It can have none or just 1. \n";
              }
              else {
                nlDesc += "And there is an upper bound of at most " + leftMultInt2 + " " + getClassWithRoleName(leftEnd, leftMult2) + ".\n";
              }
          }
          catch (NumberFormatException ex) {
            if (leftMult2.equals("*")) {
              nlDesc += "And there is no upper bound defined.\n";
            }
          }
        }
        
        nlDesc +="\n"; // Newline to separate the two ends
        
        // Test the right multiplicity of the association
        String[] arrayR = rightMult.split("\\.\\."); // Split the multiplicity of the right side
        // Test the left multiplicity of the association
        if (arrayR.length == 1) {
          try {
            int rightMultInt = Integer.parseInt(rightMult);          
            if (rightMultInt > 0) {
              if ( rightMultInt == 1) {
                nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " has " + startWithVowel(rightClass) + getClassWithRoleName(rightEnd, "1") + ". It must always have exactly, one, and can never have none. And there is an upper bound of at most one " + getClassWithRoleName(rightEnd, "1") + ".\n";
              }
              else {
                nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " has " + rightMultInt + " " + getClassWithRoleName(rightEnd, rightMult) + ". \n" + 
                "When " + startWithVowel(leftClass).toLowerCase() + getClassWithRoleName(leftEnd, "1") + " is created, its " + rightMultInt + " " + getClassWithRoleName(rightEnd, rightMult) + " must be assigned.\n";
              }
            }
          } catch (NumberFormatException ex) {
            if (rightMult.equals("*")) {
              // Text view when the multiplicity is *
              nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " has some " + getClassWithRoleName(rightEnd, "*") + ". It can have none, and there is no upper bound defined.\n";
            } 
          }
        } 
        else {
          String rightMult1 = arrayR[0];
          String rightMult2 = arrayR[1];
          try {
            int rightMultInt1 = Integer.parseInt(rightMult1);            
              if ( rightMultInt1 == 0) {
                nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " may have " + startWithVowel(rightClass).toLowerCase() + getClassWithRoleName(rightEnd, "0") + ". ";
              }
              else if (rightMultInt1 == 1) {
                nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " has at least " + rightMultInt1 + " " + getClassWithRoleName(rightEnd, rightMult1) + " and can never have none. ";
              }
              else {
                nlDesc += startWithVowel(leftClass) + getClassWithRoleName(leftEnd, "1") + " has at least" + rightMultInt1 + " " + getClassWithRoleName(rightEnd, rightMult1) + " and can never have none. ";
              }
              
              int rightMultInt2 = Integer.parseInt(rightMult2);
              if (rightMultInt2 == 1) {
                nlDesc += "It can have none or just 1. \n";
              }
              else {
                nlDesc += "And there is an upper bound of at most " + rightMultInt2 + " " + getClassWithRoleName(rightEnd, rightMult2) + ".\n";
              }
            
          } 
          catch (NumberFormatException ex) {
            if (rightMult2.equals("*")) {
              nlDesc += "And there is no upper bound defined.\n";
            }
          }
        }
        
        nlDesc +="\n"; // Newline to separate the following information

        // Test the multiplicity of the association
        if (leftMult.equals("1") && rightMult.equals("1")) {
          nlDesc += "There must always be an equal number of " + rightClass + " and " + leftClass + ", connected as Pairs.\n" + 
          "When " + startWithVowel(leftClass).toLowerCase() + leftClass + " is created, its " + rightClass + " must be created at the same time.\n" +
          "When " + startWithVowel(leftClass).toLowerCase() + leftClass + " is deleted, its " + rightClass + " is deleted at the same time.\n";
        }
        else if (arrows[1].equals("<@>-")) {
          // Part-whole
          nlDesc += "This is a composition. "+startWithVowel(rightClass)+ rightClass + " is part of "+ startWithVowel(leftClass).toLowerCase() + leftClass + ". When any "+ leftClass +" is destroyed its parts are destroyed too.\n";
        }
        else if (arrows[1].equals("-<@>")) {
          // Whole-Part
          nlDesc += "This is a composition. "+startWithVowel(leftClass)+ leftClass + " is part of "+ startWithVowel(rightClass).toLowerCase() + rightClass + ". When any "+ rightClass +" is destroyed its parts are destroyed too.\n";
        }
         
        else if (leftMult.equals("1") && rightMult.equals("*")) {
          nlDesc += "When " + startWithVowel(rightClass).toLowerCase() + rightClass + " is created, its " + leftClass + " must be assigned.\n" +
          "When " + startWithVowel(rightClass).toLowerCase() + rightClass + " is deleted, its " + leftClass + " is not deleted and its list of " + rightClass + "s is decreased.\n" +
          "When " + startWithVowel(leftClass).toLowerCase() + leftClass + " is deleted, its " + rightClass + "s are not deleted. They are assigned to another " + leftClass + ".\n";
        }
        else if (leftMult.equals("*") && rightMult.equals("1")) {
          nlDesc += "When " + startWithVowel(leftClass).toLowerCase() + leftClass + " is created, its " + rightClass + " must be assigned.\n" +
          "When " + startWithVowel(leftClass).toLowerCase() + leftClass + " is deleted, its " + rightClass + " is not deleted and its list of " + leftClass + "s is decreased.\n" +
          "When " + startWithVowel(rightClass).toLowerCase() + rightClass + " is deleted, its " + leftClass + "s are not deleted. They are assigned to another " + rightClass + ".\n";
        }
                
        visualLeftEnd = leftMult+" "+leftEnd.getDisplayRoleName();
        visualRightEnd = rightMult+" "+rightEnd.getDisplayRoleName();
        toolTip = leftClass + " " + visualLeftEnd +
            " " + arrows[1] + " " + visualRightEnd + " " + rightClass + nlDesc;
          
        associations.append(twoLabelAssociation(leftClass,
          rightClass, arrows[0], visualRightEnd, visualLeftEnd, toolTip));
      }
    }
  }

  // Check whether the classname starts with a vowel or not to see if we use A or An
  private String startWithVowel(String str) {
    char filter = str.charAt(0);
    if (filter == 'A' || filter == 'E' || filter == 'I' || filter == 'U' || filter == 'O' || filter == 'Y') {
      return "An ";
    }
    else {
      return "A ";
    }
  }

  private String getClassWithRoleName(AssociationEnd sideEnd1, String quantity) {
    String str = "";
    String roleName = sideEnd1.getRoleName().toLowerCase();
    String className = sideEnd1.getClassName().toLowerCase();
    String classNames = className + "s";
    try {
      int quantityInt = Integer.parseInt(quantity);
      if ( !(roleName.equals(classNames) || roleName.equals(className) ||
            className.equals(roleName.substring(0, roleName.length()-1))) ) {
        if (quantityInt!=0 && quantityInt!=1) {
          str += sideEnd1.getClassName() + "s called " + sideEnd1.getRoleName();
        } else if (quantityInt==0 || quantityInt==1) {
          str += sideEnd1.getClassName() + " called " + sideEnd1.getRoleName();
        }
      } else {
        if (quantityInt==0 || quantityInt==1) {
          str += sideEnd1.getClassName();
        } else {
          str += sideEnd1.getClassName() + "s";
        }
      }
    } catch (NumberFormatException ex) {
      if (quantity.equals("*")) {
        if ( !(roleName.equals(classNames) || roleName.equals(className) ||
            className.equals(roleName.substring(0, roleName.length()-1))) ) {
          str += sideEnd1.getClassName() + "s called " + sideEnd1.getRoleName();
        } else {
          str += sideEnd1.getClassName() + "s";
        }
      }
    }
    return str; 
  }

  // Used to indent code
  private void appendSpaces(StringBuilder code, int numSpaces) {
    for(int i=0; i<numSpaces; i++) {
      code.append(" ");
    }
  }
  
  //This overrides a method used for generating the necessary tags for interfaces and also their hierarchies.
   protected void createInterfacesAndTheirHirerarchy(UmpleInterface inInterface, StringBuilder code){
	   boolean manyInterface = getModel().getUmpleInterfaces().size() >= 200 ? true : false;

	    String interfaceName = inInterface.getName();
	    String interfaceColor = inInterface.getDisplayColor();
	    if (!interfaceColor.equals("")) interfaceColor=" style=filled, fillcolor="+interfaceColor+" ";

      // Arrange for manual layout of interface if requested (see also code for class)
      String interfacePosition = "";
      if(hasSuboption("gvmanual") && ! hasSpecialLayoutAlgorithmSuboption() ) {
        double sepValForPosition = getSuboptionValue("gvseparator", 1.0);
        interfacePosition = inInterface.getPosition(sepValForPosition);
      }

	    if (manyInterface) {
	      code.append("  \""+manyInterface+"\" ["+interfacePosition+interfaceColor+"shape=record, label=\"{"+"&laquo;interface&raquo;<BR/>"+interfaceName);
	    } 
	    else {
	      code.append("  \""+interfaceName+"\" ["+interfacePosition+interfaceColor+"shape=plaintext margin=0 label=");
		    
	      // Different cellpadding for if the class has nothing but the
	      // name because of a glitch in graphviz's graphics
		    code.append("<<table border=\"1\" cellspacing=\"30\" cellborder=\"0\" cellpadding=\"10\">"
			   			+"<tr><td>"+"&laquo;interface&raquo;<BR/>"+interfaceName+"</td></tr>");
	    }
	    if ((inInterface.getMethods().size()<=0) || (!hasSuboption("showmethods"))){
	    	code.append("<hr/><tr><td cellpadding=\"4\">   </td></tr>");
	    }
	    methodCreation(inInterface, code, manyInterface);

	    // Terminate outputting the class attributes
	    if(manyInterface) code.append("}\"");
	   	else code.append("</table>>"); 
	    
	    
	    // Output the tooltip : Class name followed by any comment
	    code.append(",\n   tooltip=\"interface "+interfaceName+"\n");
//	    code.append(appendTooltipComment(uInterface.getComments(), false));
	    code.append("\"");

	    // Terminate the class as a whole
	    code.append("];\n");
	    createInterfaceHierarchyAssociations(inInterface,code);
   }
   
   //This creates tags which are necessary to show hierarchies.
   protected void createInterfaceHierarchyAssociations(UmpleInterface inInterface, StringBuilder code){
	    for(UmpleInterface uInt : inInterface.getExtendsInterface()) {
	        String intColor = uInt.getDisplayColor();
	        // TO DO needs fixing - interface colour does not appear
	        if (!intColor.equals("")) {
	          code.append("  \""+uInt.getName()
	            +"\" [style=filled, fillcolor="+intColor+"];\n\n ");
	        } 
	        code.append("  \""+inInterface.getName()+"\" -> \""+uInt.getName());
	        code.append("\" [  arrowhead=\"empty\"; samehead=\"\"];\n\n");
	      }
   }  
}
