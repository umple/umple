/*

Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
https://umple.org/license

This file generates .gv files for use by Graphviz, representing all state machines
encountered in the Umple model. To generate for this format, use 
  generate GvStateDiagram;
in your umple file, or the command line option
  -g GvStateDiagram

GraphViz documentation is here: https://www.graphviz.org/Documentation.php

To turn the gv state diagram into a png, run this:
  dot -Tpng umplefile.gv -o umplefile.png

See examples others have done: 
  https://www.ffnn.nl/pages/articles/media/uml-diagrams-using-graphviz-dot.php
  https://martin-thoma.com/how-to-draw-a-finite-state-machine/
 */

namespace cruise.umple.compiler;

class GvStateDiagramGenerator
{
  Boolean hideActions = false;
  Boolean hideGuards = false;
  Boolean showTransitionLabels = false;
  Boolean showGuardLabels = false;
  internal String display_language = "";
  lazy StateMachine root;
  
 
  internal Map<Transition,String> internalBoundaryTrans
    = new HashMap<Transition,String>();
  internal HashMap<State,List<Transition>> internalTransitionMap
    = new HashMap<>();
  internal int nodeNumber=0;
  
  // Basic templates for GV elements to output
  
  // Template for what will appear at the start of each graph file
  graphStart(umpleVersion) <<!// Code generated by Umple <<=<<=umpleVersion>>>>

digraph "<<=filename>>" {
  compound = true;
!>>
  emit graphStart(String filename)(graphStart(UmpleModel.VERSION_NUMBER));

  // Template for what will appear at the end of each graph file
  graphEnd <<!
  // All transitions
  <<=transitions>>
}
!>>  
  emit graphEnd(StringBuilder transitions)(graphEnd);  

  // Template for what is output if there is no state machine
  nosm <<!  node [ratio="auto" shape=box, penwidth=0];
  message [label ="No state machine found in the input Umple file"];
!>>
  emit nosm()(nosm);


  // CENTRAL GENERATE METHOD

  public void generate()
  {
    StringBuilder code = new StringBuilder();
    StringBuilder transitions = new StringBuilder();
    String className;
    
    hideActions = hasSuboption("hideactions");
    hideGuards = hasSuboption("hideguards");
    showTransitionLabels = hasSuboption("showtransitionlabels");
    showGuardLabels = hasSuboption("showguardlabels");
    display_language = getDisplayLanguage();
    
    //get the desired separator value. Graphviz default is 0.5
    double sepVal = getSuboptionValue("gvseparator", 1.0); 
    
    // Output basic gv file header
    _graphStart(0,code,model.getUmpleFile().getSimpleFileName());

    // Determine if there are multiple classes with state machines
    // or multiple state machines in any class
    // If so, we will need to put boxes around the state machines
    int smCount = 0;

    //check if the separator value is not 0.5 (Graphviz default).
    // If it isn't it applies the desired separator value to nodesep and ranksep
    if (sepVal != 1.0){
      Double graphVizSepVal = sepVal/2.0;
      code.append("nodesep =" + graphVizSepVal +";");  //injects desired separator value into nodesep
      code.append("ranksep =" + graphVizSepVal +";");  //injects desired separator value into ranksep
    }

    for (UmpleClass uClass : model.getUmpleClasses()) 
    {
      for (StateMachine sm : uClass.getStateMachines()) 
      {
        smCount++;
      }
    }
    if(smCount == 0) 
    {
      // Special case. No state machine.
      _nosm(0,code);
      terminateCode(code, transitions);
      return;
    }

    // We now know we have to output one or more state machines
    // Iterate through each class. 
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      className = uClass.getName();
      code.append("\n  // Class: "+className+"\n");
      
      // Process the top level state machines in a class
      for (StateMachine sm : uClass.getStateMachines())
      {
      	root = sm;
        if(sm.getParentState() == null) 
        { // This check shouldn't be needed
          appendStateMachineRecursively(code, transitions, sm, uClass, className, true, smCount, 4);
        }
      } // End iteration through state machines of a class
    } // End iteration through classes
    terminateCode(code, transitions);
  }

  /*
   * @author: Vahdat
   * This function is used to detect the language used to display actions on the diagram. 
   */
  private String getDisplayLanguage() {
    if (hasSuboption("Java")) return "Java";
    if (hasSuboption("Cpp")) return "Cpp";
    if (hasSuboption("Php")) return "Php";
    if (hasSuboption("RTCpp")) return "RTCpp";
    if (hasSuboption("SimpleCpp")) return "SimpleCpp";
    if (hasSuboption("Ruby")) return "Ruby";
    return "";
  }
  
  private void terminateCode(StringBuilder code, StringBuilder transitions) {
    _graphEnd(0,code,transitions);

    model.setCode(code.toString());
    writeModel();
  } 

  // Template for start state
  startState <<!
// Start states are shown as a black circle
node [ratio="auto" shape = point, fillcolor="black", width=0.2 ];
start_<<=clSmName>> [ tooltip = "<<=tooltip>>" ];

!>>
  emit startState(String clSmName, String tooltip)(startState);

  // Template for a normal node
  normalStateFormat <<!
// Format for normal states
node [ratio="auto" shape = rectangle, width=1,style=rounded];
!>>
  emit normalStateFormat()(normalStateFormat);

  // Template for a pseudostate such as history or deep history
  pseudoStateFormat <<!
// Format for normal states
node [ratio="auto" shape = circle, fixedsize = true, width=.3];
!>>
  emit pseudoStateFormat()(pseudoStateFormat);

  // Used to indent code
  private void appendSpaces(StringBuilder code, int numSpaces) 
  {
    for(int i=0; i<numSpaces; i++) 
    {
      code.append(" ");
    }
  }

  // The state qualified name incorporates the classname, the state machine name
  // and the hierarchy of state names
  // This is used as the internal graphviz label, and is not displayed.  
  private String getStateQualifiedName(State s, UmpleClass c) 
  {
    StateMachine sm = s.getStateMachine();
    String prepend = s.hasNestedStateMachines() ? "cluster" : "";
    return prepend+c.getName()+"_"+sm.getFullName()+"_"+s.getName();
  }

  // Return the name for the state to be used in transitions
  private String getTransitionNameForState(State s, UmpleClass c, boolean isOrigin) 
  {
    State firstNonSuperstate = getFirstNestedNonClusterState(s);
    return getStateQualifiedName(firstNonSuperstate, c);
  }
  
  // return self if it does not have nested state, otherwise the first
  // nested state that does not itself have a nested state
  private State getFirstNestedNonClusterState(State s) 
  {
    if(!s.hasNestedStateMachines()) 
    {
      return s;
    }
    else 
    {
      return getFirstNestedNonClusterState(s.getNestedStateMachine(0).getState(0));
    }
  }

  private String getTransitionHeadOrTailForState(State s, UmpleClass c, boolean isOrigin) 
  {
    if(s.hasNestedStateMachines()) 
    {
      // Use lhead or ltail
      return (isOrigin? "ltail" : "lhead")+"="+getStateQualifiedName(s, c)+",";
    }
    else 
    {
      return "";
    }
  }  


  // TEMPLATES FOR TRANSITIONS //
  
  // Template for a transition
  transition <<!<<=start>> <<=arrow>> <<=dest>> [ <<=attributes>>, URL="javascript:Action.transitionClicked(\"<<=jsInput>>\")" ] ;
!>>
  emit transition(String start,String arrow,String dest, String attributes, String jsInput)(transition);

  // Template for transition attributes
  transitionAttributes <<!<<#if(lheadtail.length()>0) {#>> <<=lheadtail>> <<#
  }
  if(label.length()>0) {#>> label = "<<=label>>",<<#
  }
  #>> tooltip = "<<=tooltip>>"!>>
  emit transitionAttributes(String lheadtail, String label, String readableStart, String readableEnd, String tooltip)(transitionAttributes);
  //"<<=readableStart>> <<=label>> -> <<=readableEnd>>"!>>
  // TEMPLATES FOR STATES

  topLevelBorder <<!
 subgraph cluster<<=clSmName>> {
  label = "sm <<=className>> <<=smName>>";
  penwidth=0.5;
!>>
  emit topLevelBorder(String clSmName, String className, String smName)(topLevelBorder); 

  //we introduce this method to generate a unique identity for a given transition using a universal set of transitions
  private int getObjectIdentity( StateMachine sm, Object obj) {
  		int pos = 1;
		if( obj instanceof Transition ) {
			for(Transition trans : sm.getAllTransitions() ) {
				if(trans.equals( (Transition) obj) )
					return pos;
				pos++;
			}
		}
		if( obj instanceof Guard ) {
			pos = 1;
			for(Guard guard : sm.getAllGuards() ) {
				if(guard.equals(( Guard ) obj ))
					return pos;
				pos++;
			}
		}
  		return -1;
  	}
  
  private void appendStateMachineRecursively(StringBuilder code, StringBuilder transitions, StateMachine sm,
      UmpleClass uClass, String className, boolean isTopLevel,
      int smCount, int indentLevel) 
  {

    String smName, clSmName, sLabel, sName, tooltip;
    boolean isPseudo = false;    
    Event event;
    Action action;
    String transitionLabel, guardString, actionCode, transitionAction, blah = "blah", guardLabel;
    Guard guard;
    List<StateMachine> allNestedStateMachines = sm.getImmediateNestedStateMachines();

    // We haven't processed any states yet in this statemachine
    Boolean isFirstState = true;

    // Determine whether bottom level
    Boolean isBottomLevel = allNestedStateMachines.isEmpty();
    String levelPhrase = "";
    if(isTopLevel) 
    {
      if(isBottomLevel) levelPhrase ="Top and Bottom Level ";
      else levelPhrase = "Top Level ";
    }
    else if(isBottomLevel) levelPhrase = "Bottom Level ";
      
    smName = sm.getName();
    clSmName = className+"_"+sm.getFullName();
    code.append("\n");
    appendSpaces(code,  indentLevel);
    code.append("// "+levelPhrase+"StateMachine: "+smName+"\n");        

    // If there are multiple state machines in the model
    // And this is a top level state machine
    // Then we need to put the state machine in a border
    if(smCount > 1 && isTopLevel) 
    {
      _topLevelBorder(indentLevel, code, clSmName, className, smName);
    }

    // Every state machine has a start state
    String [] stateInfo = getStatePath(sm, "start");
    tooltip = "Class "+className+", SM "+stateInfo[0]+", State "+stateInfo[1];
    _startState(indentLevel,code,clSmName, tooltip);
    _normalStateFormat(indentLevel, code);
 
    // Iterate through the states of this state machine
    for (State s : sm.getStates())
    {
      sLabel=s.getName();  // This is what is displayed
      if(sLabel.equals("HStar")) sLabel="\"H*\"";
      isPseudo = sLabel.equals("H") || sLabel.equals("\"H*\"");
      sName=getStateQualifiedName(s,uClass);  // Internal gv identifier
      
      code.append("\n");      
      appendSpaces(code,  indentLevel+2);
      code.append("// State: "+sLabel+"\n\n");   

      // WORKING ON
      // If state will have transitions that start from or end at boundary
      // and go or come from other states further inside
      // then we need to add a dummy connector state

      if(!isBottomLevel) 
      { // s is not bottom level
        Map<Transition,String> newInternalBoundaryTrans = new HashMap<Transition,String>();
      
        Set<Transition> allT = new HashSet<Transition>();
        allT.addAll(s.getTransitions());
        allT.addAll(s.getNextTransition());

        for (Transition t: allT) 
        {
          if(!internalBoundaryTrans.containsKey(t) && (
            (t.getFromState()==s && t.getNextState().isSubstateOf(s)) ||
            (t.getNextState()==s && t.getFromState().isSubstateOf(s)) ) ) 
          {

            nodeNumber++;
            String dummyName="dummyNode"+nodeNumber+"_"+
              t.getFromState().getName()+"_"+t.getNextState().getName();
            internalBoundaryTrans.put(t,dummyName);
            newInternalBoundaryTrans.put(t,dummyName);
          }
        }
        if(!newInternalBoundaryTrans.isEmpty()) 
        {
          appendSpaces(code, indentLevel+2);
          code.append("// Dummy notes for transitions to/from internals to boundary\n");
          appendSpaces(code, indentLevel+2);
          code.append("node [ratio=\"auto\" shape = point, width = 0.005];\n");

          for (String nodeName : newInternalBoundaryTrans.values()) 
          {
            appendSpaces(code, indentLevel+2);
            code.append(nodeName+" [label=\"\"];\n");
          }
          
          // Reinstate normal format
          _normalStateFormat(indentLevel+2, code);
        }
      }

      //string to be passed via js onClick() event to umple_action
      String jsStr=null;
      if(s.getConcurrentParentState()!=null){ //if state is concurrent
      String [] infoGrab = getStatePath(sm, s.getName());
        jsStr = className+"^*^"+infoGrab[0]+"^*^"+getConcurrentStatePath(s);
      } else {
        String [] infoGrab = getStatePath(sm, s.getName());
        jsStr = className+"^*^"+infoGrab[0]+"^*^"+infoGrab[1];
      }

      // Output the state (and possibly state machine) id
      if(!s.hasNestedStateMachines()) 
      {
        // Simple state node
        if(isPseudo) _pseudoStateFormat(indentLevel, code);
        appendSpaces(code,  indentLevel+2);
		
        tooltip = getStateTooltip(sm, s, className);
        String enclosed = "\""+tooltip+"\"";

        // Retrieve the display color of an object 's'
        String getColor = s.getDisplayColor();

        // Initialize a string for background color
        String bgroundColor = "";

        // If the color is not empty, set the display style to filled and rounded
        // and apply the retrieved color as the fill color

      if (!getColor.equals("")) {
      bgroundColor = "style = \"filled, rounded\", fillcolor =" + getColor + ",";
        }

        code.append(sName + " [label = " + sLabel + "," + bgroundColor + " tooltip = \"" + tooltip + "\", URL=\"javascript:Action.stateClicked(\\\"" + jsStr + "\\\")\"];\n");
        if(isPseudo) _normalStateFormat(indentLevel, code);
      }
      else 
      {
        // Start of a subgraph
        String getColor = s.getDisplayColor();
        // Initialize a string for background color
        String bgroundColor = "style = rounded;";
        // If the color is not empty, set the display style to filled and rounded
        // and apply the retrieved color as the fill color
        if (!getColor.equals("")) {
        bgroundColor = "style = \"filled, rounded\" fillcolor =" + getColor;
        }
        appendSpaces(code,  indentLevel+1);
        code.append("subgraph "+sName+" {\n");
        appendSpaces(code,  indentLevel+2);
        code.append("label = \""+sLabel+"\";\n");
        appendSpaces(code,  indentLevel+2);
        code.append(bgroundColor + " \n");
        appendSpaces(code,  indentLevel+2);
        code.append("URL=\"javascript:Action.stateClicked(\\\""+jsStr+"\\\")\";\n");
      }

      if(isFirstState) 
      {
         // Output transition to first state
         isFirstState = false;
        String dest=getTransitionNameForState(s,uClass,false);
        String head=getTransitionHeadOrTailForState(s, uClass,false);
        stateInfo = getStatePath(sm, s.getName());
        tooltip = "start to "+stateInfo[1]; 
        
        _transition(2,transitions,"start_"+clSmName,"->", dest,
          transitionAttributes(head,"","start",s.getName(), tooltip),null); 
      }
          
      // Output all the other transitions
      for (Transition t : s.getNextTransition()) 
      {
        event = t.getEvent();
        action = t.getAction();
        //showTransitionLabels = true;
        if ( !showTransitionLabels ) {
          transitionLabel = "";
        }
        else {
           transitionLabel = "   t"+getObjectIdentity( root, t )+": ";
        }       
        
        if(event.isAutoTransition()) 
        {
          transitionLabel += "";
        } 
        else {
          if (event.getIsTimer()) 
          {
            transitionLabel += "after("+event.getTimerInSeconds()+")";
          }
          else 
          {
            if(event.getArgs() == null || event.getArgs() == "") 
            {
              transitionLabel += event.getName();
            }
            else 
            {
              transitionLabel += event.getName()+"("+event.getArgs()+")";
            }
          }
        }
        
        if (action == null || getAvailableActionCode(action) == "" || hideActions) 
        {
          transitionAction = "";
        }
        else 
        {
          actionCode = getAvailableActionCode(action);
          if (actionCode.length() > 15) transitionAction = " / {...}";
          else transitionAction = " / "+actionCode.replaceAll("\"","&quot;");
        }
      
        guard = t.getGuard();
        if (guard == null || hideGuards) guardString = "";
        else 
        {
          //showGuardLabels = true;
          if ( !showGuardLabels ) {
          	guardLabel = "";
          }
          else {
            guardLabel = ":g"+getObjectIdentity( root, guard );
          }
          JavaGenerator gen = new JavaGenerator();
          gen.setModel(getModel());
          if(event.isAutoTransition()) guardString = "[";
          else guardString = " [";

          //guardString += guard.getCondition(gen).replaceAll("\"","&quot;") + "]";
	      guardString += guard.getExpression().replaceAll("\"","&quot;") + "]"+guardLabel;
        }
        
        String orig = getTransitionNameForState(t.getFromState(),uClass,true);
        String dest = getTransitionNameForState(t.getNextState(),uClass,false);
        String origlh = getTransitionHeadOrTailForState(t.getFromState(),uClass,true);
        String destlt = getTransitionHeadOrTailForState(t.getNextState(),uClass,false);
        tooltip = getTransitionTooltip(t, guardString); 
        String destJs=null;
        String origJs=null;
        if(t.getNextState().getConcurrentParentState()!=null){
          destJs=getConcurrentStatePath(t.getNextState());
        } else {
          destJs=getStatePath(t.getNextState().getStateMachine(),t.getNextState().getName())[1];
        }
        if(t.getFromState().getConcurrentParentState()!=null){
          origJs=getConcurrentStatePath(t.getFromState());
        } else {
          origJs=getStatePath(t.getFromState().getStateMachine(),t.getFromState().getName())[1];
        }
        jsStr=className+"*^*"+sm.getRootStateMachine().getName()+"*^*"+transitionLabel+"*^*"+origJs+"*^*"+destJs+"*^*"+guardString;
        // WORKING ON
        // If we have to go through a dummy external state
        // we have to add two transitions
        if(internalBoundaryTrans.containsKey(t)) 
        {
          _transition(2,transitions,orig,"->", internalBoundaryTrans.get(t)+":e",
            transitionAttributes("dir=none, "+origlh,
            transitionLabel + guardString + transitionAction,
            t.getFromState().getName(),t.getNextState().getName(), tooltip),jsStr);        

          _transition(2,transitions,internalBoundaryTrans.get(t)+":w","->", dest,
            transitionAttributes(destlt,
            "",
            t.getFromState().getName(),t.getNextState().getName(), tooltip),jsStr);        
        }
        else 
        {
          // Normal transition
          _transition(2,transitions,orig,"->", dest,
            transitionAttributes(origlh+destlt,
            transitionLabel + guardString + transitionAction,
            t.getFromState().getName(),t.getNextState().getName(), tooltip),jsStr);
        }
        transitions.append("\n");
      }  // End iteration through the transitions

      // Process nested state machines of this state
      allNestedStateMachines = s.getNestedStateMachines();
      for(StateMachine nestedSm: allNestedStateMachines) 
      {
        appendStateMachineRecursively(code, transitions, nestedSm, uClass, className, false, smCount, indentLevel+2);
      } // End iteration through nested state machines

      // Mark end of subgraph
      if(s.hasNestedStateMachines()) 
      {
        appendSpaces(code,  indentLevel+1);
        code.append("}\n");
      }

      appendSpaces(code,  indentLevel+2);
      code.append("// End State: "+sLabel+"\n"); 
     
    } // End iteration through states of a state machine

    appendSpaces(code,  indentLevel);
    code.append("// End "+levelPhrase+"StateMachine: "+smName+"\n");  

    // If there are multiple state machines in the model
    // And this is the top level state machine
    // Then we need to end the cluster border started earlier
    if(smCount > 1 && isTopLevel) 
    {
      code.append("  }\n");
    }
  }

  // Get the path for nested states 
  private String[] getStatePath(StateMachine sm_in, String stateName)
  {
    StateMachine sm = sm_in;
    State cur = sm.getParentState();
    String smName = sm.getName();
    String statePath = stateName;
	
    while (cur != null)
    {
      statePath = smName+"."+statePath;
      sm = cur.getStateMachine();
      cur = sm.getParentState();
      smName = sm.getName();
    }

    return new String[] {smName, statePath};
  }

  private String getConcurrentStatePath(State s){
    State concurrentParentState = s.getStateMachine().getParentState();
    String output=concurrentParentState.getName()+"."+s.getName();
    while (concurrentParentState != null) {
      concurrentParentState = concurrentParentState.getStateMachine().getParentState();
      if(concurrentParentState != null){
        output=concurrentParentState.getName()+"."+output;
      }
    }
    return output;
  }
  
  private String getTransitionTooltip(Transition t, String guardString)
  {
    // Find the state machine path the transition is coming from
    String [] fromStateInfo = getStatePath(t.getFromState().getStateMachine(), t.getFromState().getName());
    String tooltipFromState = fromStateInfo[1];
	
    // Find the state machine path the transition is going to
    String [] toStateInfo = getStatePath(t.getNextState().getStateMachine(), t.getNextState().getName());
    String tooltipToState = toStateInfo[1];
	
    // Get the condition on which transitioning
    Event event = t.getEvent();
	
    // Set transition event information
    String tooltip = "From "+tooltipFromState+" to "+tooltipToState;
    if (!event.isAutoTransition()) 
    {
      if (event.getIsTimer()) // Timed transition
        tooltip = tooltip+" after("+event.getTimerInSeconds()+")";
      else if(event.getArgs() == null || event.getArgs() == "") 
        tooltip = tooltip+" on "+event.getName();
      else 
        tooltip = tooltip+" on "+event.getName()+"("+event.getArgs()+")";
    }
    else
    {
      tooltip = tooltip+" automatically";
	}
	
    // Get guard code for transition
    if (guardString != "" && !hideGuards)
    {
      tooltip = tooltip+"&#13;"+"Guard: "+guardString;
    }
	
    // Get action code for transition	
    Action action = t.getAction();
    String transitionAction = "";
    if (action != null)
    {
      transitionAction = getAvailableActionCode(action);
    }
    if (transitionAction != "" && !hideActions)
    {	
      transitionAction = transitionAction.replaceAll("\"","&quot;");
      tooltip = tooltip+"&#13;"+"Transition Action:\n"+retFiveLines(transitionAction);
    }
	
    return tooltip;
  }

  private String getStateTooltip(StateMachine sm, State st, String className)
  {
    // Find the state machine path
    String [] stateInfo = getStatePath(sm, st.getName());
    String path = stateInfo[1];
	
    String tooltip = "Class "+className+", SM "+stateInfo[0]+", State "+stateInfo[1] + "\n";

    if (sm.indexOfState(st)==0) 
    {
      tooltip += "This is the default initial state " + getRootStateMachineName(st,className) + " is when created.\n";
    }

    buildIncomingTransitionMap(sm);
    if (internalTransitionMap.containsKey(st))
    {
      for (Transition t:internalTransitionMap.get(st))
      {
        tooltip += "This state is entered when event " + t.getEvent().getName() + " occurs while in state " + t.getFromState().getName() + ".\n";
      }
    }
    
    if (st.getTransitions().size()==0) 
    {
      tooltip += "This is the last state the object is.\n";
    }

    // Get the state actions
    if (!hideActions)
    {
      for (Action action : st.getActions())
      {
        String actionType = action.getActionType();
        String actionCode = retFiveLines(getAvailableActionCode(action).replaceAll("\"","&quot;"));
        if ("entry".equals(actionType))
        {
          tooltip = tooltip+"&#13;"+"Entry:\n"+actionCode;
        }
        else if ("exit".equals(actionType))
        {
          tooltip = tooltip+"&#13;"+"Exit:\n"+actionCode;
        }
        else
        {
          tooltip = tooltip+"&#13;"+"Action:\n"+actionCode;
        }
      }
    }
	
    // Get the activities
    for (Activity activity : st.getActivities())
    {
      String activityCode = activity.getCodeblock().toString().replaceAll("\"","&quot;");
      tooltip = tooltip+"&#13;"+"Activity:\n"+retFiveLines(activityCode);
    }
	
    return tooltip;
  }

  // Build a mapping for state and the transitions
  // Add to the hashmap the key(state) and all teh transitions that contains the key as the nextstate in the transition
  private void buildIncomingTransitionMap(StateMachine sm)
  {
    for (Transition t:sm.getAllTransitions())
    {
      State st = t.getNextState();
      List<Transition> allT = new ArrayList<Transition>();
      if (!internalTransitionMap.containsKey(st))
      {
        allT.add(t);
      }
      else
      {
        allT = internalTransitionMap.remove(st);
        if (!allT.contains(t))
        {
          allT.add(t);
        }
      }
      // add the key(state) and the mapped list of transition to the key
      internalTransitionMap.put(st,allT);
    }

    // Make a recursion and visit the state machine of the state parent
    State cur = sm.getParentState();
    if (cur!=null)
    {
      buildIncomingTransitionMap(cur.getStateMachine());
    }
  }

  // Get the root state machine name of the indicated state
  // Return the name of the statemachine if the state is in a nested machine or the classname if not
  private String getRootStateMachineName(State st, String className)
  {
    String previous = "";
    StateMachine cur = st.getStateMachine();
    
    // If the statemachine has nested statemachine, we pass through this statement
    if (cur.getParentState() != null)
    {
      previous = cur.getName();
    }
    else
    {
      // we take the classname if the statemachine does not got a parent stateMachine
      previous = className;
    }

    return previous;
  }
  
  // Get the smallest space indent in the code
  private int getMinSpace(String[] parts)
  {
    int lines = parts.length < 5 ? parts.length : 5;
    int minSpaceCount = 1000;
    
    // The first part doesn't have whitespace in front of it
    for (int i = 1; i < lines; i++)
    {
      String part = parts[i];
      int j = 0, spaceCount = 0;
  	  
      while(j < part.length()){
        if(Character.isWhitespace(part.charAt(j))) { spaceCount++; }
        else { break; } // only want to count leading spaces
        j++;
      }
      
      if (spaceCount < minSpaceCount)
        minSpaceCount = spaceCount;
    }
  	
    return minSpaceCount;
  }
  
  // Return only the first 5 lines of code 
  // Used for displaying code in the tooltip as to not overwhelm the tooltip
  private String retFiveLines(String code)
  {
    String trimmedCode = "";
  	
    // Check if the code has multiple lines
    // TODO: Get this working with Unix AND Windows line endings
    if (code.contains(System.getProperty("line.separator")) || code.contains("\n"))
    {
      String[] parts = code.split("\\r?\\n");
  	  
      int minSpace = getMinSpace(parts);
      int substringIdx = minSpace; 
      int lines = parts.length < 5 ? parts.length : 5;
 	    
      // Only go through the first 5 lines
      for (int i = 0; i < lines; i++)
      {
        String part = "   "+parts[i]; // Always have at least an indent of 3
  		  
        // Get rid of excess indentation or add indentation for first line
        part = (i > 0) ? part.substring(substringIdx) : part;
  		
        trimmedCode = trimmedCode+part;
        if (i < lines-1)
          trimmedCode += "\n";
      }
  	    
      if (parts.length > 5)
        trimmedCode = trimmedCode+"\n   ...";
  	  
      return trimmedCode;
    }
  	
    return "   "+code;
  }

  // Output the graphviz file to a file with the .gv suffix
  private void writeModel()
  {
    try
    {
      String path = StringFormatter.addPathOrAbsolute(
        getModel().getUmpleFile().getPath(), 
        getOutput());
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".gv";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating GraphViz State Machine code." + e, e);
    }
  } 
   
    /*
   * @author : Vahdat
   * This method tries to go through all action languages and get the action code for the first language.
   * This is needed because sometimes we want to generate two languages, but in the diagram we should show just one language which in this case is just the first valid language.
   * 
   */
  private String getAvailableActionCode(Action action) {
		String actionCode = "";
    if (display_language!=""){
      actionCode = action.getCodeblock().getCode(display_language);
      if (actionCode=="" && display_language=="Java"){
        actionCode = action.getActionCode();
      }
    } else {
      actionCode =action.getActionCode();
    }
    if (actionCode.equals("null")) actionCode = "";
    return actionCode;
	}
  
  
  }
}
