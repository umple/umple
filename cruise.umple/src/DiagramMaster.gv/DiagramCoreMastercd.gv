// Code generated by Umple 1.35.0.7523.c616a4dce

digraph "DiagramCoreMaster" {
  rankdir="BT"
  node [ratio="auto" shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: ClassDependencyNode
  "ClassDependencyNode" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ClassDependencyNode    </td></tr><hr/><tr><td align="left" href="" title="int level&#13;">  level : int  </td></tr><tr><td align="left" href="" title="Boolean isFirstLevel&#13;">  isFirstLevel : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInitialized&#13;">  isInitialized : Boolean  </td></tr><tr><td align="left" href="" title="String uClassName&#13;">  uClassName : String  </td></tr></table>>,
   tooltip="class ClassDependencyNode
@umplesource ClassDependencyNode.ump 18&#13;"];

  // Class: Hierarchy
  "Hierarchy" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Hierarchy    </td></tr><hr/><tr><td align="left" href="" title="UmpleClassifier element&#13;">  element : UmpleClassifier  </td></tr></table>>,
   tooltip="class Hierarchy
Used to persist hirarchy information for given elemnts (owner, and children)&#13;@umplesource Generator_UmpleModelWalker.ump 45&#13;"];

  // Class: StateMachine
  "StateMachine" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachine    </td></tr><hr/><tr><td align="left" href="" title="Integer recentSearchDepth&#13;">  recentSearchDepth : Integer  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean containsHistoryState&#13;">  containsHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean containsDeepHistoryState&#13;">  containsDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean queued&#13;before getContainsHistoryState { if ('H'.equals(name)) { containsHistoryState = true; } }&#13;before getContainsDeepHistoryState { if ('HStar'.equals(name)) { containsDeepHistoryState = true; } }&#13;">  queued : Boolean  </td></tr><tr><td align="left" href="" title="Boolean pooled&#13;">  pooled : Boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class StateMachine
* An entity in a running program that can have a set of values (states) and which&#13; changes values by taking transitions in response to various events.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 18&#13;@umplesource StateMachine.ump 30&#13;@umplesource StateMachine.ump 38&#13;@umplesource StateMachine_Code.ump 14&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1679&#13;@umplesource DiagramMaster.ump 96&#13;"];

  // Class: UmpleElement
  "UmpleElement" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleElement    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple element.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple element.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="Boolean hasMainMethod&#13;">  hasMainMethod : Boolean  </td></tr><tr><td align="left" href="" title="String[] namespaces&#13;">  namespaces : String[]  </td></tr><tr><td align="left" href="" title="NameSpace nameSpace&#13;">  nameSpace : NameSpace  </td></tr><tr><td align="left" href="" title="String packageName&#13;">  packageName : String  </td></tr><tr><td align="left" href="" title="ExtraCode extraCode&#13;The code associated with the Umple element.&#13;">  extraCode : ExtraCode  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;Specifies whether or not the Umple element is internal.&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate coordinates&#13;Specifies the position of this Umple element (ex. The UmpleOnline diagram).&#13;">  coordinates : Coordinate  </td></tr><tr><td align="left" href="" title="String displayColor&#13;Specifies the display color of this element&#13;">  displayColor : String  </td></tr></table>>,
   tooltip="class UmpleElement
* An UmpleElement is one of the top-level items found in an Umple model&#13; Currently it has one subclass, UmpleClassifier&#13;&#13;@umplesource Umple.ump 146&#13;@umplesource Umple.ump 186&#13;@umplesource Umple_Code.ump 388&#13;@umplesource DiagramMaster.ump 79&#13;"];

  // Class: UmpleClassifier
  "UmpleClassifier" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClassifier    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="Boolean isDistributable&#13;Specifies whether or not the Umple class or implemented classes are distributable with RMI technology.&#13;">  isDistributable : Boolean  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="UmpleModel sourceModel&#13;">  sourceModel : UmpleModel  </td></tr></table>>,
   tooltip="class UmpleClassifier
* Represents an Umple classifier: a Class or Interface&#13;@umplesource Umple.ump 635&#13;@umplesource Umple_Code.ump 473&#13;@umplesource Umple_CodeMethod.ump 400&#13;@umplesource DiagramMaster.ump 78&#13;"];
  "UmpleClassifier" -> "UmpleElement" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleClass
  "UmpleClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClass    </td></tr><hr/><tr><td align="left" href="" title="Boolean hasProxyPattern&#13;">  hasProxyPattern : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsDefaultInterface&#13;">  needsDefaultInterface : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDistributed&#13;">  isDistributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternalSerializable&#13;">  isInternalSerializable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDefaultInterfaceRemoteRMI&#13;">  isDefaultInterfaceRemoteRMI : Boolean  </td></tr><tr><td align="left" href="" title="Integer level&#13;dependency handling attributes&#13;">  level : Integer  </td></tr><tr><td align="left" href="" title="Boolean isInitialized&#13;">  isInitialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple class is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the class&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple class is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr><tr><td align="left" href="" title="boolean isStatic&#13;">  isStatic : boolean  </td></tr><tr><td align="left" href="" title="String[] disableAutogeneratedMethodList&#13;disable methods from being auto-generated by Umple.&#13;">  disableAutogeneratedMethodList : String[]  </td></tr><tr><td align="left" href="" title="Integer propagateCounter&#13;Arbitary Limit&#13;">  propagateCounter : Integer  </td></tr><tr><td align="left" href="" title="PortBindingInformation[] portBindingInformation&#13;">  portBindingInformation : PortBindingInformation[]  </td></tr><tr><td align="left" href="" title="Boolean portClass&#13;">  portClass : Boolean  </td></tr><tr><td align="left" href="" title="TemplateMethod[] emitMethods&#13;">  emitMethods : TemplateMethod[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,TemplateAttributeParser&gt; templateEmitStringMap&#13;">  templateEmitStringMap : Map&lt;String,TemplateAttributeParser&gt;  </td></tr><tr><td align="left" href="" title="Boolean filteredin&#13;Specifies whether or not in the filter&#13;">  filteredin : Boolean  </td></tr></table>>,
   tooltip="class UmpleClass
* An UmpleClass can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns, such as 'singleton', meaning that there can only be one instance,&#13; and abstract, meaning it can't have any instances.&#13;* In Umple_Code.ump: Methods for computing complex properties&#13;Fragment source file: Umple_Code.ump&#13;Line : 1311&#13;Fragment source file: Umple_Code.ump&#13;Line : 1566&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;----------------------------------------------------------&#13;Handle the existing templates in the current umple model.&#13;class UmpleModel {&#13;  UmpleTemplate getUmpleTemplate(String name){&#13;    for (UmpleTemplate aTemplate : getUmpleTemplates())&#13;    {&#13;      if (aTemplate.getName().equals(name))&#13;      {&#13;        return aTemplate;&#13;      }&#13;    }&#13;    return null;&#13;  }&#13;  &#13;   public UmpleTemplate addUmpleTemplate(String name)&#13;  {&#13;    UmpleTemplate newTemplate = getUmpleTemplate(name);&#13;    if (newTemplate == null)&#13;    {&#13;      newTemplate = new UmpleTemplate(name, this);&#13;      addUmpleTemplate(newTemplate);&#13;    }&#13;    return newTemplate;&#13;  }&#13;}&#13;----------------------------------------------------------&#13;An umple template contains a map for emittable strings&#13;@umplesource StateMachine.ump 367&#13;@umplesource Umple.ump 689&#13;@umplesource Umple.ump 788&#13;@umplesource Umple_CodeClass.ump 104&#13;@umplesource Umple_CodeClass.ump 119&#13;@umplesource Umple_CodeClass.ump 162&#13;@umplesource Umple_Code_StateMachine.ump 42&#13;@umplesource Umple_Code_StateMachine.ump 57&#13;@umplesource Umple_Code_Trait.ump 387&#13;@umplesource Test_Code.ump 18&#13;@umplesource Trace.ump 23&#13;@umplesource Structure.ump 18&#13;@umplesource Template.ump 45&#13;@umplesource UmpleFilterModel.ump 27&#13;@umplesource DiagramMaster.ump 81&#13;"];
  "UmpleClass" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleModel
  "UmpleModel" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleModel    </td></tr><hr/><tr><td align="left" href="" title="UmpleFile umpleFile&#13;The Umple file (.ump) that was used to populate the model.&#13;">  umpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Boolean distributeOn&#13;Variables used for distributed code control&#13;">  distributeOn : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributeForced&#13;">  distributeForced : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributed&#13;">  distributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipcompile&#13;Variables used to advise not to bother trying to compile various language&#13;because the code doesn't contain coherent or complete code.&#13;These are set to true when various @@@skip directives are found in comments&#13;">  skipcompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipjavacompile&#13;">  skipjavacompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skippythoncompile&#13;">  skippythoncompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipcppcompile&#13;">  skipcppcompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skiprubycompile&#13;">  skiprubycompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipphpcompile&#13;">  skipphpcompile : Boolean  </td></tr><tr><td align="left" href="" title="Integer distributePattern&#13;">  distributePattern : Integer  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="String defaultPackage&#13;">  defaultPackage : String  </td></tr><tr><td align="left" href="" title="GenerateTarget[] generates&#13;">  generates : GenerateTarget[]  </td></tr><tr><td align="left" href="" title="Boolean shouldGenerate&#13;">  shouldGenerate : Boolean  </td></tr><tr><td align="left" href="" title="Glossary glossary&#13;">  glossary : Glossary  </td></tr><tr><td align="left" href="" title="String defaultNamespace&#13;">  defaultNamespace : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr><tr><td align="left" href="" title="UmpleClass mainClass&#13;">  mainClass : UmpleClass  </td></tr><tr><td align="left" href="" title="Boolean debugMode&#13;">  debugMode : Boolean  </td></tr><tr><td align="left" href="" title="ParseResult lastResult&#13;">  lastResult : ParseResult  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; generatedCode&#13;">  generatedCode : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Analyzer&gt; analyzers&#13;">  analyzers : Map&lt;String,Analyzer&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Requirement&gt; allRequirements&#13;The core list of all requirement in this Model s found while parsing&#13;">  allRequirements : Map&lt;String,Requirement&gt;  </td></tr><tr><td align="left" href="" title="Coordinate levelOffset&#13;data for default class positioning&#13;">  levelOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate initialOffset&#13;">  initialOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate classSize&#13;">  classSize : Coordinate  </td></tr><tr><td align="left" href="" title="int maxYLevels&#13;">  maxYLevels : int  </td></tr><tr><td align="left" href="" title="CodeBlock[] extraCodes&#13;Top level blocks code contained within a model.&#13;extraCodes will be generated in a single file&#13;">  extraCodes : CodeBlock[]  </td></tr><tr><td align="left" href="" title="Coordinate offsetFromEdge&#13;data for default association positioning&#13;">  offsetFromEdge : Coordinate  </td></tr><tr><td align="left" href="" title="int reflexiveSegmentLength&#13;">  reflexiveSegmentLength : int  </td></tr><tr><td align="left" href="" title="List&lt;File&gt; linkedFiles&#13;">  linkedFiles : List&lt;File&gt;  </td></tr><tr><td align="left" href="" title="Boolean generateConsole&#13;Whether tracer output should be generated if needed&#13;These are set to false when tracer classes are created by generators&#13;">  generateConsole : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateFile&#13;">  generateFile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateString&#13;">  generateString : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateLog4j&#13;">  generateLog4j : Boolean  </td></tr><tr><td align="left" href="" title="String[] availableSuboptions&#13;Suboptions that might be added by the suboption command;&#13;">  availableSuboptions : String[]  </td></tr><tr><td align="left" href="" title="Double parsingTime&#13;ParsingTime represents Parsing end time&#13;gTime1 represents code generation start time&#13;gTime2 represents code generation end time&#13;">  parsingTime : Double  </td></tr><tr><td align="left" href="" title="Double gTime1&#13;">  gTime1 : Double  </td></tr><tr><td align="left" href="" title="Double gTime2&#13;">  gTime2 : Double  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; hashMap&#13;">  hashMap : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="String traceType&#13;">  traceType : String  </td></tr><tr><td align="left" href="" title="TracerDirective tracer&#13;">  tracer : TracerDirective  </td></tr></table>>,
   tooltip="class UmpleModel
* Class UmpleModel is the central class describing the system being compiled.&#13;&#13; The model contains everything that was derived from an Umple file (.ump) when it was parsed such as&#13; the classes, attributes, associations, state machines, methods, etc that were in it.&#13;&#13; Put another way, when an Umple file (.ump) is parsed an Umple model is populated with everything that was parsed from that file.&#13;&#13; Because of this it is absolutely critical to understand the model since it is basically the \"root\" of everything.&#13;The Umple Traits contained within the model.&#13;The State Machines contained within the model.&#13;*&#13; In Umple_Code.ump: Methods for manipulating the Model&#13;Fragment source file: Umple_Code.ump&#13;Line : 360&#13;Fragment source file: Umple_Code.ump&#13;Line : 212&#13;Fragment source file: Umple_Code.ump&#13;Line : 562&#13;Fragment source file: Umple_Code.ump&#13;Line : 571&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;&#13;Mixset meta-model&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;&#13;Feature diagram meta-model&#13;A FeatureDiagram stores information required to build a feature diagram in Umple&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Yellow for Classifiers, classes etc.&#13;@umplesource Umple.ump 29&#13;@umplesource Umple.ump 114&#13;@umplesource Umple.ump 123&#13;@umplesource UmpleVersion.ump 13&#13;@umplesource Umple_Code.ump 22&#13;@umplesource Umple_CodeClass.ump 3&#13;@umplesource Umple_CodeClass.ump 46&#13;@umplesource Umple_CodeClass.ump 72&#13;@umplesource Umple_CodeCoordinate.ump 103&#13;@umplesource Umple_Code_StateMachine.ump 3&#13;@umplesource Umple_Code_Filter.ump 4&#13;@umplesource Umple_Code_Filter.ump 265&#13;@umplesource Umple_Code_Filter.ump 267&#13;@umplesource Umple_Code_Trait.ump 6&#13;@umplesource Mixset.ump 12&#13;@umplesource FeatureModel.ump 14&#13;@umplesource Trace.ump 17&#13;@umplesource UmpleInternalParser_CodeTrait.ump 7&#13;@umplesource UmpleFilterModel.ump 21&#13;@umplesource UmpleInternalParser_CodeMixset.ump 19&#13;@umplesource DiagramMaster.ump 76&#13;"];
  "UmpleModel" -> "Runnable" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Method
  "Method" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Method    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Method is abstract.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isConstructor&#13;Specifies whether this is a constructor for the Umple class.&#13;">  isConstructor : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isQueued&#13;Specifies whether or not the method is queued.&#13;">  isQueued : Boolean  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the method.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;The name of the method.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] exceptions&#13;Throws exceptions&#13;">  exceptions : String[]  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the method.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Boolean isImplemented&#13;Specifies whether or not the method is implemented.&#13;">  isImplemented : Boolean  </td></tr><tr><td align="left" href="" title="Boolean wasGenerated&#13;Specifies, for fAutoAPI methods, if the method was generated&#13;">  wasGenerated : Boolean  </td></tr></table>>,
   tooltip="class Method
* A method in an Umple class or interface&#13; Umple Methods are coded by the programmer in the language(s) of their choice&#13;*&#13;* This is for cloning&#13;* Note: This code doesn't cover deep cloning. It's a combination of  shallow and deep cloning&#13;Grey for methods and code injections&#13;@umplesource Umple.ump 195&#13;@umplesource Umple_CodeMethod.ump 7&#13;@umplesource Umple_CodeMethod.ump 56&#13;@umplesource Trace_Code.ump 281&#13;@umplesource DiagramMaster.ump 123&#13;"];

  // Class: UmpleTestCase
  "UmpleTestCase" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTestCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int locOrder&#13;">  locOrder : int  </td></tr><tr><td align="left" href="" title="boolean isTimed&#13;">  isTimed : boolean  </td></tr><tr><td align="left" href="" title="boolean isOverride&#13;">  isOverride : boolean  </td></tr><tr><td align="left" href="" title="boolean isConcrete&#13;">  isConcrete : boolean  </td></tr><tr><td align="left" href="" title="String concreteLang&#13;">  concreteLang : String  </td></tr><tr><td align="left" href="" title="Map&lt;Integer,String&gt; bodyCode&#13;">  bodyCode : Map&lt;Integer,String&gt;  </td></tr></table>>,
   tooltip="class UmpleTestCase
* Test Case  at the  Class level .&#13;@umplesource Umple.ump 290&#13;"];

  // Class: TestSequence
  "TestSequence" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestSequence    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] tests&#13;">  tests : String[]  </td></tr></table>>,
   tooltip="class TestSequence
@umplesource Umple.ump 322&#13;"];

  // Class: TestInit
  "TestInit" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestInit    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="String objectName&#13;">  objectName : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr></table>>,
   tooltip="class TestInit
initialization statements in test that holds&#13;identifier objectname (parameters);&#13;@umplesource Umple.ump 331&#13;"];

  // Class: ConstraintVariable
  "ConstraintVariable" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintVariable    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr></table>>,
   tooltip="class ConstraintVariable
* ConstraintVariables encapsulate that data of one element in a ConstraintTree, making up the nodes of that tree.&#13; For example: a&lt;3&#13;     has the structure:   ConstraintTree&#13;                          ConstraintOperator(&lt;)&#13;                            /            \&#13;                    ConstraintTree     ConstraintNumberLiteral(3)&#13;               ConstraintAttribute(a)&#13;     where all the \"Constraint\" classes inherit from ConstraintVariable&#13;@umplesource Umple.ump 400&#13;@umplesource Umple_CodeConstraint.ump 715&#13;"];
  "ConstraintVariable" -> "Iterable&lt;ConstraintVariable&gt;" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: ConstraintTree
  "ConstraintTree" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintTree    </td></tr><hr/><tr><td align="left" href="" title="ConstraintVariable root&#13;">  root : ConstraintVariable  </td></tr><tr><td align="left" href="" title="ConstraintOperator requestor&#13;">  requestor : ConstraintOperator  </td></tr><tr><td align="left" href="" title="TreeSet&lt;String&gt; names&#13;">  names : TreeSet&lt;String&gt;  </td></tr><tr><td align="left" href="" title="boolean shouldDisplayBrackets&#13;">  shouldDisplayBrackets : boolean  </td></tr><tr><td align="left" href="" title="boolean displayNegation&#13;">  displayNegation : boolean  </td></tr><tr><td align="left" href="" title="boolean displayBrackets&#13;">  displayBrackets : boolean  </td></tr><tr><td align="left" href="" title="int numberOfElements&#13;">  numberOfElements : int  </td></tr></table>>,
   tooltip="class ConstraintTree
* ConstraintTrees are a redundant class that are necessary because of lone constraints, i.e. [true] has to be handled, and does not contain an operator&#13;   * If lone constraints didn't exist then the ConstraintTree class could be condensed into ConstraintOperator. One nice religation of responsibilities is that ConstraintTrees take care of the ! and () symbols, leaving the ConstraintOperator class to be more pure&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource Umple.ump 406&#13;@umplesource Umple_CodeConstraint.ump 16&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1544&#13;"];
  "ConstraintTree" -> "ConstraintVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Precondition
  "Precondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Precondition    </td></tr></table>>,
   tooltip="class Precondition
* The Preconditions are constraints on methods, restricting the method so that it does not process if the constraint is not satisfied.&#13;@umplesource Umple.ump 434&#13;@umplesource Umple_CodeConstraint.ump 325&#13;"];
  "Precondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: Postcondition
  "Postcondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Postcondition    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class Postcondition
* The Preconditions are constraints on methods, throughing an exception if the constraint is not sastisfied after the method has computed.&#13;@umplesource Umple.ump 441&#13;@umplesource Umple_CodeConstraint.ump 355&#13;"];
  "Postcondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: CodeInjection
  "CodeInjection" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeInjection    </td></tr><hr/><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String operation&#13;">  operation : String  </td></tr><tr><td align="left" href="" title="String operationSource&#13;">  operationSource : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="CodeBlock snippet&#13;">  snippet : CodeBlock  </td></tr><tr><td align="left" href="" title="String constraintParameterName&#13;">  constraintParameterName : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="String injectionlabel&#13;">  injectionlabel : String  </td></tr><tr><td align="left" href="" title="boolean codeBlockProcessed&#13;">  codeBlockProcessed : boolean  </td></tr></table>>,
   tooltip="class CodeInjection
* A block of code that can be injected into one or more methods, constructor, etc.&#13;@umplesource Umple.ump 585&#13;@umplesource Umple_CodeMethod.ump 339&#13;@umplesource UmpleInternalParser_CodeMixset.ump 639&#13;@umplesource DiagramMaster.ump 125&#13;"];

  // Class: UmpleEnumeration
  "UmpleEnumeration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleEnumeration    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] enumValues&#13;">  enumValues : String[]  </td></tr></table>>,
   tooltip="class UmpleEnumeration
* Represents an enumeration&#13;@umplesource Umple.ump 622&#13;@umplesource UmpleEnumeration_Code.ump 1&#13;"];

  // Class: UmpleInterface
  "UmpleInterface" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleInterface    </td></tr></table>>,
   tooltip="class UmpleInterface
* Represents a interface.&#13; Like a class, but can't have any concrete methods, attributes or associations.&#13;@umplesource Umple.ump 662&#13;@umplesource DiagramMaster.ump 77&#13;"];
  "UmpleInterface" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleTrait
  "UmpleTrait" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTrait    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple trait is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the Trait&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple trait is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr></table>>,
   tooltip="class UmpleTrait
* An UmpleTrait can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns.&#13;--- before addDepend { if (depends.contains(aDepend)) { return false; } }&#13;--- before setImmutable { if (!canBeImmutable()) { return false; } }&#13;--- before addAssociationVariable { if (!immutabilityAssociationRulesSatisfied(aAssociationVariable, this.isImmutable())) { return false; } }&#13;--- before setExtendsTrait { if (!enforceImmutabilityInheritanceRules(aExtendsClass)) { return false; } }&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 803&#13;@umplesource Umple.ump 875&#13;@umplesource Umple_Code_Trait.ump 38&#13;@umplesource Umple_Code_Trait.ump 80&#13;@umplesource Umple_Code_Trait.ump 127&#13;@umplesource Umple_Code_Trait.ump 295&#13;"];
  "UmpleTrait" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: GeneralTPApplied
  "GeneralTPApplied" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GeneralTPApplied    </td></tr><hr/><tr><td align="left" href="" title="String inheritanceName&#13;">  inheritanceName : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; parameterMapping&#13;">  parameterMapping : Map&lt;String,String&gt;  </td></tr></table>>,
   tooltip="class GeneralTPApplied
This class is used to assign parameters in classes and traits.&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;@umplesource Umple.ump 892&#13;@umplesource Umple.ump 900&#13;@umplesource Umple_Code_Trait.ump 451&#13;@umplesource Umple_Code_Trait.ump 499&#13;@umplesource Umple_Code_Trait.ump 628&#13;"];

  // Class: AssociationClass
  "AssociationClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    AssociationClass    </td></tr></table>>,
   tooltip="class AssociationClass
* A combination of Class and Association (as defined in UML)&#13; An AssociationClass is a full-fledged class, but at the same time&#13; It associates two other classes that would otherwise have a many-many&#13; relationship. Instances of the AssociationClass represent data&#13; held by the links between those two classes.&#13;&#13;@umplesource Umple.ump 967&#13;@umplesource Umple_CodeClass.ump 74&#13;@umplesource DiagramMaster.ump 80&#13;"];
  "AssociationClass" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleVariable
  "UmpleVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleVariable    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple variable.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the Umple variable.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple variable.&#13;potential enum, 'settable'&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String value&#13;The value of the Umple variable.&#13;">  value : String  </td></tr></table>>,
   tooltip="class UmpleVariable
* Superclass for tracking member variables in all target languages&#13; TODO: Code smell because we have both an association variable and also an association&#13; This class should go and instead AssociationEnd should be the member variable&#13;&#13;@umplesource Umple.ump 978&#13;@umplesource Umple_Code.ump 590&#13;@umplesource Trace.ump 29&#13;@umplesource Trace_Code.ump 16&#13;@umplesource DiagramMaster.ump 88&#13;"];

  // Class: UniqueIdentifier
  "UniqueIdentifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UniqueIdentifier    </td></tr></table>>,
   tooltip="class UniqueIdentifier
@umplesource Umple.ump 1000&#13;"];
  "UniqueIdentifier" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Attribute
  "Attribute" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Attribute    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAutounique&#13;Specifies whether or not the method parameter is auto unique.&#13;TODO: should default to false, but constructors would need updating&#13;">  isAutounique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isUnique&#13;Specifies whether or not the attribute is unique.&#13;">  isUnique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isList&#13;Specifies whether or not the method parameter is a list.&#13;">  isList : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDerived&#13;Specifies whether or not the method parameter is derived.&#13;">  isDerived : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternalTransient&#13;Specifies whether or not the method parameter is internalTransient.&#13;">  isInternalTransient : Boolean  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Boolean isLazy&#13;Specifies whether or not the method parameter is lazy.&#13;">  isLazy : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRefinement&#13;">  isRefinement : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isIvar&#13;Specifies whether or not the method parameter is ivar.&#13;">  isIvar : Boolean  </td></tr></table>>,
   tooltip="class Attribute
* Represents an attribute.&#13; An attribute is more abstract than an instance variable / property in that&#13; it can be derived, and have various other modifiers such as being&#13; initialized, lazy (does not appear in constructor and must be initialized&#13; after construction), etc.&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 1010&#13;@umplesource Umple.ump 1038&#13;@umplesource Umple_CodeAttribute.ump 3&#13;@umplesource Umple_Code_Trait.ump 357&#13;@umplesource DiagramMaster.ump 91&#13;"];
  "Attribute" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Association
  "Association" [ style=filled, fillcolor="#AAFFAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Association    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the association.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isLeftNavigable&#13;">  isLeftNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightNavigable&#13;">  isRightNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isLeftComposition&#13;">  isLeftComposition : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightComposition&#13;">  isRightComposition : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate[] positions&#13;">  positions : Coordinate[]  </td></tr><tr><td align="left" href="" title="Position tokenPosition&#13;">  tokenPosition : Position  </td></tr><tr><td align="left" href="" title="Position tokenEndPosition&#13;">  tokenEndPosition : Position  </td></tr><tr><td align="left" href="" title="Boolean immutable&#13;">  immutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean named&#13;">  named : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;name of the class this association shares with its parent&#13;">  commonClassName : String  </td></tr></table>>,
   tooltip="class Association
* Represents an association, typically between two Umple classes (1-1, 1-*, *-1, etc).&#13; An association in UML/Umple represents a relationship that exists at run time&#13; where instances of one class reference the other, and (if bidirectional) instance&#13; of the other class reference the first cass.&#13; The number of references is governed by the Multiplicity at each AssociationEnd&#13;Green for things to do with associations and attributes&#13;@umplesource Umple.ump 1074&#13;@umplesource Umple_CodeAssociation.ump 8&#13;@umplesource DiagramMaster.ump 84&#13;"];

  // Class: AssociationVariable
  "AssociationVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssociationVariable    </td></tr><hr/><tr><td align="left" href="" title="Multiplicity multiplicity&#13;">  multiplicity : Multiplicity  </td></tr><tr><td align="left" href="" title="Boolean isNavigable&#13;">  isNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isComposition&#13;">  isComposition : Boolean  </td></tr><tr><td align="left" href="" title="String priority&#13;">  priority : String  </td></tr><tr><td align="left" href="" title="AssociationVariable specializedFromVariable&#13;specialized from this association variable&#13;">  specializedFromVariable : AssociationVariable  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;code relevant to specialization of associations&#13;is it ever specialized?&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;is it a specialization of another?&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;">  commonClassName : String  </td></tr><tr><td align="left" href="" title="String superClassName&#13;">  superClassName : String  </td></tr><tr><td align="left" href="" title="int relevantEnd&#13;0 to ensure that everything doesn't break&#13;">  relevantEnd : int  </td></tr><tr><td align="left" href="" title="Boolean needsSuperCode&#13;">  needsSuperCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsCommonCode&#13;">  needsCommonCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToOne&#13;">  mulChangedToOne : Boolean  </td></tr><tr><td align="left" href="" title="String scName&#13;">  scName : String  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToN&#13;">  mulChangedToN : Boolean  </td></tr><tr><td align="left" href="" title="Boolean reqSetCode&#13;">  reqSetCode : Boolean  </td></tr></table>>,
   tooltip="class AssociationVariable
* An association variable represents one of the variables used to represent&#13; an association. In a two-directional association (navigable) there would&#13; be one of these in each associated class.&#13;&#13; See also AssociationEnd&#13;&#13; TODO: Code smell. Should be replaced by the 'otherEnd' of the AssociationEnd&#13;* In Umple_Code.ump: Methods for testing various complex properties&#13;@umplesource Umple.ump 1153&#13;@umplesource Umple_CodeAssociation.ump 305&#13;@umplesource Trace_Code.ump 237&#13;@umplesource DiagramMaster.ump 89&#13;"];
  "AssociationVariable" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: GeneratedElement
  "GeneratedElement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedElement    </td></tr></table>>,
   tooltip="class GeneratedElement
TODO: Code smell: This duplicates the structure of the class from UmpleClass&#13;This is a problem for model-to-model transformations&#13;Should be abolished&#13;&#13;@umplesource Umple.ump 1213&#13;@umplesource Umple_Code.ump 632&#13;"];

  // Class: GeneratedClass
  "GeneratedClass" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedClass    </td></tr></table>>,
   tooltip="class GeneratedClass
* Represents a class that is generated from an Umple class, such as a Java or Cpp class.&#13;@umplesource Umple.ump 1221&#13;"];
  "GeneratedClass" -> "GeneratedElement" [arrowhead="empty"; samehead="gen"];


  // Class: Comment
  "Comment" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Comment    </td></tr><hr/><tr><td align="left" href="" title="String text&#13;The text associated with the comment.&#13;">  text : String  </td></tr><tr><td align="left" href="" title="Boolean annotation&#13;">  annotation : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInline&#13;">  isInline : Boolean  </td></tr></table>>,
   tooltip="class Comment
* Represents a comment, such as those found around classes, methods, attributes and associations.&#13;&#13;@umplesource Umple.ump 1279&#13;@umplesource Umple_Code.ump 729&#13;"];

  // Class: ReqImplementation
  "ReqImplementation" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ReqImplementation    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;unique identifier that should match the identifier of a Requirement&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="String implementingFeature&#13;the class, attribute, state machine, state, association, mixset etc. that the&#13;implementation corresponds to, e.g. 'class Person'&#13;">  implementingFeature : String  </td></tr></table>>,
   tooltip="class ReqImplementation
* Represents an implementation of a requirement&#13; Stored to allow for analysis of matching requirement&#13; and reporting on what features implement what requirement&#13; all instances of this class are tracked in the instance of the model&#13; with the association allReqImplementations&#13; Note that there can be multiple instances of this class for each identifier&#13; because, for example, multiple methods may be needed to implement a given requirement&#13;@umplesource Umple.ump 1331&#13;"];

  // Class: UmpleTemplate
  "UmpleTemplate" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleTemplate    </td></tr></table>>,
   tooltip="class UmpleTemplate
@umplesource Umple.ump 1353&#13;"];
  "UmpleTemplate" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: Port
  "Port" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Port    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="boolean conjugated&#13;">  conjugated : boolean  </td></tr><tr><td align="left" href="" title="int multiplicity&#13;">  multiplicity : int  </td></tr><tr><td align="left" href="" title="boolean replicated&#13;">  replicated : boolean  </td></tr><tr><td align="left" href="" title="String signalType&#13;">  signalType : String  </td></tr></table>>,
   tooltip="class Port
component&#13;@umplesource Umple.ump 1405&#13;@umplesource Structure.ump 45&#13;"];

  // Class: Filter
  "Filter" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Filter    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Integer superCount&#13;">  superCount : Integer  </td></tr><tr><td align="left" href="" title="Integer subCount&#13;">  subCount : Integer  </td></tr><tr><td align="left" href="" title="Integer associationCount&#13;">  associationCount : Integer  </td></tr><tr><td align="left" href="" title="String[] values&#13;">  values : String[]  </td></tr><tr><td align="left" href="" title="String[] filterValues&#13;">  filterValues : String[]  </td></tr></table>>,
   tooltip="class Filter
Fragment source file: Umple_Code.ump&#13;Line : 4932&#13;* A Diagram represents a subset of the available model and is used&#13; to help isolate certain aspects of the system.&#13; It will be used by the code generation process to \"strip\" the model&#13; piror to generation so that all generators will support Diagrams&#13;&#13; Right now, no implementation, just setting up the model&#13;@umplesource Umple_Code_Filter.ump 150&#13;@umplesource Umple_Code_Filter.ump 160&#13;@umplesource UmpleFilterModel.ump 9&#13;@umplesource UmpleFilterModel.ump 15&#13;"];

  // Class: MixsetOrFile
  "MixsetOrFile" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MixsetOrFile    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="UmpleFile useUmpleFile&#13;File where the use statement was encountered&#13;">  useUmpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Integer useUmpleLine&#13;">  useUmpleLine : Integer  </td></tr><tr><td align="left" href="" title="Boolean isMixset&#13;">  isMixset : Boolean  </td></tr></table>>,
   tooltip="class MixsetOrFile
A MixsetOrFile is an umple entity that is subject to require logic&#13;@umplesource Mixset.ump 18&#13;"];

  // Class: FeatureModel
  "FeatureModel" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    FeatureModel    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class FeatureModel
@umplesource FeatureModel.ump 18&#13;@umplesource UmpleInternalParser_CodeRequireStatement.ump 407&#13;"];

  // Class: TraceDirective
  "TraceDirective" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceDirective    </td></tr><hr/><tr><td align="left" href="" title="Integer id&#13;">  id : Integer  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr></table>>,
   tooltip="class TraceDirective
* ----- Trace Directive MetaModel&#13; A statement found in Umple that directs code to be generated&#13; to trace a model element and generate output using some tracing tool&#13;Orange for Trace stuff&#13;@umplesource Trace.ump 94&#13;@umplesource Trace.ump 102&#13;@umplesource DiagramMaster.ump 111&#13;@umplesource DiagramMaster.ump 118&#13;"];

  // Class: TraceCase
  "TraceCase" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="boolean activation&#13;">  activation : boolean  </td></tr></table>>,
   tooltip="class TraceCase
* Future work - initial implementation is done&#13; A group of trace directives that can be switched on or off by other&#13; trace directives&#13;@umplesource Trace.ump 266&#13;@umplesource DiagramMaster.ump 112&#13;"];

  // Class: PortBinding
  "PortBinding" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PortBinding    </td></tr><hr/><tr><td align="left" href="" title="UmpleVariable fromSubcomponent&#13;">  fromSubcomponent : UmpleVariable  </td></tr><tr><td align="left" href="" title="UmpleVariable toSubcomponent&#13;">  toSubcomponent : UmpleVariable  </td></tr></table>>,
   tooltip="class PortBinding
@umplesource Structure.ump 62&#13;"];

  // Class: ActiveMethod
  "ActiveMethod" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ActiveMethod    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="ActiveDirectionHandler methodBody&#13;">  methodBody : ActiveDirectionHandler  </td></tr><tr><td align="left" href="" title="ActiveMethod inverseMethodBody&#13;">  inverseMethodBody : ActiveMethod  </td></tr></table>>,
   tooltip="class ActiveMethod
@umplesource Structure.ump 130&#13;"];

  // Class: TemplateField
  "TemplateField" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateField    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="EmitResponse value&#13;">  value : EmitResponse  </td></tr></table>>,
   tooltip="class TemplateField
A template filed reprsents a field with a value for emitting purposes&#13;@umplesource Template.ump 74&#13;"];

  // Class: CompositeStructureTokenAnalyzer
  "CompositeStructureTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CompositeStructureTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass componentClass&#13;">  componentClass : UmpleClass  </td></tr><tr><td align="left" href="" title="boolean mustWarn&#13;*&#13;    * /////////////////////////////////////////////// TO BE REMOVED AFTER FIXING ERRORS WITH LATEST CHANGES ///////////////////////////////////////////////////////////////////////&#13;">  mustWarn : boolean  </td></tr></table>>,
   tooltip="class CompositeStructureTokenAnalyzer
Used as a helper class to analyze tokens in a given component&#13;@umplesource UmpleInternalParser_CodeStructure.ump 18&#13;@umplesource UmpleInternalParser_CodeStructure.ump 1290&#13;@umplesource UmpleInternalParser_CodeStructure.ump 1440&#13;"];

  // Class: TemplateTokenAnalyzer
  "TemplateTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass currentTemplate&#13;">  currentTemplate : UmpleClass  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; templateAttributes&#13;">  templateAttributes : HashMap&lt;String,Boolean&gt;  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; emitMethods&#13;">  emitMethods : HashMap&lt;String,Boolean&gt;  </td></tr></table>>,
   tooltip="class TemplateTokenAnalyzer
Used as a helper class to analyze tokens in a given template&#13;@umplesource UmpleInternalParser_CodeTemplate.ump 286&#13;"];

  // All associations
  "ClassDependencyNode" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" headtooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" tailtooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('ClassDependencyNode,UmpleClass,0..1 ,* ')" ];
  "Hierarchy" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 parentClass", tooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" headtooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" tailtooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Hierarchy,UmpleClass,0..1 parentClass,* ')" ];
  "Hierarchy" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterfaces", tooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" headtooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" tailtooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Hierarchy,UmpleInterface,* parentInterfaces,* ')" ];
  "StateMachine" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" headtooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" tailtooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachine,UmpleClass,0..1 ,* ')" ];
  "StateMachine" -> "UmpleTrait" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" headtooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" tailtooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachine,UmpleTrait,0..1 ,* ')" ];
  "StateMachine" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" headtooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" tailtooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" URL="javascript:Action.selectAssociation('StateMachine,ReqImplementation,* ,1 ')" ];
  "UmpleClassifier" -> "Method" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('UmpleClassifier,Method,* ,1 ')" ];
  "UmpleClass" -> "Method" [dir="none", taillabel="0..1 ", headlabel="* stateDependentMethods", tooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,Method,* stateDependentMethods,0..1 ')" ];
  "UmpleClass" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,CodeInjection,* ,1 ')" ];
  "UmpleClass" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,UmpleEnumeration,* enums,1 ')" ];
  "UmpleClass" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Precondition,* preConds,1 ')" ];
  "UmpleClass" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Postcondition,* postConds,1 ')" ];
  "UmpleClass" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTestCase,* ,0..1 ')" ];
  "UmpleClass" -> "TestSequence" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TestSequence,* ,0..1 ')" ];
  "UmpleClass" -> "TestInit" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TestInit,* ,0..1 ')" ];
  "UmpleClass" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uClass", headlabel="* ", tooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,ConstraintTree,* ,1 uClass')" ];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="* subclasses", headlabel="0..1 extendsClass", tooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" headtooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" tailtooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleClass,0..1 extendsClass,* subclasses')" ];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="0..1 outerClass", headlabel="* innerClasses", tooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleClass,* innerClasses,0..1 outerClass')" ];
  "UmpleClass" -> "UmpleTrait" [dir="none", taillabel="* subClasses", headlabel="* extendsTraits", tooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTrait,* extendsTraits,* subClasses')" ];
  "UmpleClass" -> "UmpleTemplate" [dir="none", taillabel="* subClasses", headlabel="* extendsTemplates", tooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTemplate,* extendsTemplates,* subClasses')" ];
  "UmpleClass" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterface", tooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleInterface,* parentInterface,* ')" ];
  "UmpleClass" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" headtooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" tailtooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleClass,UniqueIdentifier,0..1 ,1 ')" ];
  "UmpleClass" -> "Attribute" [dir="none", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Attribute,* ,1 ')" ];
  "UmpleClass" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,AssociationVariable,* ,0..1 ')" ];
  "UmpleClass" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Comment,* ,1 ')" ];
  "UmpleClass" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,ReqImplementation,* ,1 ')" ];
  "UmpleClass" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,GeneralTPApplied,* ,1 ')" ];
  "UmpleClass" -> "TraceDirective" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TraceDirective,* ,0..1 ')" ];
  "UmpleClass" -> "TraceCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TraceCase,* ,0..1 ')" ];
  "UmpleClass" -> "Port" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,Port,* ,0..1 ')" ];
  "UmpleClass" -> "ActiveMethod" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,ActiveMethod,* ,0..1 ')" ];
  "UmpleClass" -> "PortBinding" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,PortBinding,* ,0..1 ')" ];
  "UmpleClass" -> "TemplateField" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TemplateField,* ,0..1 ')" ];
  "UmpleModel" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* reqImplementations", tooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" headtooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleModel,ReqImplementation,* reqImplementations,* ')" ];
  "UmpleModel" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleEnumeration,* enums,1 ')" ];
  "UmpleModel" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,Association,* ,1 ')" ];
  "UmpleModel" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleClass,* ,1 ')" ];
  "UmpleModel" -> "UmpleTrait" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleTrait,* ,1 ')" ];
  "UmpleModel" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* stateMachineDefinitions", tooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,StateMachine,* stateMachineDefinitions,1 ')" ];
  "UmpleModel" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleInterface,* ,1 ')" ];
  "UmpleModel" -> "MixsetOrFile" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" headtooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleModel,MixsetOrFile,* ,0..1 ')" ];
  "UmpleModel" -> "FeatureModel" [dir="none", taillabel="0..1 ", headlabel="0..1 ", tooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" headtooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" tailtooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleModel,FeatureModel,0..1 ,0..1 ')" ];
  "UmpleModel" -> "Filter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,Filter,* ,1 ')" ];
  "Method" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" headtooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" tailtooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Method,Comment,* ,1 ')" ];
  "Method" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" headtooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" tailtooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Method,ReqImplementation,* ,1 ')" ];
  "UmpleTestCase" -> "TestInit" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTestCase,TestInit,* ,0..1 ')" ];
  "Precondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" headtooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" tailtooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Precondition,Method,1 ,* ')" ];
  "Postcondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" headtooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" tailtooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Postcondition,Method,1 ,* ')" ];
  "CodeInjection" -> "UmpleClassifier" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('CodeInjection,UmpleClassifier,1 ,* ')" ];
  "CodeInjection" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" headtooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" tailtooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('CodeInjection,ConstraintTree,0..1 ,1 ')" ];
  "UmpleEnumeration" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" headtooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" tailtooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" URL="javascript:Action.selectAssociation('UmpleEnumeration,ReqImplementation,* ,1 ')" ];
  "UmpleInterface" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* extendsInterface", tooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" headtooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleInterface,UmpleInterface,* extendsInterface,* ')" ];
  "UmpleInterface" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" headtooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" tailtooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" URL="javascript:Action.selectAssociation('UmpleInterface,Comment,* ,1 ')" ];
  "UmpleInterface" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" headtooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" tailtooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" URL="javascript:Action.selectAssociation('UmpleInterface,ReqImplementation,* ,1 ')" ];
  "UmpleInterface" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleInterface,UmpleTestCase,* ,0..1 ')" ];
  "UmpleTrait" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,CodeInjection,* ,1 ')" ];
  "UmpleTrait" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Precondition,* preConds,1 ')" ];
  "UmpleTrait" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Postcondition,* postConds,1 ')" ];
  "UmpleTrait" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uTrait", headlabel="* ", tooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,ConstraintTree,* ,1 uTrait')" ];
  "UmpleTrait" -> "UmpleTrait" [dir="none", taillabel="* subTraits", headlabel="* extendsTraits", tooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleTrait,* extendsTraits,* subTraits')" ];
  "UmpleTrait" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" headtooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" tailtooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleTrait,UniqueIdentifier,0..1 ,1 ')" ];
  "UmpleTrait" -> "Attribute" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,Attribute,* ,0..1 ')" ];
  "UmpleTrait" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,AssociationVariable,* ,0..1 ')" ];
  "UmpleTrait" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Comment,* ,1 ')" ];
  "UmpleTrait" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,ReqImplementation,* ,1 ')" ];
  "UmpleTrait" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,GeneralTPApplied,* ,1 ')" ];
  "UmpleTrait" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* requiredInterfaces", tooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleInterface,* requiredInterfaces,1 ')" ];
  "UmpleTrait" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleTestCase,* ,0..1 ')" ];
  "AssociationClass" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..2 associatedTo", tooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" headtooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" tailtooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" URL="javascript:Action.selectAssociation('AssociationClass,Association,0..2 associatedTo,1 ')" ];
  "Attribute" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" headtooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" tailtooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" URL="javascript:Action.selectAssociation('Attribute,Comment,* ,1 ')" ];
  "Attribute" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" headtooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" tailtooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" URL="javascript:Action.selectAssociation('Attribute,ReqImplementation,* ,1 ')" ];
  "Association" -> "Association" [dir="none", taillabel="0..1 specializedFrom", headlabel="* specializedAssociations", tooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" headtooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" tailtooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Association,Association,* specializedAssociations,0..1 specializedFrom')" ];
  "AssociationVariable" -> "AssociationVariable" [dir="none", label="0..1 relatedAssociation", tooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" labeltooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" headtooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" tailtooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" URL="javascript:Action.selectAssociation('AssociationVariable,AssociationVariable,0..1 relatedAssociation')" ];
  "AssociationVariable" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" headtooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" tailtooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" URL="javascript:Action.selectAssociation('AssociationVariable,Comment,* ,1 ')" ];
  "AssociationVariable" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" headtooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" tailtooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" URL="javascript:Action.selectAssociation('AssociationVariable,ReqImplementation,* ,1 ')" ];
  "GeneratedClass" -> "UmpleModel" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 model", tooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" headtooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" tailtooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('GeneratedClass,UmpleModel,1 model,* ')" ];
  "GeneratedClass" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 uClass", tooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" headtooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" tailtooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" URL="javascript:Action.selectAssociation('GeneratedClass,UmpleClass,1 uClass,0..1 ')" ];
  "GeneratedClass" -> "GeneratedClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 parentClass", tooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" headtooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" tailtooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('GeneratedClass,GeneratedClass,0..1 parentClass,0..1 ')" ];
  "Port" -> "PortBinding" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* bindings", tooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" headtooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" tailtooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Port,PortBinding,* bindings,* ')" ];
  "MixsetOrFile" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" headtooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" tailtooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" URL="javascript:Action.selectAssociation('MixsetOrFile,ReqImplementation,* ,1 ')" ];
  "TraceCase" -> "TraceDirective" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" headtooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" tailtooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" URL="javascript:Action.selectAssociation('TraceCase,TraceDirective,* ,1 ')" ];
  "PortBinding" -> "Port" [dir="none", taillabel="* ", headlabel="1 fromPort", tooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" headtooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" tailtooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" URL="javascript:Action.selectAssociation('PortBinding,Port,1 fromPort,* ')" ];
  "PortBinding" -> "Port" [dir="none", taillabel="* connector", headlabel="1 toPort", tooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" headtooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" tailtooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" URL="javascript:Action.selectAssociation('PortBinding,Port,1 toPort,* connector')" ];
  "ActiveMethod" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" headtooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" tailtooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" URL="javascript:Action.selectAssociation('ActiveMethod,Comment,* ,1 ')" ];
  "CompositeStructureTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* components", tooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" headtooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" tailtooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('CompositeStructureTokenAnalyzer,UmpleClass,* components,0..1 ')" ];
  "TemplateTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* templates", tooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" headtooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateTokenAnalyzer,UmpleClass,* templates,0..1 ')" ];
}
