// Code generated by Umple 1.35.0.7523.c616a4dce

digraph "DiagramMaster" {
  rankdir="BT"
  node [ratio="auto" shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: Parser
  "Parser" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Parser    </td></tr><hr/><tr><td align="left" href="" title="String filename&#13;The Umple file (.ump) that will be parsed.&#13;">  filename : String  </td></tr><tr><td align="left" href="" title="String name&#13;default 'program'&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] grammarRules&#13;">  grammarRules : String[]  </td></tr><tr><td align="left" href="" title="ParseResult parseResult&#13;The results of the parsing, and any errors/warning messages will be stored here.&#13;">  parseResult : ParseResult  </td></tr><tr><td align="left" href="" title="Position _curParsePos&#13;">  _curParsePos : Position  </td></tr><tr><td align="left" href="" title="Token rootToken&#13;Every parser makes use of 'tokens' that are built up based on what is parsed.  In the end it looks almost like a 'tree'.&#13;This is the starting token for which everything will be built off of (sub-tokens).&#13;">  rootToken : Token  </td></tr></table>>,
   tooltip="class Parser
* Parses an Umple file (.ump) based on grammar rules.&#13; &#13; As parsing is going on \"tokens\" will be created and linked together in a hierarchy fashion based on what was parsed.&#13;@umplesource Parser_Code.ump 354&#13;@umplesource Parser.ump 81&#13;@umplesource DiagramMaster.ump 60&#13;"];

  // Class: Position
  "Position" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Position    </td></tr></table>>,
   tooltip="class Position
@umplesource Documenter.ump 17&#13;@umplesource Umple.ump 15&#13;@umplesource DiagramMaster.ump 63&#13;"];

  // Class: CodeGeneratorWithSubptions
  "CodeGeneratorWithSubptions" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeGeneratorWithSubptions    </td></tr><hr/><tr><td align="left" href="" title="String[] suboptions&#13;">  suboptions : String[]  </td></tr></table>>,
   tooltip="class CodeGeneratorWithSubptions
Default implementation for generators with suboptions&#13;@umplesource Generator.ump 29&#13;"];
  "CodeGeneratorWithSubptions" -> "CodeGenerator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: NothingGenerator
  "NothingGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    NothingGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr></table>>,
   tooltip="class NothingGenerator
@umplesource Generator_CodeNothing.ump 15&#13;"];
  "NothingGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: SuperCodeGenerator
  "SuperCodeGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    SuperCodeGenerator    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="String parameterConstraintName&#13;">  parameterConstraintName : String  </td></tr><tr><td align="left" href="" title="Boolean dontDisplayNextAccessor&#13;">  dontDisplayNextAccessor : Boolean  </td></tr><tr><td align="left" href="" title="Boolean constraintWithinConstructor&#13;">  constraintWithinConstructor : Boolean  </td></tr></table>>,
   tooltip="class SuperCodeGenerator
@umplesource Generator_SuperCodeGenerator.ump 1&#13;@umplesource Generator_SuperCodeGenerator.ump 47&#13;"];
  "SuperCodeGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];

  "SuperCodeGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: UmpleGenerator
  "UmpleGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleGenerator    </td></tr></table>>,
   tooltip="class UmpleGenerator
@umplesource Generator_CodeUmple.ump 33&#13;"];
  "UmpleGenerator" -> "SuperCodeGenerator" [arrowhead="empty"; samehead="gen"];

  "UmpleGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Scope
  "Scope" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Scope    </td></tr></table>>,
   tooltip="class Scope
* Local variables&#13;@umplesource Generator_CodeUmple.ump 355&#13;"];
  "Scope" -> "UmpleGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: RubyGenerator
  "RubyGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    RubyGenerator    </td></tr></table>>,
   tooltip="class RubyGenerator
@umplesource Generator_CodeRuby.ump 12&#13;"];
  "RubyGenerator" -> "SuperCodeGenerator" [arrowhead="empty"; samehead="gen"];

  "RubyGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: JavaGenerator
  "JavaGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    JavaGenerator    </td></tr><hr/><tr><td align="left" href="" title="StringBuilder uncaughtExceptions&#13;">  uncaughtExceptions : StringBuilder  </td></tr><tr><td align="left" href="" title="UmpleClass[] mainClasses&#13;">  mainClasses : UmpleClass[]  </td></tr></table>>,
   tooltip="class JavaGenerator
@umplesource Generator_CodeJava.ump 11&#13;"];
  "JavaGenerator" -> "SuperCodeGenerator" [arrowhead="empty"; samehead="gen"];

  "JavaGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: PythonGenerator
  "PythonGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PythonGenerator    </td></tr></table>>,
   tooltip="class PythonGenerator
@umplesource Generator_CodePython.ump 11&#13;"];
  "PythonGenerator" -> "JavaGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: RTCppGenerator
  "RTCppGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    RTCppGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class RTCppGenerator
@umplesource Generator_CodeRTCpp.ump 12&#13;"];
  "RTCppGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: PhpGenerator
  "PhpGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    PhpGenerator    </td></tr></table>>,
   tooltip="class PhpGenerator
@umplesource Generator_CodePhp.ump 12&#13;"];
  "PhpGenerator" -> "SuperCodeGenerator" [arrowhead="empty"; samehead="gen"];

  "PhpGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Uigu2Generator
  "Uigu2Generator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Uigu2Generator    </td></tr><hr/><tr><td align="left" href="" title="Uigu2ElementGenerator generator&#13;">  generator : Uigu2ElementGenerator  </td></tr><tr><td align="left" href="" title="UmpleElement[] elements&#13;">  elements : UmpleElement[]  </td></tr><tr><td align="left" href="" title="Path outputPath&#13;* Path to where the PhpGenerator will place the domain classes&#13;">  outputPath : Path  </td></tr></table>>,
   tooltip="class Uigu2Generator
@umplesource Generator_CodeUigu2.ump 12&#13;"];
  "Uigu2Generator" -> "PhpGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: SqlGenerator
  "SqlGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    SqlGenerator    </td></tr></table>>,
   tooltip="class SqlGenerator
@umplesource Generator_CodeSql.ump 12&#13;"];
  "SqlGenerator" -> "SuperCodeGenerator" [arrowhead="empty"; samehead="gen"];

  "SqlGenerator" -> "CodeTranslator" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: UmpleSelfGenerator
  "UmpleSelfGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleSelfGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="String fileExtension&#13;">  fileExtension : String  </td></tr><tr><td align="left" href="" title="int temp&#13;">  temp : int  </td></tr><tr><td align="left" href="" title="Boolean hideActions&#13;">  hideActions : Boolean  </td></tr><tr><td align="left" href="" title="Boolean hideGuards&#13;">  hideGuards : Boolean  </td></tr><tr><td align="left" href="" title="Boolean showTransitionLabels&#13;">  showTransitionLabels : Boolean  </td></tr><tr><td align="left" href="" title="Boolean showGuardLabels&#13;">  showGuardLabels : Boolean  </td></tr><tr><td align="left" href="" title="String display_language&#13;">  display_language : String  </td></tr><tr><td align="left" href="" title="StateMachine root&#13;">  root : StateMachine  </td></tr><tr><td align="left" href="" title="Boolean roleExists&#13;">  roleExists : Boolean  </td></tr><tr><td align="left" href="" title="String roleName&#13;">  roleName : String  </td></tr><tr><td align="left" href="" title="String smSeqType&#13;">  smSeqType : String  </td></tr><tr><td align="left" href="" title="String compositeStateSeqType&#13;">  compositeStateSeqType : String  </td></tr></table>>,
   tooltip="class UmpleSelfGenerator
@umplesource Generator_CodeUmpleSelf.ump 12&#13;"];
  "UmpleSelfGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: USEGenerator
  "USEGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    USEGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class USEGenerator
@umplesource Generator_CodeUSE.ump 10&#13;"];
  "USEGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: EcoreGenerator
  "EcoreGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EcoreGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="EcoreGenModel genModel&#13;">  genModel : EcoreGenModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class EcoreGenerator
@umplesource ecoreGeneratorConfig.ump 7&#13;@umplesource Generator_CodeEcore.ump 13&#13;"];
  "EcoreGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: ClassDependencyNode
  "ClassDependencyNode" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ClassDependencyNode    </td></tr><hr/><tr><td align="left" href="" title="int level&#13;">  level : int  </td></tr><tr><td align="left" href="" title="Boolean isFirstLevel&#13;">  isFirstLevel : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInitialized&#13;">  isInitialized : Boolean  </td></tr><tr><td align="left" href="" title="String uClassName&#13;">  uClassName : String  </td></tr></table>>,
   tooltip="class ClassDependencyNode
@umplesource ClassDependencyNode.ump 18&#13;"];

  // Class: ClassDependencyTree
  "ClassDependencyTree" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ClassDependencyTree    </td></tr><hr/><tr><td align="left" href="" title="boolean isLevelled&#13;">  isLevelled : boolean  </td></tr><tr><td align="left" href="" title="boolean isProcessed&#13;">  isProcessed : boolean  </td></tr></table>>,
   tooltip="class ClassDependencyTree
@umplesource ClassDependencyNode.ump 46&#13;"];

  // Class: TestGenerator
  "TestGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="Random random&#13;">  random : Random  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,String&gt; testingCredentialsLookUpMap&#13;">  testingCredentialsLookUpMap : HashMap&lt;String,String&gt;  </td></tr></table>>,
   tooltip="class TestGenerator
@umplesource Generator_CodeTest.ump 14&#13;"];
  "TestGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: PapyrusGenerator
  "PapyrusGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PapyrusGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="String smName&#13;">  smName : String  </td></tr><tr><td align="left" href="" title="String className&#13;">  className : String  </td></tr><tr><td align="left" href="" title="String diagramID&#13;">  diagramID : String  </td></tr><tr><td align="left" href="" title="String smID&#13;">  smID : String  </td></tr><tr><td align="left" href="" title="String regionID&#13;">  regionID : String  </td></tr></table>>,
   tooltip="class PapyrusGenerator
@umplesource Generator_CodePapyrus.ump 12&#13;"];
  "PapyrusGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: XmiGenerator
  "XmiGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    XmiGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class XmiGenerator
@umplesource Generator_CodeXmi.ump 12&#13;"];
  "XmiGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: TextUmlGenerator
  "TextUmlGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TextUmlGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class TextUmlGenerator
@umplesource Generator_CodeTextUml.ump 12&#13;@umplesource Generator_CodeTextUml.ump 26&#13;"];
  "TextUmlGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: ScxmlGenerator
  "ScxmlGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ScxmlGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="StringBuilder code&#13;">  code : StringBuilder  </td></tr></table>>,
   tooltip="class ScxmlGenerator
@umplesource Generator_CodeScxml.ump 12&#13;"];
  "ScxmlGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: GvStateDiagramGenerator
  "GvStateDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GvStateDiagramGenerator    </td></tr><hr/><tr><td align="left" href="" title="Boolean hideActions&#13;">  hideActions : Boolean  </td></tr><tr><td align="left" href="" title="Boolean hideGuards&#13;">  hideGuards : Boolean  </td></tr><tr><td align="left" href="" title="Boolean showTransitionLabels&#13;">  showTransitionLabels : Boolean  </td></tr><tr><td align="left" href="" title="Boolean showGuardLabels&#13;">  showGuardLabels : Boolean  </td></tr><tr><td align="left" href="" title="String display_language&#13;">  display_language : String  </td></tr><tr><td align="left" href="" title="StateMachine root&#13;">  root : StateMachine  </td></tr><tr><td align="left" href="" title="Map&lt;Transition,String&gt; internalBoundaryTrans&#13;">  internalBoundaryTrans : Map&lt;Transition,String&gt;  </td></tr><tr><td align="left" href="" title="int nodeNumber&#13;">  nodeNumber : int  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class GvStateDiagramGenerator
@umplesource Generator_CodeGvStateDiagram.ump 26&#13;@umplesource stateMachineDiagramConfig.ump 9&#13;"];
  "GvStateDiagramGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: StateTablesGenerator
  "StateTablesGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateTablesGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="StringBuilder code&#13;">  code : StringBuilder  </td></tr></table>>,
   tooltip="class StateTablesGenerator
@umplesource Generator_CodeStateTables.ump 24&#13;@umplesource Generator_CodeStateTables.ump 1916&#13;"];
  "StateTablesGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: EventSequenceGenerator
  "EventSequenceGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="EventSequenceTemplate templater&#13;">  templater : EventSequenceTemplate  </td></tr></table>>,
   tooltip="class EventSequenceGenerator
@umplesource Generator_CodeEventSequence.ump 18&#13;@umplesource Generator_CodeEventSequence.ump 790&#13;"];
  "EventSequenceGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: EventSequencer
  "EventSequencer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequencer    </td></tr><hr/><tr><td align="left" href="" title="StateMachine sm&#13;">  sm : StateMachine  </td></tr><tr><td align="left" href="" title="double randomEventProportion&#13;">  randomEventProportion : double  </td></tr><tr><td align="left" href="" title="Random randomGenerator&#13;">  randomGenerator : Random  </td></tr><tr><td align="left" href="" title="int smNumber&#13;">  smNumber : int  </td></tr><tr><td align="left" href="" title="int nextStateId&#13;">  nextStateId : int  </td></tr></table>>,
   tooltip="class EventSequencer
@umplesource Generator_CodeEventSequence.ump 32&#13;"];

  // Class: EventSequenceWalkTracker
  "EventSequenceWalkTracker" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceWalkTracker    </td></tr><hr/><tr><td align="left" href="" title="String finishReason&#13;">  finishReason : String  </td></tr><tr><td align="left" href="" title="int counter&#13;">  counter : int  </td></tr><tr><td align="left" href="" title="int maxEvents&#13;set lazily&#13;">  maxEvents : int  </td></tr></table>>,
   tooltip="class EventSequenceWalkTracker
@umplesource Generator_CodeEventSequence.ump 322&#13;"];

  // Class: StateWrapper
  "StateWrapper" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateWrapper    </td></tr><hr/><tr><td align="left" href="" title="State wrappedState&#13;">  wrappedState : State  </td></tr><tr><td align="left" href="" title="int stateId&#13;">  stateId : int  </td></tr></table>>,
   tooltip="class StateWrapper
A simple wrapper over a State machine's states that allows keeping track&#13;of the parent state of the wrapped state, and all events that will cause&#13;a transition out of the wrapped state.&#13;@umplesource Generator_CodeEventSequence.ump 384&#13;"];

  // Class: EventWrapper
  "EventWrapper" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventWrapper    </td></tr><hr/><tr><td align="left" href="" title="Event wrappedEvent&#13;">  wrappedEvent : Event  </td></tr></table>>,
   tooltip="class EventWrapper
Allows mapping from events to the various transitions. This allows guards to&#13;effectively be ignored for the purpose of walking randomly through the state&#13;machine.&#13;@umplesource Generator_CodeEventSequence.ump 499&#13;"];

  // Class: EventSequenceTable
  "EventSequenceTable" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceTable    </td></tr><hr/><tr><td align="left" href="" title="int gridId&#13;">  gridId : int  </td></tr><tr><td align="left" href="" title="int nextEventNumber&#13;">  nextEventNumber : int  </td></tr></table>>,
   tooltip="class EventSequenceTable
The grid-type view of the event sequence, with the possible states as rows&#13;and the sequence of events as columns.&#13;@umplesource Generator_CodeEventSequence.ump 507&#13;"];

  // Class: EventSequenceTableHeaderRow
  "EventSequenceTableHeaderRow" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    EventSequenceTableHeaderRow    </td></tr></table>>,
   tooltip="class EventSequenceTableHeaderRow
Represents the header row of a Event Sequence table.&#13;@umplesource Generator_CodeEventSequence.ump 596&#13;"];

  // Class: EventSequenceTableRow
  "EventSequenceTableRow" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceTableRow    </td></tr><hr/><tr><td align="left" href="" title="StateWrapper rowState&#13;">  rowState : StateWrapper  </td></tr><tr><td align="left" href="" title="boolean isHeader&#13;">  isHeader : boolean  </td></tr></table>>,
   tooltip="class EventSequenceTableRow
Represents a row in the Event Sequence table. This has a state name as a row&#13;label&#13;@umplesource Generator_CodeEventSequence.ump 624&#13;"];

  // Class: EventSequenceHeaderCell
  "EventSequenceHeaderCell" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceHeaderCell    </td></tr><hr/><tr><td align="left" href="" title="String label&#13;">  label : String  </td></tr></table>>,
   tooltip="class EventSequenceHeaderCell
Represents a cell in a row in the first row of a Event Sequence table.&#13;@umplesource Generator_CodeEventSequence.ump 670&#13;"];

  // Class: EventSequenceCell
  "EventSequenceCell" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceCell    </td></tr><hr/><tr><td align="left" href="" title="boolean isEmpty&#13;">  isEmpty : boolean  </td></tr><tr><td align="left" href="" title="String label&#13;">  label : String  </td></tr></table>>,
   tooltip="class EventSequenceCell
Represents a cell in a row in the Event Sequence table.&#13;@umplesource Generator_CodeEventSequence.ump 684&#13;"];

  // Class: SimpleMetricsGenerator
  "SimpleMetricsGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    SimpleMetricsGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="StringBuilder code&#13;">  code : StringBuilder  </td></tr></table>>,
   tooltip="class SimpleMetricsGenerator
@umplesource Generator_CodeSimpleMetrics.ump 18&#13;"];
  "SimpleMetricsGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: ClassMetrics
  "ClassMetrics" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ClassMetrics    </td></tr><hr/><tr><td align="left" href="" title="StringBuilder resultCode&#13;">  resultCode : StringBuilder  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr></table>>,
   tooltip="class ClassMetrics
@umplesource SimpleMetrics_Class.ump 40&#13;"];
  "ClassMetrics" -> "SimpleMetricsGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: StateMachineMetrics
  "StateMachineMetrics" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachineMetrics    </td></tr><hr/><tr><td align="left" href="" title="StringBuilder resultCode&#13;">  resultCode : StringBuilder  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr></table>>,
   tooltip="class StateMachineMetrics
@umplesource SimpleMetrics_SM.ump 45&#13;"];
  "StateMachineMetrics" -> "SimpleMetricsGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: CodeMetrics
  "CodeMetrics" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeMetrics    </td></tr><hr/><tr><td align="left" href="" title="StringBuilder resultCode&#13;">  resultCode : StringBuilder  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr></table>>,
   tooltip="class CodeMetrics
@umplesource SimpleMetrics_CodeLines.ump 59&#13;"];
  "CodeMetrics" -> "SimpleMetricsGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: ExternalGrammarGenerator
  "ExternalGrammarGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ExternalGrammarGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="StringBuilder code&#13;">  code : StringBuilder  </td></tr></table>>,
   tooltip="class ExternalGrammarGenerator
@umplesource Generator_CodeExternalGrammar.ump 14&#13;"];
  "ExternalGrammarGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: SuperGvGenerator
  "SuperGvGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    SuperGvGenerator    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class SuperGvGenerator
@umplesource Generator_SuperGvGenerator.ump 1&#13;"];
  "SuperGvGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: GvClassDiagramGenerator
  "GvClassDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GvClassDiagramGenerator    </td></tr></table>>,
   tooltip="class GvClassDiagramGenerator
@umplesource Generator_CodeGvClassDiagram.ump 18&#13;"];
  "GvClassDiagramGenerator" -> "SuperGvGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: GvClassTraitDiagramGenerator
  "GvClassTraitDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GvClassTraitDiagramGenerator    </td></tr></table>>,
   tooltip="class GvClassTraitDiagramGenerator
@umplesource Generator_CodeGvClassTraitDiagram.ump 18&#13;"];
  "GvClassTraitDiagramGenerator" -> "SuperGvGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: GvFeatureDiagramGenerator
  "GvFeatureDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GvFeatureDiagramGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="Set&lt;String&gt; featureSet&#13;">  featureSet : Set&lt;String&gt;  </td></tr><tr><td align="left" href="" title="FeatureModel featureModel&#13;">  featureModel : FeatureModel  </td></tr></table>>,
   tooltip="class GvFeatureDiagramGenerator
@umplesource Generator_CodeGvFeatureDiagram.ump 17&#13;@umplesource FeatureDiagramConfig.ump 11&#13;"];
  "GvFeatureDiagramGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: GvEntityRelationshipDiagramGenerator
  "GvEntityRelationshipDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GvEntityRelationshipDiagramGenerator    </td></tr></table>>,
   tooltip="class GvEntityRelationshipDiagramGenerator
@umplesource Generator_CodeGvEntityRelationshipDiagram.ump 19&#13;@umplesource entityRelationshipConfig.ump 9&#13;"];
  "GvEntityRelationshipDiagramGenerator" -> "SuperGvGenerator" [arrowhead="empty"; samehead="gen"];


  // Class: AlloyGenerator
  "AlloyGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AlloyGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="Utility utility&#13;">  utility : Utility  </td></tr></table>>,
   tooltip="class AlloyGenerator
@umplesource Generator_CodeAlloy.ump 22&#13;"];
  "AlloyGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: ModuleElement
  "ModuleElement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ModuleElement    </td></tr><hr/><tr><td align="left" href="" title="String header&#13;">  header : String  </td></tr></table>>,
   tooltip="class ModuleElement
@umplesource NuSMVMetamodel.ump 228&#13;"];

  // Class: DefineDeclaration
  "DefineDeclaration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    DefineDeclaration    </td></tr></table>>,
   tooltip="class DefineDeclaration
@umplesource NuSMVMetamodel.ump 280&#13;"];
  "DefineDeclaration" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: DefineBody
  "DefineBody" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    DefineBody    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;">  identifier : String  </td></tr></table>>,
   tooltip="class DefineBody
@umplesource NuSMVMetamodel.ump 294&#13;"];

  // Class: BasicExpression
  "BasicExpression" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    BasicExpression    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;Variable Declarations&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="Boolean bracketed&#13;">  bracketed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean displayNegation&#13;">  displayNegation : Boolean  </td></tr></table>>,
   tooltip="class BasicExpression
@umplesource NuSMVMetamodel.ump 303&#13;"];

  // Class: CTLSpecification
  "CTLSpecification" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CTLSpecification    </td></tr><hr/><tr><td align="left" href="" title="Boolean displayNegation&#13;">  displayNegation : Boolean  </td></tr></table>>,
   tooltip="class CTLSpecification
@umplesource NuSMVMetamodel.ump 366&#13;"];
  "CTLSpecification" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: InvarExpression
  "InvarExpression" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    InvarExpression    </td></tr><hr/><tr><td align="left" href="" title="Boolean qualified&#13;">  qualified : Boolean  </td></tr></table>>,
   tooltip="class InvarExpression
@umplesource NuSMVMetamodel.ump 382&#13;"];
  "InvarExpression" -> "BasicExpression" [arrowhead="empty"; samehead="gen"];


  // Class: CTLExpression
  "CTLExpression" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CTLExpression    </td></tr><hr/><tr><td align="left" href="" title="Boolean qualified&#13;">  qualified : Boolean  </td></tr></table>>,
   tooltip="class CTLExpression
@umplesource NuSMVMetamodel.ump 416&#13;"];
  "CTLExpression" -> "BasicExpression" [arrowhead="empty"; samehead="gen"];


  // Class: NextExpression
  "NextExpression" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    NextExpression    </td></tr></table>>,
   tooltip="class NextExpression
@umplesource NuSMVMetamodel.ump 450&#13;"];
  "NextExpression" -> "BasicExpression" [arrowhead="empty"; samehead="gen"];


  // Class: AssignConstraint
  "AssignConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssignConstraint    </td></tr></table>>,
   tooltip="class AssignConstraint
@umplesource NuSMVMetamodel.ump 458&#13;"];
  "AssignConstraint" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: Assign
  "Assign" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Assign    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;">  identifier : String  </td></tr></table>>,
   tooltip="class Assign
@umplesource NuSMVMetamodel.ump 504&#13;"];

  // Class: CaseExpression
  "CaseExpression" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CaseExpression    </td></tr></table>>,
   tooltip="class CaseExpression
@umplesource NuSMVMetamodel.ump 538&#13;"];
  "CaseExpression" -> "BasicExpression" [arrowhead="empty"; samehead="gen"];


  // Class: CaseStatement
  "CaseStatement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CaseStatement    </td></tr></table>>,
   tooltip="class CaseStatement
@umplesource NuSMVMetamodel.ump 549&#13;"];

  // Class: TransConstraint
  "TransConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TransConstraint    </td></tr><hr/><tr><td align="left" href="" title="Boolean terminated&#13;">  terminated : Boolean  </td></tr></table>>,
   tooltip="class TransConstraint
@umplesource NuSMVMetamodel.ump 558&#13;"];
  "TransConstraint" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: InitConstraint
  "InitConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    InitConstraint    </td></tr><hr/><tr><td align="left" href="" title="Boolean terminated&#13;">  terminated : Boolean  </td></tr></table>>,
   tooltip="class InitConstraint
@umplesource NuSMVMetamodel.ump 577&#13;"];
  "InitConstraint" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: InvarConstraint
  "InvarConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    InvarConstraint    </td></tr><hr/><tr><td align="left" href="" title="Boolean terminated&#13;">  terminated : Boolean  </td></tr></table>>,
   tooltip="class InvarConstraint
@umplesource NuSMVMetamodel.ump 595&#13;"];
  "InvarConstraint" -> "ModuleElement" [arrowhead="empty"; samehead="gen"];


  // Class: TargetConfiguration
  "TargetConfiguration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    TargetConfiguration    </td></tr></table>>,
   tooltip="class TargetConfiguration
@umplesource TargetConfig.ump 3&#13;"];

  // Class: ExplorationResult
  "ExplorationResult" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ExplorationResult    </td></tr><hr/><tr><td align="left" href="" title="HashMap&lt;State,TargetConfiguration&gt; map&#13;">  map : HashMap&lt;State,TargetConfiguration&gt;  </td></tr></table>>,
   tooltip="class ExplorationResult
@umplesource TargetConfig.ump 23&#13;"];

  // Class: NuSMVGenerator
  "NuSMVGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    NuSMVGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class NuSMVGenerator
@umplesource Generator_CodeNuSMV.ump 19&#13;"];
  "NuSMVGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: NuSMVOptimizerGenerator
  "NuSMVOptimizerGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    NuSMVOptimizerGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class NuSMVOptimizerGenerator
@umplesource Generator_CodeNuSMVOptimizer.ump 19&#13;"];
  "NuSMVOptimizerGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: SimulateGenerator
  "SimulateGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    SimulateGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class SimulateGenerator
@umplesource Generator_CodeSimulate.ump 12&#13;"];
  "SimulateGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: YumlGenerator
  "YumlGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    YumlGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String outputPath&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;">  outputPath : String  </td></tr></table>>,
   tooltip="class YumlGenerator
@umplesource Generator_CodeYuml.ump 12&#13;"];
  "YumlGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: XtextGenerator
  "XtextGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    XtextGenerator    </td></tr><hr/><tr><td align="left" href="" title="PatternHandler[] patterns&#13;off of what's contained in here.&#13;">  patterns : PatternHandler[]  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String outputPath&#13;">  outputPath : String  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="HashSet&lt;String&gt; terminals&#13;">  terminals : HashSet&lt;String&gt;  </td></tr></table>>,
   tooltip="class XtextGenerator
@umplesource Generator_CodeXtext.ump 12&#13;"];
  "XtextGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: JsonGenerator
  "JsonGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    JsonGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class JsonGenerator
@umplesource Generator_CodeJson.ump 12&#13;"];
  "JsonGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: JsonMixedGenerator
  "JsonMixedGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    JsonMixedGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr></table>>,
   tooltip="class JsonMixedGenerator
@umplesource Generator_CodeJsonMixed.ump 12&#13;"];
  "JsonMixedGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: StructureDiagramGenerator
  "StructureDiagramGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StructureDiagramGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="String componentPartHighlightColor&#13;">  componentPartHighlightColor : String  </td></tr><tr><td align="left" href="" title="String componentPartContainerHighlightColor&#13;">  componentPartContainerHighlightColor : String  </td></tr><tr><td align="left" href="" title="String componentPartContainerLabelHighlightColor&#13;">  componentPartContainerLabelHighlightColor : String  </td></tr><tr><td align="left" href="" title="String portFillColor&#13;">  portFillColor : String  </td></tr></table>>,
   tooltip="class StructureDiagramGenerator
@umplesource Generator_CodeStructureDiagram.ump 28&#13;"];
  "StructureDiagramGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: Hierarchy
  "Hierarchy" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Hierarchy    </td></tr><hr/><tr><td align="left" href="" title="UmpleClassifier element&#13;">  element : UmpleClassifier  </td></tr></table>>,
   tooltip="class Hierarchy
Used to persist hirarchy information for given elemnts (owner, and children)&#13;@umplesource Generator_UmpleModelWalker.ump 45&#13;"];

  // Class: CodeAnalysisGenerator
  "CodeAnalysisGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeAnalysisGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;Contains various aspects from an Umple file (.ump), such as classes,&#13;attributes, associations and methods.  Generated output is based&#13;off of what's contained in here.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="HtmlDocument doc&#13;">  doc : HtmlDocument  </td></tr></table>>,
   tooltip="class CodeAnalysisGenerator
@umplesource Generator_CodeAnalysis.ump 21&#13;"];
  "CodeAnalysisGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleAnnotaiveToCompositionGenerator
  "UmpleAnnotaiveToCompositionGenerator" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleAnnotaiveToCompositionGenerator    </td></tr><hr/><tr><td align="left" href="" title="UmpleModel model&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="String output&#13;">  output : String  </td></tr><tr><td align="left" href="" title="String fileExtension&#13;">  fileExtension : String  </td></tr></table>>,
   tooltip="class UmpleAnnotaiveToCompositionGenerator
@umplesource Generator_CodeAnnotaiveToComposition.ump 12&#13;"];
  "UmpleAnnotaiveToCompositionGenerator" -> "CodeGeneratorWithSubptions" [arrowhead="empty"; samehead="gen"];


  // Class: ErrorType
  "ErrorType" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    ErrorType    </td></tr></table>>,
   tooltip="class ErrorType
Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;@umplesource Parser.ump 14&#13;@umplesource UmpleInternalParser.ump 10&#13;@umplesource DiagramMaster.ump 68&#13;"];

  // Class: RulePartValue
  "RulePartValue" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    RulePartValue    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String value&#13;">  value : String  </td></tr></table>>,
   tooltip="class RulePartValue
@umplesource Parser.ump 46&#13;@umplesource DiagramMaster.ump 64&#13;"];

  // Class: StateMachine
  "StateMachine" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachine    </td></tr><hr/><tr><td align="left" href="" title="Integer recentSearchDepth&#13;">  recentSearchDepth : Integer  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean containsHistoryState&#13;">  containsHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean containsDeepHistoryState&#13;">  containsDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean queued&#13;before getContainsHistoryState { if ('H'.equals(name)) { containsHistoryState = true; } }&#13;before getContainsDeepHistoryState { if ('HStar'.equals(name)) { containsDeepHistoryState = true; } }&#13;">  queued : Boolean  </td></tr><tr><td align="left" href="" title="Boolean pooled&#13;">  pooled : Boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class StateMachine
* An entity in a running program that can have a set of values (states) and which&#13; changes values by taking transitions in response to various events.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 18&#13;@umplesource StateMachine.ump 30&#13;@umplesource StateMachine.ump 38&#13;@umplesource StateMachine_Code.ump 14&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1679&#13;@umplesource DiagramMaster.ump 96&#13;"];

  // Class: State
  "State" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    State    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isConcurrent&#13;">  isConcurrent : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isStartState&#13;">  isStartState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;for code generation only e.g. ouside scope of nested state&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isHistoryState&#13;">  isHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDeepHistoryState&#13;">  isDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean finalState&#13;">  finalState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isVisited&#13;">  isVisited : Boolean  </td></tr><tr><td align="left" href="" title="String displayColor&#13;">  displayColor : String  </td></tr><tr><td align="left" href="" title="Position position&#13;State mostRecentState; //will be in dot notation, if used by historyState, only look at first part?&#13;">  position : Position  </td></tr></table>>,
   tooltip="class State
* One of the values in which a state machine can be at any given point in time&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Blue for things to do with state machines&#13;@umplesource StateMachine.ump 54&#13;@umplesource StateMachine_Code.ump 500&#13;@umplesource Trace_Code.ump 54&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1790&#13;@umplesource DiagramMaster.ump 95&#13;"];
  "State" -> "Node" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Activity
  "Activity" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Activity    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String activityCode&#13;target language code&#13;">  activityCode : String  </td></tr><tr><td align="left" href="" title="Map&lt;String,Position&gt; implementationPositions&#13;">  implementationPositions : Map&lt;String,Position&gt;  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Boolean composed&#13;* This is used to detect if an activity has been added to the state by its used traits.&#13;">  composed : Boolean  </td></tr></table>>,
   tooltip="class Activity
* Some code to execute for an extended period while in a state&#13; This code is found after they keyword 'do' in Umple&#13; The code is executed in a separate threat, and can be terminated by&#13; an outgoing transition. Upon completion of the activity, any&#13; autotransition will be taken&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;* Please keep updating the method 'public Activity clone(State inState)' if you add new attributes to this class.&#13;@umplesource StateMachine.ump 89&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1908&#13;@umplesource DiagramMaster.ump 99&#13;"];

  // Class: Transition
  "Transition" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Transition    </td></tr><hr/><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean autoTransition&#13;">  autoTransition : Boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;Issue 519&#13;">  position : Position  </td></tr></table>>,
   tooltip="class Transition
* Specifies, within a state, what happens with a certain event (method call) occurs&#13; Normally the state machine will go to a new state after executing various actions and&#13; activities.&#13; The guard is a boolean condition that may prevent triggering the transition&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 135&#13;@umplesource StateMachine_Code.ump 742&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1494&#13;@umplesource DiagramMaster.ump 100&#13;"];

  // Class: Action
  "Action" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Action    </td></tr><hr/><tr><td align="left" href="" title="String actionType&#13;">  actionType : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String actionCode&#13;target language code&#13;">  actionCode : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr></table>>,
   tooltip="class Action
* A quickly-executed block of code that is run upon entry or exit from a state&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 157&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1871&#13;@umplesource DiagramMaster.ump 98&#13;"];

  // Class: Event
  "Event" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Event    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isTimer&#13;String args = null;&#13;">  isTimer : Boolean  </td></tr><tr><td align="left" href="" title="Boolean autoTransition&#13;">  autoTransition : Boolean  </td></tr><tr><td align="left" href="" title="String timerInSeconds&#13;TODO: how do you specify milliseconds etc.&#13;">  timerInSeconds : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;for code generation only e.g. ouside scope of nested state&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean unspecified&#13;">  unspecified : Boolean  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the method.&#13;">  type : String  </td></tr></table>>,
   tooltip="class Event
*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 197&#13;@umplesource StateMachine_Code.ump 841&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1834&#13;@umplesource DiagramMaster.ump 97&#13;"];

  // Class: ConstraintVariable
  "ConstraintVariable" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintVariable    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr></table>>,
   tooltip="class ConstraintVariable
* ConstraintVariables encapsulate that data of one element in a ConstraintTree, making up the nodes of that tree.&#13; For example: a&lt;3&#13;     has the structure:   ConstraintTree&#13;                          ConstraintOperator(&lt;)&#13;                            /            \&#13;                    ConstraintTree     ConstraintNumberLiteral(3)&#13;               ConstraintAttribute(a)&#13;     where all the \"Constraint\" classes inherit from ConstraintVariable&#13;@umplesource Umple.ump 400&#13;@umplesource Umple_CodeConstraint.ump 715&#13;"];
  "ConstraintVariable" -> "Iterable&lt;ConstraintVariable&gt;" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: ConstraintTree
  "ConstraintTree" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintTree    </td></tr><hr/><tr><td align="left" href="" title="ConstraintVariable root&#13;">  root : ConstraintVariable  </td></tr><tr><td align="left" href="" title="ConstraintOperator requestor&#13;">  requestor : ConstraintOperator  </td></tr><tr><td align="left" href="" title="TreeSet&lt;String&gt; names&#13;">  names : TreeSet&lt;String&gt;  </td></tr><tr><td align="left" href="" title="boolean shouldDisplayBrackets&#13;">  shouldDisplayBrackets : boolean  </td></tr><tr><td align="left" href="" title="boolean displayNegation&#13;">  displayNegation : boolean  </td></tr><tr><td align="left" href="" title="boolean displayBrackets&#13;">  displayBrackets : boolean  </td></tr><tr><td align="left" href="" title="int numberOfElements&#13;">  numberOfElements : int  </td></tr></table>>,
   tooltip="class ConstraintTree
* ConstraintTrees are a redundant class that are necessary because of lone constraints, i.e. [true] has to be handled, and does not contain an operator&#13;   * If lone constraints didn't exist then the ConstraintTree class could be condensed into ConstraintOperator. One nice religation of responsibilities is that ConstraintTrees take care of the ! and () symbols, leaving the ConstraintOperator class to be more pure&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource Umple.ump 406&#13;@umplesource Umple_CodeConstraint.ump 16&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1544&#13;"];
  "ConstraintTree" -> "ConstraintVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Guard
  "Guard" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Guard    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr></table>>,
   tooltip="class Guard
* A boolean condition that is checked when an event method is called&#13; If the result is true the transition may be taken&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 222&#13;@umplesource StateMachine_Code.ump 893&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1893&#13;@umplesource DiagramMaster.ump 101&#13;"];
  "Guard" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleElement
  "UmpleElement" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleElement    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple element.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple element.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="Boolean hasMainMethod&#13;">  hasMainMethod : Boolean  </td></tr><tr><td align="left" href="" title="String[] namespaces&#13;">  namespaces : String[]  </td></tr><tr><td align="left" href="" title="NameSpace nameSpace&#13;">  nameSpace : NameSpace  </td></tr><tr><td align="left" href="" title="String packageName&#13;">  packageName : String  </td></tr><tr><td align="left" href="" title="ExtraCode extraCode&#13;The code associated with the Umple element.&#13;">  extraCode : ExtraCode  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;Specifies whether or not the Umple element is internal.&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate coordinates&#13;Specifies the position of this Umple element (ex. The UmpleOnline diagram).&#13;">  coordinates : Coordinate  </td></tr><tr><td align="left" href="" title="String displayColor&#13;Specifies the display color of this element&#13;">  displayColor : String  </td></tr></table>>,
   tooltip="class UmpleElement
* An UmpleElement is one of the top-level items found in an Umple model&#13; Currently it has one subclass, UmpleClassifier&#13;&#13;@umplesource Umple.ump 146&#13;@umplesource Umple.ump 186&#13;@umplesource Umple_Code.ump 388&#13;@umplesource DiagramMaster.ump 79&#13;"];

  // Class: UmpleClassifier
  "UmpleClassifier" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClassifier    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="Boolean isDistributable&#13;Specifies whether or not the Umple class or implemented classes are distributable with RMI technology.&#13;">  isDistributable : Boolean  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="UmpleModel sourceModel&#13;">  sourceModel : UmpleModel  </td></tr></table>>,
   tooltip="class UmpleClassifier
* Represents an Umple classifier: a Class or Interface&#13;@umplesource Umple.ump 635&#13;@umplesource Umple_Code.ump 473&#13;@umplesource Umple_CodeMethod.ump 400&#13;@umplesource DiagramMaster.ump 78&#13;"];
  "UmpleClassifier" -> "UmpleElement" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleClass
  "UmpleClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClass    </td></tr><hr/><tr><td align="left" href="" title="Boolean hasProxyPattern&#13;">  hasProxyPattern : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsDefaultInterface&#13;">  needsDefaultInterface : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDistributed&#13;">  isDistributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternalSerializable&#13;">  isInternalSerializable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDefaultInterfaceRemoteRMI&#13;">  isDefaultInterfaceRemoteRMI : Boolean  </td></tr><tr><td align="left" href="" title="Integer level&#13;dependency handling attributes&#13;">  level : Integer  </td></tr><tr><td align="left" href="" title="Boolean isInitialized&#13;">  isInitialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple class is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the class&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple class is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr><tr><td align="left" href="" title="boolean isStatic&#13;">  isStatic : boolean  </td></tr><tr><td align="left" href="" title="String[] disableAutogeneratedMethodList&#13;disable methods from being auto-generated by Umple.&#13;">  disableAutogeneratedMethodList : String[]  </td></tr><tr><td align="left" href="" title="Integer propagateCounter&#13;Arbitary Limit&#13;">  propagateCounter : Integer  </td></tr><tr><td align="left" href="" title="PortBindingInformation[] portBindingInformation&#13;">  portBindingInformation : PortBindingInformation[]  </td></tr><tr><td align="left" href="" title="Boolean portClass&#13;">  portClass : Boolean  </td></tr><tr><td align="left" href="" title="TemplateMethod[] emitMethods&#13;">  emitMethods : TemplateMethod[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,TemplateAttributeParser&gt; templateEmitStringMap&#13;">  templateEmitStringMap : Map&lt;String,TemplateAttributeParser&gt;  </td></tr><tr><td align="left" href="" title="Boolean filteredin&#13;Specifies whether or not in the filter&#13;">  filteredin : Boolean  </td></tr></table>>,
   tooltip="class UmpleClass
* An UmpleClass can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns, such as 'singleton', meaning that there can only be one instance,&#13; and abstract, meaning it can't have any instances.&#13;* In Umple_Code.ump: Methods for computing complex properties&#13;Fragment source file: Umple_Code.ump&#13;Line : 1311&#13;Fragment source file: Umple_Code.ump&#13;Line : 1566&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;----------------------------------------------------------&#13;Handle the existing templates in the current umple model.&#13;class UmpleModel {&#13;  UmpleTemplate getUmpleTemplate(String name){&#13;    for (UmpleTemplate aTemplate : getUmpleTemplates())&#13;    {&#13;      if (aTemplate.getName().equals(name))&#13;      {&#13;        return aTemplate;&#13;      }&#13;    }&#13;    return null;&#13;  }&#13;  &#13;   public UmpleTemplate addUmpleTemplate(String name)&#13;  {&#13;    UmpleTemplate newTemplate = getUmpleTemplate(name);&#13;    if (newTemplate == null)&#13;    {&#13;      newTemplate = new UmpleTemplate(name, this);&#13;      addUmpleTemplate(newTemplate);&#13;    }&#13;    return newTemplate;&#13;  }&#13;}&#13;----------------------------------------------------------&#13;An umple template contains a map for emittable strings&#13;@umplesource StateMachine.ump 367&#13;@umplesource Umple.ump 689&#13;@umplesource Umple.ump 788&#13;@umplesource Umple_CodeClass.ump 104&#13;@umplesource Umple_CodeClass.ump 119&#13;@umplesource Umple_CodeClass.ump 162&#13;@umplesource Umple_Code_StateMachine.ump 42&#13;@umplesource Umple_Code_StateMachine.ump 57&#13;@umplesource Umple_Code_Trait.ump 387&#13;@umplesource Test_Code.ump 18&#13;@umplesource Trace.ump 23&#13;@umplesource Structure.ump 18&#13;@umplesource Template.ump 45&#13;@umplesource UmpleFilterModel.ump 27&#13;@umplesource DiagramMaster.ump 81&#13;"];
  "UmpleClass" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: Token
  "Token" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Token    </td></tr></table>>,
   tooltip="class Token
@umplesource Umple.ump 16&#13;@umplesource DiagramMaster.ump 67&#13;"];

  // Class: UmpleModel
  "UmpleModel" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleModel    </td></tr><hr/><tr><td align="left" href="" title="UmpleFile umpleFile&#13;The Umple file (.ump) that was used to populate the model.&#13;">  umpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Boolean distributeOn&#13;Variables used for distributed code control&#13;">  distributeOn : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributeForced&#13;">  distributeForced : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributed&#13;">  distributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipcompile&#13;Variables used to advise not to bother trying to compile various language&#13;because the code doesn't contain coherent or complete code.&#13;These are set to true when various @@@skip directives are found in comments&#13;">  skipcompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipjavacompile&#13;">  skipjavacompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skippythoncompile&#13;">  skippythoncompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipcppcompile&#13;">  skipcppcompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skiprubycompile&#13;">  skiprubycompile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean skipphpcompile&#13;">  skipphpcompile : Boolean  </td></tr><tr><td align="left" href="" title="Integer distributePattern&#13;">  distributePattern : Integer  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="String defaultPackage&#13;">  defaultPackage : String  </td></tr><tr><td align="left" href="" title="GenerateTarget[] generates&#13;">  generates : GenerateTarget[]  </td></tr><tr><td align="left" href="" title="Boolean shouldGenerate&#13;">  shouldGenerate : Boolean  </td></tr><tr><td align="left" href="" title="Glossary glossary&#13;">  glossary : Glossary  </td></tr><tr><td align="left" href="" title="String defaultNamespace&#13;">  defaultNamespace : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr><tr><td align="left" href="" title="UmpleClass mainClass&#13;">  mainClass : UmpleClass  </td></tr><tr><td align="left" href="" title="Boolean debugMode&#13;">  debugMode : Boolean  </td></tr><tr><td align="left" href="" title="ParseResult lastResult&#13;">  lastResult : ParseResult  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; generatedCode&#13;">  generatedCode : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Analyzer&gt; analyzers&#13;">  analyzers : Map&lt;String,Analyzer&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Requirement&gt; allRequirements&#13;The core list of all requirement in this Model s found while parsing&#13;">  allRequirements : Map&lt;String,Requirement&gt;  </td></tr><tr><td align="left" href="" title="Coordinate levelOffset&#13;data for default class positioning&#13;">  levelOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate initialOffset&#13;">  initialOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate classSize&#13;">  classSize : Coordinate  </td></tr><tr><td align="left" href="" title="int maxYLevels&#13;">  maxYLevels : int  </td></tr><tr><td align="left" href="" title="CodeBlock[] extraCodes&#13;Top level blocks code contained within a model.&#13;extraCodes will be generated in a single file&#13;">  extraCodes : CodeBlock[]  </td></tr><tr><td align="left" href="" title="Coordinate offsetFromEdge&#13;data for default association positioning&#13;">  offsetFromEdge : Coordinate  </td></tr><tr><td align="left" href="" title="int reflexiveSegmentLength&#13;">  reflexiveSegmentLength : int  </td></tr><tr><td align="left" href="" title="List&lt;File&gt; linkedFiles&#13;">  linkedFiles : List&lt;File&gt;  </td></tr><tr><td align="left" href="" title="Boolean generateConsole&#13;Whether tracer output should be generated if needed&#13;These are set to false when tracer classes are created by generators&#13;">  generateConsole : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateFile&#13;">  generateFile : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateString&#13;">  generateString : Boolean  </td></tr><tr><td align="left" href="" title="Boolean generateLog4j&#13;">  generateLog4j : Boolean  </td></tr><tr><td align="left" href="" title="String[] availableSuboptions&#13;Suboptions that might be added by the suboption command;&#13;">  availableSuboptions : String[]  </td></tr><tr><td align="left" href="" title="Double parsingTime&#13;ParsingTime represents Parsing end time&#13;gTime1 represents code generation start time&#13;gTime2 represents code generation end time&#13;">  parsingTime : Double  </td></tr><tr><td align="left" href="" title="Double gTime1&#13;">  gTime1 : Double  </td></tr><tr><td align="left" href="" title="Double gTime2&#13;">  gTime2 : Double  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; hashMap&#13;">  hashMap : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="String traceType&#13;">  traceType : String  </td></tr><tr><td align="left" href="" title="TracerDirective tracer&#13;">  tracer : TracerDirective  </td></tr></table>>,
   tooltip="class UmpleModel
* Class UmpleModel is the central class describing the system being compiled.&#13;&#13; The model contains everything that was derived from an Umple file (.ump) when it was parsed such as&#13; the classes, attributes, associations, state machines, methods, etc that were in it.&#13;&#13; Put another way, when an Umple file (.ump) is parsed an Umple model is populated with everything that was parsed from that file.&#13;&#13; Because of this it is absolutely critical to understand the model since it is basically the \"root\" of everything.&#13;The Umple Traits contained within the model.&#13;The State Machines contained within the model.&#13;*&#13; In Umple_Code.ump: Methods for manipulating the Model&#13;Fragment source file: Umple_Code.ump&#13;Line : 360&#13;Fragment source file: Umple_Code.ump&#13;Line : 212&#13;Fragment source file: Umple_Code.ump&#13;Line : 562&#13;Fragment source file: Umple_Code.ump&#13;Line : 571&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;&#13;Mixset meta-model&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;&#13;Feature diagram meta-model&#13;A FeatureDiagram stores information required to build a feature diagram in Umple&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Yellow for Classifiers, classes etc.&#13;@umplesource Umple.ump 29&#13;@umplesource Umple.ump 114&#13;@umplesource Umple.ump 123&#13;@umplesource UmpleVersion.ump 13&#13;@umplesource Umple_Code.ump 22&#13;@umplesource Umple_CodeClass.ump 3&#13;@umplesource Umple_CodeClass.ump 46&#13;@umplesource Umple_CodeClass.ump 72&#13;@umplesource Umple_CodeCoordinate.ump 103&#13;@umplesource Umple_Code_StateMachine.ump 3&#13;@umplesource Umple_Code_Filter.ump 4&#13;@umplesource Umple_Code_Filter.ump 265&#13;@umplesource Umple_Code_Filter.ump 267&#13;@umplesource Umple_Code_Trait.ump 6&#13;@umplesource Mixset.ump 12&#13;@umplesource FeatureModel.ump 14&#13;@umplesource Trace.ump 17&#13;@umplesource UmpleInternalParser_CodeTrait.ump 7&#13;@umplesource UmpleFilterModel.ump 21&#13;@umplesource UmpleInternalParser_CodeMixset.ump 19&#13;@umplesource DiagramMaster.ump 76&#13;"];
  "UmpleModel" -> "Runnable" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Method
  "Method" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Method    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Method is abstract.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isConstructor&#13;Specifies whether this is a constructor for the Umple class.&#13;">  isConstructor : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isQueued&#13;Specifies whether or not the method is queued.&#13;">  isQueued : Boolean  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the method.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;The name of the method.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] exceptions&#13;Throws exceptions&#13;">  exceptions : String[]  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the method.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Boolean isImplemented&#13;Specifies whether or not the method is implemented.&#13;">  isImplemented : Boolean  </td></tr><tr><td align="left" href="" title="Boolean wasGenerated&#13;Specifies, for fAutoAPI methods, if the method was generated&#13;">  wasGenerated : Boolean  </td></tr></table>>,
   tooltip="class Method
* A method in an Umple class or interface&#13; Umple Methods are coded by the programmer in the language(s) of their choice&#13;*&#13;* This is for cloning&#13;* Note: This code doesn't cover deep cloning. It's a combination of  shallow and deep cloning&#13;Grey for methods and code injections&#13;@umplesource Umple.ump 195&#13;@umplesource Umple_CodeMethod.ump 7&#13;@umplesource Umple_CodeMethod.ump 56&#13;@umplesource Trace_Code.ump 281&#13;@umplesource DiagramMaster.ump 123&#13;"];

  // Class: MethodBody
  "MethodBody" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MethodBody    </td></tr><hr/><tr><td align="left" href="" title="String extraCode&#13;The code within the method body.&#13;">  extraCode : String  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Map&lt;String,Position&gt; implementationPositions&#13;">  implementationPositions : Map&lt;String,Position&gt;  </td></tr></table>>,
   tooltip="class MethodBody
* The contents of a method, such as the code within it.&#13;&#13;@umplesource Umple.ump 255&#13;@umplesource Umple_CodeMethod.ump 184&#13;@umplesource Mixset.ump 96&#13;@umplesource UmpleInternalParser_CodeMixset.ump 676&#13;@umplesource UmpleInternalParser_CodeMixset.ump 787&#13;@umplesource DiagramMaster.ump 124&#13;"];

  // Class: UmpleAssertion
  "UmpleAssertion" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleAssertion    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String level&#13;">  level : String  </td></tr><tr><td align="left" href="" title="String action&#13;">  action : String  </td></tr><tr><td align="left" href="" title="String assertCode&#13;">  assertCode : String  </td></tr><tr><td align="left" href="" title="int locOrder&#13;">  locOrder : int  </td></tr><tr><td align="left" href="" title="boolean isTimed&#13;">  isTimed : boolean  </td></tr></table>>,
   tooltip="class UmpleAssertion
* The assertion within the method or class.&#13;@umplesource Umple.ump 276&#13;"];

  // Class: UmpleTestCase
  "UmpleTestCase" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTestCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="int locOrder&#13;">  locOrder : int  </td></tr><tr><td align="left" href="" title="boolean isTimed&#13;">  isTimed : boolean  </td></tr><tr><td align="left" href="" title="boolean isOverride&#13;">  isOverride : boolean  </td></tr><tr><td align="left" href="" title="boolean isConcrete&#13;">  isConcrete : boolean  </td></tr><tr><td align="left" href="" title="String concreteLang&#13;">  concreteLang : String  </td></tr><tr><td align="left" href="" title="Map&lt;Integer,String&gt; bodyCode&#13;">  bodyCode : Map&lt;Integer,String&gt;  </td></tr></table>>,
   tooltip="class UmpleTestCase
* Test Case  at the  Class level .&#13;@umplesource Umple.ump 290&#13;"];

  // Class: TestAction
  "TestAction" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestAction    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String actionCode&#13;">  actionCode : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="int locOrder&#13;">  locOrder : int  </td></tr></table>>,
   tooltip="class TestAction
test action statements&#13;@umplesource Umple.ump 306&#13;"];

  // Class: TestParameter
  "TestParameter" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestParameter    </td></tr><hr/><tr><td align="left" href="" title="String value&#13;">  value : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class TestParameter
@umplesource Umple.ump 315&#13;"];

  // Class: TestSequence
  "TestSequence" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestSequence    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] tests&#13;">  tests : String[]  </td></tr></table>>,
   tooltip="class TestSequence
@umplesource Umple.ump 322&#13;"];

  // Class: TestInit
  "TestInit" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TestInit    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="String objectName&#13;">  objectName : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr></table>>,
   tooltip="class TestInit
initialization statements in test that holds&#13;identifier objectname (parameters);&#13;@umplesource Umple.ump 331&#13;"];

  // Class: Constant
  "Constant" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Constant    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the constant.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the constant.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier of the constant.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String value&#13;The value of the constant.&#13;">  value : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;Issue 322 - by default set internal to false&#13;">  isInternal : Boolean  </td></tr></table>>,
   tooltip="class Constant
* Represents a constant.&#13;@umplesource Umple.ump 345&#13;@umplesource DiagramMaster.ump 92&#13;"];

  // Class: UmpleVariable
  "UmpleVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleVariable    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple variable.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the Umple variable.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple variable.&#13;potential enum, 'settable'&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String value&#13;The value of the Umple variable.&#13;">  value : String  </td></tr></table>>,
   tooltip="class UmpleVariable
* Superclass for tracking member variables in all target languages&#13; TODO: Code smell because we have both an association variable and also an association&#13; This class should go and instead AssociationEnd should be the member variable&#13;&#13;@umplesource Umple.ump 978&#13;@umplesource Umple_Code.ump 590&#13;@umplesource Trace.ump 29&#13;@umplesource Trace_Code.ump 16&#13;@umplesource DiagramMaster.ump 88&#13;"];

  // Class: MethodParameter
  "MethodParameter" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MethodParameter    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAutounique&#13;Specifies whether or not the method parameter is auto unique.&#13;TODO: should default to false, but constructors would need updating&#13;">  isAutounique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isList&#13;Specifies whether or not the method parameter is a list.&#13;">  isList : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDerived&#13;Specifies whether or not the method parameter is derived.&#13;">  isDerived : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isLazy&#13;Specifies whether or not the method parameter is lazy.&#13;">  isLazy : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isIvar&#13;Specifies whether or not the method parameter is ivar.&#13;">  isIvar : Boolean  </td></tr></table>>,
   tooltip="class MethodParameter
* Represents a parameter in a method and its various forms.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource Umple.ump 370&#13;@umplesource Umple_CodeMethod.ump 204&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1854&#13;@umplesource DiagramMaster.ump 90&#13;"];
  "MethodParameter" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: TraceConstraint
  "TraceConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    TraceConstraint    </td></tr></table>>,
   tooltip="class TraceConstraint
* TraceConstraint objects ensure that the attribute being traced will be treated as a parameter and not a member variable&#13;@umplesource Umple.ump 427&#13;@umplesource Umple_CodeConstraint.ump 291&#13;"];
  "TraceConstraint" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: Precondition
  "Precondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Precondition    </td></tr></table>>,
   tooltip="class Precondition
* The Preconditions are constraints on methods, restricting the method so that it does not process if the constraint is not satisfied.&#13;@umplesource Umple.ump 434&#13;@umplesource Umple_CodeConstraint.ump 325&#13;"];
  "Precondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: Postcondition
  "Postcondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Postcondition    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class Postcondition
* The Preconditions are constraints on methods, throughing an exception if the constraint is not sastisfied after the method has computed.&#13;@umplesource Umple.ump 441&#13;@umplesource Umple_CodeConstraint.ump 355&#13;"];
  "Postcondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: CodeInjection
  "CodeInjection" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeInjection    </td></tr><hr/><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String operation&#13;">  operation : String  </td></tr><tr><td align="left" href="" title="String operationSource&#13;">  operationSource : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="CodeBlock snippet&#13;">  snippet : CodeBlock  </td></tr><tr><td align="left" href="" title="String constraintParameterName&#13;">  constraintParameterName : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="String injectionlabel&#13;">  injectionlabel : String  </td></tr><tr><td align="left" href="" title="boolean codeBlockProcessed&#13;">  codeBlockProcessed : boolean  </td></tr></table>>,
   tooltip="class CodeInjection
* A block of code that can be injected into one or more methods, constructor, etc.&#13;@umplesource Umple.ump 585&#13;@umplesource Umple_CodeMethod.ump 339&#13;@umplesource UmpleInternalParser_CodeMixset.ump 639&#13;@umplesource DiagramMaster.ump 125&#13;"];

  // Class: UmpleEnumeration
  "UmpleEnumeration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleEnumeration    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] enumValues&#13;">  enumValues : String[]  </td></tr></table>>,
   tooltip="class UmpleEnumeration
* Represents an enumeration&#13;@umplesource Umple.ump 622&#13;@umplesource UmpleEnumeration_Code.ump 1&#13;"];

  // Class: UmpleInterface
  "UmpleInterface" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleInterface    </td></tr></table>>,
   tooltip="class UmpleInterface
* Represents a interface.&#13; Like a class, but can't have any concrete methods, attributes or associations.&#13;@umplesource Umple.ump 662&#13;@umplesource DiagramMaster.ump 77&#13;"];
  "UmpleInterface" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleTrait
  "UmpleTrait" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTrait    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple trait is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the Trait&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple trait is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr></table>>,
   tooltip="class UmpleTrait
* An UmpleTrait can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns.&#13;--- before addDepend { if (depends.contains(aDepend)) { return false; } }&#13;--- before setImmutable { if (!canBeImmutable()) { return false; } }&#13;--- before addAssociationVariable { if (!immutabilityAssociationRulesSatisfied(aAssociationVariable, this.isImmutable())) { return false; } }&#13;--- before setExtendsTrait { if (!enforceImmutabilityInheritanceRules(aExtendsClass)) { return false; } }&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 803&#13;@umplesource Umple.ump 875&#13;@umplesource Umple_Code_Trait.ump 38&#13;@umplesource Umple_Code_Trait.ump 80&#13;@umplesource Umple_Code_Trait.ump 127&#13;@umplesource Umple_Code_Trait.ump 295&#13;"];
  "UmpleTrait" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: GeneralTemplateParameter
  "GeneralTemplateParameter" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GeneralTemplateParameter    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String[] interfacesAndClass&#13;">  interfacesAndClass : String[]  </td></tr><tr><td align="left" href="" title="String defaultValue&#13;">  defaultValue : String  </td></tr></table>>,
   tooltip="class GeneralTemplateParameter
This class is used to specify parameters for traits.&#13;TODO : when can also apply this to support formal template concepts for classes.&#13;@umplesource Umple.ump 883&#13;"];

  // Class: GeneralTPApplied
  "GeneralTPApplied" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GeneralTPApplied    </td></tr><hr/><tr><td align="left" href="" title="String inheritanceName&#13;">  inheritanceName : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; parameterMapping&#13;">  parameterMapping : Map&lt;String,String&gt;  </td></tr></table>>,
   tooltip="class GeneralTPApplied
This class is used to assign parameters in classes and traits.&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;@umplesource Umple.ump 892&#13;@umplesource Umple.ump 900&#13;@umplesource Umple_Code_Trait.ump 451&#13;@umplesource Umple_Code_Trait.ump 499&#13;@umplesource Umple_Code_Trait.ump 628&#13;"];

  // Class: MethodTemplateSignature
  "MethodTemplateSignature" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MethodTemplateSignature    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String alias&#13;">  alias : String  </td></tr></table>>,
   tooltip="class MethodTemplateSignature
@umplesource Umple.ump 905&#13;@umplesource Umple_Code_Trait.ump 640&#13;"];

  // Class: StateMachineTemplateSignature
  "StateMachineTemplateSignature" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachineTemplateSignature    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String srcStateMachine&#13;">  srcStateMachine : String  </td></tr><tr><td align="left" href="" title="String desStateMachine&#13;">  desStateMachine : String  </td></tr><tr><td align="left" href="" title="String[] srcStates&#13;">  srcStates : String[]  </td></tr><tr><td align="left" href="" title="String[] desStates&#13;">  desStates : String[]  </td></tr><tr><td align="left" href="" title="String alias&#13;">  alias : String  </td></tr></table>>,
   tooltip="class StateMachineTemplateSignature
@umplesource Umple.ump 912&#13;"];

  // Class: StateMachineModifier
  "StateMachineModifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachineModifier    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String srcStateMachine&#13;">  srcStateMachine : String  </td></tr><tr><td align="left" href="" title="String alias&#13;">  alias : String  </td></tr></table>>,
   tooltip="class StateMachineModifier
@umplesource Umple.ump 923&#13;"];

  // Class: StateModifier
  "StateModifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateModifier    </td></tr><hr/><tr><td align="left" href="" title="String[] srcStates&#13;">  srcStates : String[]  </td></tr></table>>,
   tooltip="class StateModifier
This is used to remove and rename a state.&#13;@umplesource Umple.ump 930&#13;"];
  "StateModifier" -> "StateMachineModifier" [arrowhead="empty"; samehead="gen"];


  // Class: EventModifier
  "EventModifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    EventModifier    </td></tr></table>>,
   tooltip="class EventModifier
This is used to remove an event or a transition.&#13;@umplesource Umple.ump 936&#13;"];
  "EventModifier" -> "StateModifier" [arrowhead="empty"; samehead="gen"];


  // Class: Depend
  "Depend" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Depend    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr></table>>,
   tooltip="class Depend
* A depend relationship indicates a package on which this class depends&#13;&#13;@umplesource Umple.ump 952&#13;@umplesource Umple_Code.ump 371&#13;"];

  // Class: AssociationClass
  "AssociationClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    AssociationClass    </td></tr></table>>,
   tooltip="class AssociationClass
* A combination of Class and Association (as defined in UML)&#13; An AssociationClass is a full-fledged class, but at the same time&#13; It associates two other classes that would otherwise have a many-many&#13; relationship. Instances of the AssociationClass represent data&#13; held by the links between those two classes.&#13;&#13;@umplesource Umple.ump 967&#13;@umplesource Umple_CodeClass.ump 74&#13;@umplesource DiagramMaster.ump 80&#13;"];
  "AssociationClass" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: UniqueIdentifier
  "UniqueIdentifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UniqueIdentifier    </td></tr></table>>,
   tooltip="class UniqueIdentifier
@umplesource Umple.ump 1000&#13;"];
  "UniqueIdentifier" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Attribute
  "Attribute" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Attribute    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAutounique&#13;Specifies whether or not the method parameter is auto unique.&#13;TODO: should default to false, but constructors would need updating&#13;">  isAutounique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isUnique&#13;Specifies whether or not the attribute is unique.&#13;">  isUnique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isList&#13;Specifies whether or not the method parameter is a list.&#13;">  isList : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDerived&#13;Specifies whether or not the method parameter is derived.&#13;">  isDerived : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternalTransient&#13;Specifies whether or not the method parameter is internalTransient.&#13;">  isInternalTransient : Boolean  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Boolean isLazy&#13;Specifies whether or not the method parameter is lazy.&#13;">  isLazy : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRefinement&#13;">  isRefinement : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isIvar&#13;Specifies whether or not the method parameter is ivar.&#13;">  isIvar : Boolean  </td></tr></table>>,
   tooltip="class Attribute
* Represents an attribute.&#13; An attribute is more abstract than an instance variable / property in that&#13; it can be derived, and have various other modifiers such as being&#13; initialized, lazy (does not appear in constructor and must be initialized&#13; after construction), etc.&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 1010&#13;@umplesource Umple.ump 1038&#13;@umplesource Umple_CodeAttribute.ump 3&#13;@umplesource Umple_Code_Trait.ump 357&#13;@umplesource DiagramMaster.ump 91&#13;"];
  "Attribute" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Association
  "Association" [ style=filled, fillcolor="#AAFFAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Association    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the association.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isLeftNavigable&#13;">  isLeftNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightNavigable&#13;">  isRightNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isLeftComposition&#13;">  isLeftComposition : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightComposition&#13;">  isRightComposition : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate[] positions&#13;">  positions : Coordinate[]  </td></tr><tr><td align="left" href="" title="Position tokenPosition&#13;">  tokenPosition : Position  </td></tr><tr><td align="left" href="" title="Position tokenEndPosition&#13;">  tokenEndPosition : Position  </td></tr><tr><td align="left" href="" title="Boolean immutable&#13;">  immutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean named&#13;">  named : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;name of the class this association shares with its parent&#13;">  commonClassName : String  </td></tr></table>>,
   tooltip="class Association
* Represents an association, typically between two Umple classes (1-1, 1-*, *-1, etc).&#13; An association in UML/Umple represents a relationship that exists at run time&#13; where instances of one class reference the other, and (if bidirectional) instance&#13; of the other class reference the first cass.&#13; The number of references is governed by the Multiplicity at each AssociationEnd&#13;Green for things to do with associations and attributes&#13;@umplesource Umple.ump 1074&#13;@umplesource Umple_CodeAssociation.ump 8&#13;@umplesource DiagramMaster.ump 84&#13;"];

  // Class: AssociationEnd
  "AssociationEnd" [ style=filled, fillcolor="#AAFFAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssociationEnd    </td></tr><hr/><tr><td align="left" href="" title="String roleName&#13;">  roleName : String  </td></tr><tr><td align="left" href="" title="String className&#13;">  className : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;potential enum 'internal'&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String referenceToClassName&#13;">  referenceToClassName : String  </td></tr><tr><td align="left" href="" title="Multiplicity multiplicity&#13;">  multiplicity : Multiplicity  </td></tr><tr><td align="left" href="" title="Boolean isDefaultRoleName&#13;">  isDefaultRoleName : Boolean  </td></tr><tr><td align="left" href="" title="String priority&#13;">  priority : String  </td></tr><tr><td align="left" href="" title="String superClassName&#13;relevant to specializations&#13;">  superClassName : String  </td></tr><tr><td align="left" href="" title="Boolean needsCommonCode&#13;">  needsCommonCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsSuperCode&#13;">  needsSuperCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToOne&#13;">  mulChangedToOne : Boolean  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToN&#13;">  mulChangedToN : Boolean  </td></tr><tr><td align="left" href="" title="Boolean reqSetCode&#13;">  reqSetCode : Boolean  </td></tr></table>>,
   tooltip="class AssociationEnd
* An association end represents one logical end of an association&#13;&#13; See also AssociationVariable&#13; TODO: Code smell referenceToClassName is a duplication, can access via the association&#13; Create a derived attribute otherend (the other AssociationEnd)&#13;* In Umple_Code.ump: Methods for computing compound properties&#13;@umplesource Umple.ump 1117&#13;@umplesource Umple_CodeAssociation.ump 160&#13;@umplesource DiagramMaster.ump 85&#13;"];

  // Class: AssociationVariable
  "AssociationVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssociationVariable    </td></tr><hr/><tr><td align="left" href="" title="Multiplicity multiplicity&#13;">  multiplicity : Multiplicity  </td></tr><tr><td align="left" href="" title="Boolean isNavigable&#13;">  isNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isComposition&#13;">  isComposition : Boolean  </td></tr><tr><td align="left" href="" title="String priority&#13;">  priority : String  </td></tr><tr><td align="left" href="" title="AssociationVariable specializedFromVariable&#13;specialized from this association variable&#13;">  specializedFromVariable : AssociationVariable  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;code relevant to specialization of associations&#13;is it ever specialized?&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;is it a specialization of another?&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;">  commonClassName : String  </td></tr><tr><td align="left" href="" title="String superClassName&#13;">  superClassName : String  </td></tr><tr><td align="left" href="" title="int relevantEnd&#13;0 to ensure that everything doesn't break&#13;">  relevantEnd : int  </td></tr><tr><td align="left" href="" title="Boolean needsSuperCode&#13;">  needsSuperCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsCommonCode&#13;">  needsCommonCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToOne&#13;">  mulChangedToOne : Boolean  </td></tr><tr><td align="left" href="" title="String scName&#13;">  scName : String  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToN&#13;">  mulChangedToN : Boolean  </td></tr><tr><td align="left" href="" title="Boolean reqSetCode&#13;">  reqSetCode : Boolean  </td></tr></table>>,
   tooltip="class AssociationVariable
* An association variable represents one of the variables used to represent&#13; an association. In a two-directional association (navigable) there would&#13; be one of these in each associated class.&#13;&#13; See also AssociationEnd&#13;&#13; TODO: Code smell. Should be replaced by the 'otherEnd' of the AssociationEnd&#13;* In Umple_Code.ump: Methods for testing various complex properties&#13;@umplesource Umple.ump 1153&#13;@umplesource Umple_CodeAssociation.ump 305&#13;@umplesource Trace_Code.ump 237&#13;@umplesource DiagramMaster.ump 89&#13;"];
  "AssociationVariable" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: GeneratedElement
  "GeneratedElement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedElement    </td></tr></table>>,
   tooltip="class GeneratedElement
TODO: Code smell: This duplicates the structure of the class from UmpleClass&#13;This is a problem for model-to-model transformations&#13;Should be abolished&#13;&#13;@umplesource Umple.ump 1213&#13;@umplesource Umple_Code.ump 632&#13;"];

  // Class: GeneratedClass
  "GeneratedClass" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedClass    </td></tr></table>>,
   tooltip="class GeneratedClass
* Represents a class that is generated from an Umple class, such as a Java or Cpp class.&#13;@umplesource Umple.ump 1221&#13;"];
  "GeneratedClass" -> "GeneratedElement" [arrowhead="empty"; samehead="gen"];


  // Class: Comment
  "Comment" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Comment    </td></tr><hr/><tr><td align="left" href="" title="String text&#13;The text associated with the comment.&#13;">  text : String  </td></tr><tr><td align="left" href="" title="Boolean annotation&#13;">  annotation : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInline&#13;">  isInline : Boolean  </td></tr></table>>,
   tooltip="class Comment
* Represents a comment, such as those found around classes, methods, attributes and associations.&#13;&#13;@umplesource Umple.ump 1279&#13;@umplesource Umple_Code.ump 729&#13;"];

  // Class: Requirement
  "Requirement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Requirement    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;A unique identifier for this requirement&#13;Alphanumeric, with -, . and _ allowed&#13;TODO: add an Umple 'key' statement for this.&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="String statement&#13;The content of the requirement, expressed in the language&#13;">  statement : String  </td></tr><tr><td align="left" href="" title="String language&#13;The requirements language used to express this requirement&#13;can be blank, then 'text' is assumed&#13;Other languages can be added e.g. GRL = Goal Requirement Language&#13;">  language : String  </td></tr></table>>,
   tooltip="class Requirement
* Represents a requirement, such as those found around&#13; classes, methods, attributes, associations, stateMachines, states, etc.&#13; If multiple occurrences of a requirement are found, their statements are concatenated&#13; and a single instance is created.&#13; If the language of two occurrences differs (and neither is blank) the the latter occurrences&#13; is ignored with warning 401&#13; All instances of this class are tracked in the instance of Model&#13; with the map allRequirements, whose key is the identifier&#13;&#13;@umplesource Umple.ump 1299&#13;@umplesource Umple_Code.ump 925&#13;"];

  // Class: ReqImplementation
  "ReqImplementation" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ReqImplementation    </td></tr><hr/><tr><td align="left" href="" title="String identifier&#13;unique identifier that should match the identifier of a Requirement&#13;">  identifier : String  </td></tr><tr><td align="left" href="" title="String implementingFeature&#13;the class, attribute, state machine, state, association, mixset etc. that the&#13;implementation corresponds to, e.g. 'class Person'&#13;">  implementingFeature : String  </td></tr></table>>,
   tooltip="class ReqImplementation
* Represents an implementation of a requirement&#13; Stored to allow for analysis of matching requirement&#13; and reporting on what features implement what requirement&#13; all instances of this class are tracked in the instance of the model&#13; with the association allReqImplementations&#13; Note that there can be multiple instances of this class for each identifier&#13; because, for example, multiple methods may be needed to implement a given requirement&#13;@umplesource Umple.ump 1331&#13;"];

  // Class: UmpleTemplate
  "UmpleTemplate" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleTemplate    </td></tr></table>>,
   tooltip="class UmpleTemplate
@umplesource Umple.ump 1353&#13;"];
  "UmpleTemplate" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: NameSpace
  "NameSpace" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    NameSpace    </td></tr><hr/><tr><td align="left" href="" title="String value&#13;">  value : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Integer timesUsed&#13;">  timesUsed : Integer  </td></tr></table>>,
   tooltip="class NameSpace
added for issue 1315 warning 31&#13;@umplesource Umple.ump 1380&#13;"];

  // Class: Port
  "Port" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Port    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="boolean conjugated&#13;">  conjugated : boolean  </td></tr><tr><td align="left" href="" title="int multiplicity&#13;">  multiplicity : int  </td></tr><tr><td align="left" href="" title="boolean replicated&#13;">  replicated : boolean  </td></tr><tr><td align="left" href="" title="String signalType&#13;">  signalType : String  </td></tr></table>>,
   tooltip="class Port
component&#13;@umplesource Umple.ump 1405&#13;@umplesource Structure.ump 45&#13;"];

  // Class: Condition
  "Condition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Condition    </td></tr><hr/><tr><td align="left" href="" title="String condition&#13;">  condition : String  </td></tr><tr><td align="left" href="" title="Object element&#13;">  element : Object  </td></tr><tr><td align="left" href="" title="ConstraintTree constraint&#13;">  constraint : ConstraintTree  </td></tr><tr><td align="left" href="" title="Boolean conditionallyWhere&#13;">  conditionallyWhere : Boolean  </td></tr><tr><td align="left" href="" title="String conditionType&#13;">  conditionType : String  </td></tr></table>>,
   tooltip="class Condition
Used to associated condition patern for an umple elemnt. Designed to be generic so, this elemnt&#13; can be of different types&#13;@umplesource Umple_CodeConstraint.ump 11&#13;@umplesource Trace.ump 122&#13;"];

  // Class: ModelConstraint
  "ModelConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ModelConstraint    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String source&#13;">  source : String  </td></tr><tr><td align="left" href="" title="String target&#13;">  target : String  </td></tr><tr><td align="left" href="" title="String linkNext&#13;">  linkNext : String  </td></tr><tr><td align="left" href="" title="String link&#13;">  link : String  </td></tr><tr><td align="left" href="" title="ModelConstraint mostRecent&#13;">  mostRecent : ModelConstraint  </td></tr></table>>,
   tooltip="class ModelConstraint
@umplesource Umple_CodeConstraint.ump 803&#13;@umplesource Umple_CodeConstraint.ump 823&#13;"];

  // Class: Filter
  "Filter" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Filter    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Integer superCount&#13;">  superCount : Integer  </td></tr><tr><td align="left" href="" title="Integer subCount&#13;">  subCount : Integer  </td></tr><tr><td align="left" href="" title="Integer associationCount&#13;">  associationCount : Integer  </td></tr><tr><td align="left" href="" title="String[] values&#13;">  values : String[]  </td></tr><tr><td align="left" href="" title="String[] filterValues&#13;">  filterValues : String[]  </td></tr></table>>,
   tooltip="class Filter
Fragment source file: Umple_Code.ump&#13;Line : 4932&#13;* A Diagram represents a subset of the available model and is used&#13; to help isolate certain aspects of the system.&#13; It will be used by the code generation process to \"strip\" the model&#13; piror to generation so that all generators will support Diagrams&#13;&#13; Right now, no implementation, just setting up the model&#13;@umplesource Umple_Code_Filter.ump 150&#13;@umplesource Umple_Code_Filter.ump 160&#13;@umplesource UmpleFilterModel.ump 9&#13;@umplesource UmpleFilterModel.ump 15&#13;"];

  // Class: MixsetOrFile
  "MixsetOrFile" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MixsetOrFile    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="UmpleFile useUmpleFile&#13;File where the use statement was encountered&#13;">  useUmpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Integer useUmpleLine&#13;">  useUmpleLine : Integer  </td></tr><tr><td align="left" href="" title="Boolean isMixset&#13;">  isMixset : Boolean  </td></tr></table>>,
   tooltip="class MixsetOrFile
A MixsetOrFile is an umple entity that is subject to require logic&#13;@umplesource Mixset.ump 18&#13;"];

  // Class: MixsetInMethod
  "MixsetInMethod" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MixsetInMethod    </td></tr><hr/><tr><td align="left" href="" title="String mixsetName&#13;">  mixsetName : String  </td></tr><tr><td align="left" href="" title="int startPositionIndex&#13;relative to the original body of the method&#13;">  startPositionIndex : int  </td></tr><tr><td align="left" href="" title="int endPositionIndex&#13;">  endPositionIndex : int  </td></tr><tr><td align="left" href="" title="MixsetInMethod parentInnerMixset&#13;to determine if its inner mixset&#13;">  parentInnerMixset : MixsetInMethod  </td></tr><tr><td align="left" href="" title="MixsetInMethod[] childMixsets&#13;">  childMixsets : MixsetInMethod[]  </td></tr><tr><td align="left" href="" title="String mixsetFragment&#13;">  mixsetFragment : String  </td></tr></table>>,
   tooltip="class MixsetInMethod
This class keeps references to mixsets which are iside methods&#13;@umplesource Mixset.ump 102&#13;"];

  // Class: FeatureModel
  "FeatureModel" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    FeatureModel    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class FeatureModel
@umplesource FeatureModel.ump 18&#13;@umplesource UmpleInternalParser_CodeRequireStatement.ump 407&#13;"];

  // Class: FeatureNode
  "FeatureNode" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    FeatureNode    </td></tr><hr/><tr><td align="left" href="" title="int id&#13;each new FeatureNode has a unique id&#13;">  id : int  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="boolean isLeaf&#13;">  isLeaf : boolean  </td></tr><tr><td align="left" href="" title="boolean isCompoundFeature&#13;">  isCompoundFeature : boolean  </td></tr></table>>,
   tooltip="class FeatureNode
A Feature model consists of some FeatureNodels, which can be leaf nodes or fragmentFeature nodes.&#13;@umplesource FeatureModel.ump 26&#13;"];

  // Class: CompoundFeatureNode
  "CompoundFeatureNode" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    CompoundFeatureNode    </td></tr></table>>,
   tooltip="class CompoundFeatureNode
A compund feature has multiple of features (like xor , or and other that have multiplicity.)&#13;@umplesource FeatureModel.ump 46&#13;"];
  "CompoundFeatureNode" -> "FeatureNode" [arrowhead="empty"; samehead="gen"];


  // Class: FeatureLeaf
  "FeatureLeaf" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    FeatureLeaf    </td></tr></table>>,
   tooltip="class FeatureLeaf
A FeatureLeaf contains a full mixset or a full file.&#13;@umplesource FeatureModel.ump 54&#13;"];
  "FeatureLeaf" -> "FeatureNode" [arrowhead="empty"; samehead="gen"];


  // Class: FeatureLink
  "FeatureLink" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    FeatureLink    </td></tr><hr/><tr><td align="left" href="" title="boolean isSub&#13;isSub to differentiate between sub-features and include/exclude relationship&#13;">  isSub : boolean  </td></tr><tr><td align="left" href="" title="FeatureConnectingOpType featureConnectingOpType&#13;Set a default value for featureLinks.&#13;">  featureConnectingOpType : FeatureConnectingOpType  </td></tr></table>>,
   tooltip="class FeatureLink
A FeatureLink connects a source feature to target feature(s) in the feature diagram.&#13;@umplesource FeatureModel.ump 76&#13;"];

  // Class: TracerDirective
  "TracerDirective" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TracerDirective    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean verbosity&#13;">  verbosity : Boolean  </td></tr></table>>,
   tooltip="class TracerDirective
* ----- Tracer Directive MetaModel&#13; A statement found in Umple that directs tracing technology&#13; to be used in generted code&#13;@umplesource Trace.ump 39&#13;"];

  // Class: TracerArgument
  "TracerArgument" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TracerArgument    </td></tr><hr/><tr><td align="left" href="" title="String argument&#13;">  argument : String  </td></tr></table>>,
   tooltip="class TracerArgument
@umplesource Trace.ump 48&#13;"];

  // Class: TraceMessageSwitch
  "TraceMessageSwitch" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceMessageSwitch    </td></tr><hr/><tr><td align="left" href="" title="Boolean on&#13;">  on : Boolean  </td></tr><tr><td align="left" href="" title="Boolean off&#13;">  off : Boolean  </td></tr></table>>,
   tooltip="class TraceMessageSwitch
@umplesource Trace.ump 53&#13;"];

  // Class: MessageComponent
  "MessageComponent" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MessageComponent    </td></tr><hr/><tr><td align="left" href="" title="String component&#13;">  component : String  </td></tr></table>>,
   tooltip="class MessageComponent
@umplesource Trace.ump 60&#13;"];

  // Class: LogConfiguration
  "LogConfiguration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    LogConfiguration    </td></tr><hr/><tr><td align="left" href="" title="Integer monitorInterval&#13;">  monitorInterval : Integer  </td></tr><tr><td align="left" href="" title="String rootLogger&#13;">  rootLogger : String  </td></tr><tr><td align="left" href="" title="boolean generateConfig&#13;">  generateConfig : boolean  </td></tr></table>>,
   tooltip="class LogConfiguration
@umplesource Trace.ump 65&#13;"];

  // Class: LoggerLevelToAppender
  "LoggerLevelToAppender" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    LoggerLevelToAppender    </td></tr></table>>,
   tooltip="class LoggerLevelToAppender
@umplesource Trace.ump 73&#13;"];

  // Class: Level
  "Level" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Level    </td></tr><hr/><tr><td align="left" href="" title="String level&#13;">  level : String  </td></tr></table>>,
   tooltip="class Level
@umplesource Trace.ump 79&#13;"];

  // Class: Appender
  "Appender" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Appender    </td></tr><hr/><tr><td align="left" href="" title="String appender&#13;">  appender : String  </td></tr></table>>,
   tooltip="class Appender
@umplesource Trace.ump 84&#13;"];

  // Class: TraceDirective
  "TraceDirective" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceDirective    </td></tr><hr/><tr><td align="left" href="" title="Integer id&#13;">  id : Integer  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr></table>>,
   tooltip="class TraceDirective
* ----- Trace Directive MetaModel&#13; A statement found in Umple that directs code to be generated&#13; to trace a model element and generate output using some tracing tool&#13;Orange for Trace stuff&#13;@umplesource Trace.ump 94&#13;@umplesource Trace.ump 102&#13;@umplesource DiagramMaster.ump 111&#13;@umplesource DiagramMaster.ump 118&#13;"];

  // Class: Postfix
  "Postfix" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Postfix    </td></tr><hr/><tr><td align="left" href="" title="Integer occurences&#13;">  occurences : Integer  </td></tr><tr><td align="left" href="" title="Double periodClause&#13;">  periodClause : Double  </td></tr><tr><td align="left" href="" title="Double duringClause&#13;">  duringClause : Double  </td></tr><tr><td align="left" href="" title="String executeClause&#13;">  executeClause : String  </td></tr></table>>,
   tooltip="class Postfix
@umplesource Trace.ump 111&#13;"];

  // Class: LogLevel
  "LogLevel" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    LogLevel    </td></tr><hr/><tr><td align="left" href="" title="String level&#13;">  level : String  </td></tr></table>>,
   tooltip="class LogLevel
@umplesource Trace.ump 142&#13;"];

  // Class: AttributeTraceItem
  "AttributeTraceItem" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AttributeTraceItem    </td></tr><hr/><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr><tr><td align="left" href="" title="boolean traceSet&#13;">  traceSet : boolean  </td></tr><tr><td align="left" href="" title="boolean traceGet&#13;">  traceGet : boolean  </td></tr><tr><td align="left" href="" title="boolean traceConstructor&#13;">  traceConstructor : boolean  </td></tr><tr><td align="left" href="" title="String forClause&#13;">  forClause : String  </td></tr><tr><td align="left" href="" title="String periodClause&#13;">  periodClause : String  </td></tr><tr><td align="left" href="" title="String duringClause&#13;">  duringClause : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class AttributeTraceItem
* An element of a trace directive that indicates to trace one or more attributes&#13;@umplesource Trace.ump 160&#13;@umplesource Trace_Code.ump 303&#13;@umplesource DiagramMaster.ump 116&#13;"];
  "AttributeTraceItem" -> "TraceItem" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: StateMachineTraceItem
  "StateMachineTraceItem" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachineTraceItem    </td></tr><hr/><tr><td align="left" href="" title="ConstraintTree constraint&#13;">  constraint : ConstraintTree  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr><tr><td align="left" href="" title="boolean isIn&#13;">  isIn : boolean  </td></tr><tr><td align="left" href="" title="boolean isOut&#13;">  isOut : boolean  </td></tr><tr><td align="left" href="" title="boolean entry&#13;">  entry : boolean  </td></tr><tr><td align="left" href="" title="boolean exit&#13;">  exit : boolean  </td></tr><tr><td align="left" href="" title="int level&#13;">  level : int  </td></tr><tr><td align="left" href="" title="boolean traceStateMachineFlag&#13;">  traceStateMachineFlag : boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String periodClause&#13;">  periodClause : String  </td></tr><tr><td align="left" href="" title="Boolean conditionallyWhere&#13;">  conditionallyWhere : Boolean  </td></tr><tr><td align="left" href="" title="String conditionType&#13;">  conditionType : String  </td></tr><tr><td align="left" href="" title="String accessor&#13;">  accessor : String  </td></tr><tr><td align="left" href="" title="String concatinator&#13;">  concatinator : String  </td></tr></table>>,
   tooltip="class StateMachineTraceItem
@umplesource Trace.ump 184&#13;@umplesource Trace_Code.ump 428&#13;@umplesource DiagramMaster.ump 115&#13;"];
  "StateMachineTraceItem" -> "TraceItem" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: AssociationTraceItem
  "AssociationTraceItem" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssociationTraceItem    </td></tr><hr/><tr><td align="left" href="" title="ConstraintTree constraint&#13;">  constraint : ConstraintTree  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr><tr><td align="left" href="" title="boolean traceCardinality&#13;default case tracing Cardinality&#13;">  traceCardinality : boolean  </td></tr><tr><td align="left" href="" title="boolean traceAdd&#13;">  traceAdd : boolean  </td></tr><tr><td align="left" href="" title="boolean traceRemove&#13;">  traceRemove : boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String periodClause&#13;">  periodClause : String  </td></tr><tr><td align="left" href="" title="Boolean conditionallyWhere&#13;">  conditionallyWhere : Boolean  </td></tr><tr><td align="left" href="" title="String conditionType&#13;">  conditionType : String  </td></tr></table>>,
   tooltip="class AssociationTraceItem
@umplesource Trace.ump 217&#13;@umplesource Trace_Code.ump 554&#13;"];
  "AssociationTraceItem" -> "TraceItem" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: MethodTraceItem
  "MethodTraceItem" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MethodTraceItem    </td></tr><hr/><tr><td align="left" href="" title="ConstraintTree constraint&#13;">  constraint : ConstraintTree  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr><tr><td align="left" href="" title="boolean entry&#13;">  entry : boolean  </td></tr><tr><td align="left" href="" title="boolean exit&#13;">  exit : boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String periodClause&#13;">  periodClause : String  </td></tr><tr><td align="left" href="" title="Boolean conditionallyWhere&#13;">  conditionallyWhere : Boolean  </td></tr><tr><td align="left" href="" title="String conditionType&#13;">  conditionType : String  </td></tr></table>>,
   tooltip="class MethodTraceItem
@umplesource Trace.ump 241&#13;@umplesource Trace_Code.ump 663&#13;@umplesource DiagramMaster.ump 117&#13;"];
  "MethodTraceItem" -> "TraceItem" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: TraceCase
  "TraceCase" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="boolean activation&#13;">  activation : boolean  </td></tr></table>>,
   tooltip="class TraceCase
* Future work - initial implementation is done&#13; A group of trace directives that can be switched on or off by other&#13; trace directives&#13;@umplesource Trace.ump 266&#13;@umplesource DiagramMaster.ump 112&#13;"];

  // Class: TraceCondition
  "TraceCondition" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceCondition    </td></tr><hr/><tr><td align="left" href="" title="String conditionType&#13;condition may be where, until, after, or giving&#13;">  conditionType : String  </td></tr><tr><td align="left" href="" title="boolean preCondition&#13;">  preCondition : boolean  </td></tr><tr><td align="left" href="" title="boolean postCondition&#13;">  postCondition : boolean  </td></tr><tr><td align="left" href="" title="String lhs&#13;">  lhs : String  </td></tr></table>>,
   tooltip="class TraceCondition
* Discarded metamodel&#13;@umplesource Trace.ump 276&#13;@umplesource DiagramMaster.ump 114&#13;"];

  // Class: ConditionRhs
  "ConditionRhs" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConditionRhs    </td></tr><hr/><tr><td align="left" href="" title="String rhs&#13;">  rhs : String  </td></tr><tr><td align="left" href="" title="String comparisonOperator&#13;">  comparisonOperator : String  </td></tr></table>>,
   tooltip="class ConditionRhs
@umplesource Trace.ump 286&#13;@umplesource DiagramMaster.ump 120&#13;"];

  // Class: TraceRecord
  "TraceRecord" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceRecord    </td></tr><hr/><tr><td align="left" href="" title="boolean recordOnly&#13;">  recordOnly : boolean  </td></tr><tr><td align="left" href="" title="String[] record&#13;">  record : String[]  </td></tr></table>>,
   tooltip="class TraceRecord
@umplesource Trace.ump 292&#13;@umplesource Trace.ump 297&#13;@umplesource DiagramMaster.ump 113&#13;"];

  // Class: Primitive
  "Primitive" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Primitive    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class Primitive
@umplesource Structure.ump 39&#13;"];

  // Class: PortBinding
  "PortBinding" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PortBinding    </td></tr><hr/><tr><td align="left" href="" title="UmpleVariable fromSubcomponent&#13;">  fromSubcomponent : UmpleVariable  </td></tr><tr><td align="left" href="" title="UmpleVariable toSubcomponent&#13;">  toSubcomponent : UmpleVariable  </td></tr></table>>,
   tooltip="class PortBinding
@umplesource Structure.ump 62&#13;"];

  // Class: Monitor
  "Monitor" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Monitor    </td></tr></table>>,
   tooltip="class Monitor
@umplesource Structure.ump 73&#13;"];

  // Class: BasicConstraint
  "BasicConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    BasicConstraint    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr></table>>,
   tooltip="class BasicConstraint
@umplesource Structure.ump 93&#13;"];
  "BasicConstraint" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: PortConstraint
  "PortConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PortConstraint    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="Port port&#13;">  port : Port  </td></tr></table>>,
   tooltip="class PortConstraint
@umplesource Structure.ump 101&#13;"];

  // Class: TimerConstraint
  "TimerConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TimerConstraint    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String timer&#13;">  timer : String  </td></tr></table>>,
   tooltip="class TimerConstraint
@umplesource Structure.ump 111&#13;"];

  // Class: MessageConstraint
  "MessageConstraint" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MessageConstraint    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String priority&#13;">  priority : String  </td></tr></table>>,
   tooltip="class MessageConstraint
@umplesource Structure.ump 121&#13;"];

  // Class: ActiveMethod
  "ActiveMethod" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ActiveMethod    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="ActiveDirectionHandler methodBody&#13;">  methodBody : ActiveDirectionHandler  </td></tr><tr><td align="left" href="" title="ActiveMethod inverseMethodBody&#13;">  inverseMethodBody : ActiveMethod  </td></tr></table>>,
   tooltip="class ActiveMethod
@umplesource Structure.ump 130&#13;"];

  // Class: Trigger
  "Trigger" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Trigger    </td></tr><hr/><tr><td align="left" href="" title="String timerPSec&#13;">  timerPSec : String  </td></tr></table>>,
   tooltip="class Trigger
@umplesource Structure.ump 177&#13;"];

  // Class: DeferredCall
  "DeferredCall" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    DeferredCall    </td></tr></table>>,
   tooltip="class DeferredCall
@umplesource Structure.ump 188&#13;"];

  // Class: DeferredFunction
  "DeferredFunction" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    DeferredFunction    </td></tr><hr/><tr><td align="left" href="" title="String methodInvoke&#13;">  methodInvoke : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr></table>>,
   tooltip="class DeferredFunction
@umplesource Structure.ump 195&#13;"];

  // Class: PortFunction
  "PortFunction" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PortFunction    </td></tr><hr/><tr><td align="left" href="" title="Port name&#13;">  name : Port  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;Signal parameter&#13;">  parameters : String[]  </td></tr></table>>,
   tooltip="class PortFunction
@umplesource Structure.ump 204&#13;"];

  // Class: AnonymousFunction
  "AnonymousFunction" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AnonymousFunction    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr></table>>,
   tooltip="class AnonymousFunction
@umplesource Structure.ump 213&#13;"];

  // Class: Protocol
  "Protocol" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Protocol    </td></tr><hr/><tr><td align="left" href="" title="MessageHandler msgHandler&#13;">  msgHandler : MessageHandler  </td></tr></table>>,
   tooltip="class Protocol
@umplesource Structure.ump 223&#13;"];

  // Class: TemplateField
  "TemplateField" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateField    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="EmitResponse value&#13;">  value : EmitResponse  </td></tr></table>>,
   tooltip="class TemplateField
A template filed reprsents a field with a value for emitting purposes&#13;@umplesource Template.ump 74&#13;"];

  // Class: TemplateElement
  "TemplateElement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateElement    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="EmitResponse emitResponse&#13;">  emitResponse : EmitResponse  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String content&#13;">  content : String  </td></tr><tr><td align="left" href="" title="HashMap&lt;UmpleClass,Integer&gt; filledClasses&#13;">  filledClasses : HashMap&lt;UmpleClass,Integer&gt;  </td></tr></table>>,
   tooltip="class TemplateElement
A template element represents template contents to be built. It relies on a set of TemplateField&#13;@umplesource Template.ump 95&#13;"];

  // Class: UmpleInternalParser
  "UmpleInternalParser" [ style=filled, fillcolor="#FFCCCC" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleInternalParser    </td></tr><hr/><tr><td align="left" href="" title="String currentPackageName&#13;">  currentPackageName : String  </td></tr><tr><td align="left" href="" title="String redefinePackageName&#13;">  redefinePackageName : String  </td></tr><tr><td align="left" href="" title="Boolean packageNameUsed&#13;">  packageNameUsed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean outputUmpleSource&#13;">  outputUmpleSource : Boolean  </td></tr><tr><td align="left" href="" title="UmpleModel model&#13;The Umple meta model which will be populated based on what was parsed.&#13;">  model : UmpleModel  </td></tr><tr><td align="left" href="" title="RuleBasedParser parser&#13;">  parser : RuleBasedParser  </td></tr><tr><td align="left" href="" title="NameSpace lastParsedNameSpace&#13;">  lastParsedNameSpace : NameSpace  </td></tr><tr><td align="left" href="" title="Integer[] allowedMessages&#13;">  allowedMessages : Integer[]  </td></tr><tr><td align="left" href="" title="Integer[] ignoredMessages&#13;">  ignoredMessages : Integer[]  </td></tr><tr><td align="left" href="" title="Integer[] disallowedMessages&#13;">  disallowedMessages : Integer[]  </td></tr><tr><td align="left" href="" title="Integer[] expectedMessages&#13;">  expectedMessages : Integer[]  </td></tr><tr><td align="left" href="" title="String[] unparsedUmpleFiles&#13;">  unparsedUmpleFiles : String[]  </td></tr><tr><td align="left" href="" title="String[] parsedUmpleFiles&#13;">  parsedUmpleFiles : String[]  </td></tr><tr><td align="left" href="" title="Boolean shouldProcessAgain&#13;">  shouldProcessAgain : Boolean  </td></tr><tr><td align="left" href="" title="Boolean shouldProcessClassAgain&#13;">  shouldProcessClassAgain : Boolean  </td></tr><tr><td align="left" href="" title="AssociationVariable[] unlinkedAssociationVariables&#13;">  unlinkedAssociationVariables : AssociationVariable[]  </td></tr><tr><td align="left" href="" title="Association[] unlinkedAssociations&#13;">  unlinkedAssociations : Association[]  </td></tr><tr><td align="left" href="" title="Map&lt;Position,String&gt; positionToClassNameReference&#13;">  positionToClassNameReference : Map&lt;Position,String&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;Token&gt;&gt; unanalyzedInvariants&#13;">  unanalyzedInvariants : Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;String&gt;&gt; unlinkedExtends&#13;">  unlinkedExtends : Map&lt;UmpleClassifier,List&lt;String&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;Token&gt;&gt; unlinkedExtendsTokens&#13;">  unlinkedExtendsTokens : Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;Token&gt;&gt; unlinkedExtendsTokensInterface&#13;">  unlinkedExtendsTokensInterface : Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;String&gt;&gt; unlinkedInterfaceExtends&#13;">  unlinkedInterfaceExtends : Map&lt;UmpleClassifier,List&lt;String&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClass,List&lt;Token&gt;&gt; unlinkedKeysTokens&#13;">  unlinkedKeysTokens : Map&lt;UmpleClass,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;UmpleClassifier,List&lt;Token&gt;&gt; unanalyzedInjectionTokens&#13;">  unanalyzedInjectionTokens : Map&lt;UmpleClassifier,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Comment[] lastComments&#13;List of comments populated by the parser to be added to the next class, attribute, association, method, etc.&#13;">  lastComments : Comment[]  </td></tr><tr><td align="left" href="" title="ReqImplementation[] lastRequirementsImpl&#13;List of requirement implementations&#13;">  lastRequirementsImpl : ReqImplementation[]  </td></tr><tr><td align="left" href="" title="Attribute lastattr&#13;last attribute made.&#13;">  lastattr : Attribute  </td></tr><tr><td align="left" href="" title="AssociationVariable lastassoc&#13;last association made.&#13;">  lastassoc : AssociationVariable  </td></tr><tr><td align="left" href="" title="Position lastassocPosition&#13;">  lastassocPosition : Position  </td></tr><tr><td align="left" href="" title="Map&lt;Token,UmpleClass&gt; attributeAutouniqueImmutable&#13;">  attributeAutouniqueImmutable : Map&lt;Token,UmpleClass&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;Attribute,Token&gt; fixmlLastIntilialization&#13;">  fixmlLastIntilialization : Map&lt;Attribute,Token&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;Attribute,Integer&gt; fixmlAttributeCount&#13;">  fixmlAttributeCount : Map&lt;Attribute,Integer&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;Association,List&lt;Token&gt;&gt; afixmlLastIntilialization&#13;">  afixmlLastIntilialization : Map&lt;Association,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;Association,Integer&gt; afixmlAttributeCount&#13;">  afixmlAttributeCount : Map&lt;Association,Integer&gt;  </td></tr><tr><td align="left" href="" title="CompositeStructureDefinitionWalker compWalker&#13;">  compWalker : CompositeStructureDefinitionWalker  </td></tr><tr><td align="left" href="" title="TemplateDefinitionWalker walker&#13;">  walker : TemplateDefinitionWalker  </td></tr><tr><td align="left" href="" title="StateMachine placeholderStateMachine&#13;">  placeholderStateMachine : StateMachine  </td></tr><tr><td align="left" href="" title="Map&lt;String,Token&gt; stateMachineNameToToken&#13;">  stateMachineNameToToken : Map&lt;String,Token&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;State,List&lt;Token&gt;&gt; possiblyUnknownStates&#13;">  possiblyUnknownStates : Map&lt;State,List&lt;Token&gt;&gt;  </td></tr><tr><td align="left" href="" title="List&lt;Token&gt; stateNames&#13;">  stateNames : List&lt;Token&gt;  </td></tr><tr><td align="left" href="" title="List&lt;Token&gt; transitionNames&#13;">  transitionNames : List&lt;Token&gt;  </td></tr><tr><td align="left" href="" title="List&lt;Token&gt; ignoredTransitions&#13;">  ignoredTransitions : List&lt;Token&gt;  </td></tr><tr><td align="left" href="" title="List&lt;Token&gt; innerMixsetTokens&#13;">  innerMixsetTokens : List&lt;Token&gt;  </td></tr><tr><td align="left" href="" title="List&lt;ReqImplementation&gt; ReqImpState&#13;">  ReqImpState : List&lt;ReqImplementation&gt;  </td></tr><tr><td align="left" href="" title="Integer traceFlagId&#13;">  traceFlagId : Integer  </td></tr><tr><td align="left" href="" title="TraceDirective traceDirective&#13;">  traceDirective : TraceDirective  </td></tr><tr><td align="left" href="" title="AttributeTraceItem traceAttr&#13;">  traceAttr : AttributeTraceItem  </td></tr><tr><td align="left" href="" title="AssociationTraceItem tracedAssoc&#13;">  tracedAssoc : AssociationTraceItem  </td></tr><tr><td align="left" href="" title="MethodTraceItem mte&#13;">  mte : MethodTraceItem  </td></tr><tr><td align="left" href="" title="TraceCase tca&#13;">  tca : TraceCase  </td></tr><tr><td align="left" href="" title="Postfix post&#13;">  post : Postfix  </td></tr><tr><td align="left" href="" title="List&lt;ReqImplementation&gt; ReqImpEnum&#13;">  ReqImpEnum : List&lt;ReqImplementation&gt;  </td></tr><tr><td align="left" href="" title="List&lt;ReqImplementation&gt; ReqImpMixset&#13;">  ReqImpMixset : List&lt;ReqImplementation&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Boolean&gt; parsedUmpfiles&#13;The key is to store names of parsed umple files. The value is to specify if fully parsed file (true) or partially (false).&#13;">  parsedUmpfiles : Map&lt;String,Boolean&gt;  </td></tr></table>>,
   tooltip="class UmpleInternalParser
This is our internal parser implementation for the Umple language.  It uses&#13;a generic Parser that can read an external EBNF grammar file, and then populate&#13;an abstract syntax tree.&#13;&#13;The work of the UmpleInternalParser is &#13;&#13;a) The grammar definition (defined externally in *.grammar files)&#13;b) Analyzing the AST to populate an Umple meta model instance&#13;c) Delegating to our code generator to produce the necessary artifacts (i.e. Java / PHP / Ruby code)&#13;&#13;Please refer to UmpleInternalParser_Code.ump for implementation details.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;This is a mixin feature of Umple. The Content of following class will be added automatically to core parse.&#13;---------------------------------end----------------------------------------&#13;----------------------------------------------------------------------------&#13;---------------------------------Start--------------------------------------&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Internal invocation for internal umple parser in order to invoke walkers calls which&#13;can instantiate the analysis if required&#13;Internal invocation for internal umple parser in order to invoke walkers calls which&#13;can instantiate the analysis if required&#13;Copyright: All contributers to the Umple Project.&#13;&#13;This file is made available subject to the open source license found at:&#13;https://umple.org/license&#13;&#13;This file analyzses require statement tokens to populate Requiregraph for Umple model.&#13;&#13;Please refer to UmpleInternalParser.ump for more details.&#13;Pink for core Umple classes for parsing and the model&#13;@umplesource UmpleInternalParser.ump 26&#13;@umplesource UmpleInternalParser_Code.ump 35&#13;@umplesource UmpleInternalParser_CodeCore.ump 17&#13;@umplesource UmpleInternalParser_CodeClass.ump 17&#13;@umplesource UmpleInternalParser_CodeClass.ump 279&#13;@umplesource UmpleInternalParser_CodeClass.ump 959&#13;@umplesource UmpleInternalParser_CodeClass.ump 1943&#13;@umplesource UmpleInternalParser_CodeClass.ump 1974&#13;@umplesource UmpleInternalParser_CodeClass.ump 5179&#13;@umplesource UmpleInternalParser_CodeClass.ump 6154&#13;@umplesource DiagramMaster.ump 6155&#13;@umplesource UmpleInternalParser_CodeTrait.ump 24&#13;@umplesource UmpleInternalParser_CodeTrait.ump 621&#13;@umplesource UmpleInternalParser_CodeTrait.ump 1092&#13;@umplesource UmpleInternalParser_CodeTrait.ump 1606&#13;@umplesource UmpleInternalParser_CodeTrait.ump 1693&#13;@umplesource UmpleInternalParser_CodeTrait.ump 1780&#13;@umplesource UmpleInternalParser_CodeTrait.ump 1855&#13;@umplesource UmpleInternalParser_CodeTrait.ump 2052&#13;@umplesource UmpleInternalParser_FIXML.ump 3&#13;@umplesource UmpleInternalParser_FIXML.ump 7&#13;@umplesource UmpleInternalParser_FIXML.ump 326&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 21&#13;@umplesource UmpleInternalParser_CodeConstraints.ump 17&#13;@umplesource UmpleInternalParser_Code.ump 556&#13;@umplesource UmpleInternalParser_CodeStructure.ump 1638&#13;@umplesource UmpleInternalParser_CodeTemplate.ump 827&#13;@umplesource UmpleInternalParser_CodeStateMachine.ump 17&#13;@umplesource UmpleInternalParser_CodeTrace.ump 17&#13;@umplesource UmpleInternalParser_CodeTrace.ump 510&#13;@umplesource UmpleInternalParser_CodeTraceAttribute.ump 17&#13;@umplesource UmpleInternalParser_CodeTraceStateMachine.ump 17&#13;@umplesource UmpleInternalParser_CodeTraceAssociation.ump 17&#13;@umplesource UmpleInternalParser_CodeTraceCase.ump 17&#13;@umplesource UmpleInternalParser_CodeLayout.ump 17&#13;@umplesource UmpleInternalParser_CodeUSE.ump 17&#13;@umplesource UmpleInternalParser_CodeFilter.ump 19&#13;@umplesource UmpleInternalParser_CodeFilter.ump 140&#13;@umplesource UmpleInternalParser_CodeEnumeration.ump 9&#13;@umplesource UmpleInternalParser_CodeMixset.ump 54&#13;@umplesource UmpleInternalParser_CodeMixset.ump 67&#13;@umplesource UmpleInternalParser_CodeRequireStatement.ump 12&#13;@umplesource UmpleInternalParser_CodeTest.ump 9&#13;@umplesource UmpleInternalPraser_CodeInjection.ump 11&#13;@umplesource DiagramMaster.ump 58&#13;"];
  "UmpleInternalParser" -> "Parser" [arrowhead="empty"; samehead="gen"];

  "UmpleParser" [style=filled, fillcolor="#FFCCCC"];

   "UmpleInternalParser" -> "UmpleParser" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: CompositeStructureTokenAnalyzer
  "CompositeStructureTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CompositeStructureTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass componentClass&#13;">  componentClass : UmpleClass  </td></tr><tr><td align="left" href="" title="boolean mustWarn&#13;*&#13;    * /////////////////////////////////////////////// TO BE REMOVED AFTER FIXING ERRORS WITH LATEST CHANGES ///////////////////////////////////////////////////////////////////////&#13;">  mustWarn : boolean  </td></tr></table>>,
   tooltip="class CompositeStructureTokenAnalyzer
Used as a helper class to analyze tokens in a given component&#13;@umplesource UmpleInternalParser_CodeStructure.ump 18&#13;@umplesource UmpleInternalParser_CodeStructure.ump 1290&#13;@umplesource UmpleInternalParser_CodeStructure.ump 1440&#13;"];

  // Class: TemplateAttributeParser
  "TemplateAttributeParser" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateAttributeParser    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="String className&#13;">  className : String  </td></tr><tr><td align="left" href="" title="String templateName&#13;">  templateName : String  </td></tr><tr><td align="left" href="" title="Token rootToken&#13;">  rootToken : Token  </td></tr><tr><td align="left" href="" title="String[] parameterNames&#13;">  parameterNames : String[]  </td></tr><tr><td align="left" href="" title="EmitResponse emisionContent&#13;">  emisionContent : EmitResponse  </td></tr></table>>,
   tooltip="class TemplateAttributeParser
Parse existing attributes in a template&#13;@umplesource UmpleInternalParser_CodeTemplate.ump 98&#13;"];

  // Class: TemplateTokenAnalyzer
  "TemplateTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass currentTemplate&#13;">  currentTemplate : UmpleClass  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; templateAttributes&#13;">  templateAttributes : HashMap&lt;String,Boolean&gt;  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; emitMethods&#13;">  emitMethods : HashMap&lt;String,Boolean&gt;  </td></tr></table>>,
   tooltip="class TemplateTokenAnalyzer
Used as a helper class to analyze tokens in a given template&#13;@umplesource UmpleInternalParser_CodeTemplate.ump 286&#13;"];

  // All associations
  "ClassDependencyNode" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" headtooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" tailtooltip="ClassDependencyNode *  -- 0..1  UmpleClass

An UmpleClass has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

A ClassDependencyNode may have an UmpleClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('ClassDependencyNode,UmpleClass,0..1 ,* ')" ];
  "ClassDependencyTree" -> "ClassDependencyNode" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="ClassDependencyTree 0..1  -- *  ClassDependencyNode

A ClassDependencyNode may have a ClassDependencyTree. It can have none or just 1. 

A ClassDependencyTree has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

" headtooltip="ClassDependencyTree 0..1  -- *  ClassDependencyNode

A ClassDependencyNode may have a ClassDependencyTree. It can have none or just 1. 

A ClassDependencyTree has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

" tailtooltip="ClassDependencyTree 0..1  -- *  ClassDependencyNode

A ClassDependencyNode may have a ClassDependencyTree. It can have none or just 1. 

A ClassDependencyTree has some ClassDependencyNodes. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('ClassDependencyTree,ClassDependencyNode,* ,0..1 ')" ];
  "EventSequencer" -> "StateWrapper" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* possibleStates", tooltip="EventSequencer 0..1  -> * possibleStates StateWrapper

A StateWrapper called possibleStates may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some StateWrappers called possibleStates. It can have none, and there is no upper bound defined.

" headtooltip="EventSequencer 0..1  -> * possibleStates StateWrapper

A StateWrapper called possibleStates may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some StateWrappers called possibleStates. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequencer 0..1  -> * possibleStates StateWrapper

A StateWrapper called possibleStates may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some StateWrappers called possibleStates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequencer,StateWrapper,* possibleStates,0..1 ')" ];
  "EventSequencer" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* possibleTransitions", tooltip="EventSequencer 0..1  -> * possibleTransitions Transition

A Transition called possibleTransitions may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Transitions called possibleTransitions. It can have none, and there is no upper bound defined.

" headtooltip="EventSequencer 0..1  -> * possibleTransitions Transition

A Transition called possibleTransitions may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Transitions called possibleTransitions. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequencer 0..1  -> * possibleTransitions Transition

A Transition called possibleTransitions may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Transitions called possibleTransitions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequencer,Transition,* possibleTransitions,0..1 ')" ];
  "EventSequencer" -> "Event" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* possibleEvents", tooltip="EventSequencer 0..1  -> * possibleEvents Event

An Event called possibleEvents may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Events called possibleEvents. It can have none, and there is no upper bound defined.

" headtooltip="EventSequencer 0..1  -> * possibleEvents Event

An Event called possibleEvents may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Events called possibleEvents. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequencer 0..1  -> * possibleEvents Event

An Event called possibleEvents may have an EventSequencer. It can have none or just 1. 

An EventSequencer has some Events called possibleEvents. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequencer,Event,* possibleEvents,0..1 ')" ];
  "EventSequencer" -> "EventSequenceWalkTracker" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 tracker", tooltip="EventSequencer 0..1  -> 0..1 tracker EventSequenceWalkTracker

An EventSequenceWalkTracker called tracker may have an EventSequencer. It can have none or just 1. 

An EventSequencer may have an EventSequenceWalkTracker called tracker. It can have none or just 1. 

" headtooltip="EventSequencer 0..1  -> 0..1 tracker EventSequenceWalkTracker

An EventSequenceWalkTracker called tracker may have an EventSequencer. It can have none or just 1. 

An EventSequencer may have an EventSequenceWalkTracker called tracker. It can have none or just 1. 

" tailtooltip="EventSequencer 0..1  -> 0..1 tracker EventSequenceWalkTracker

An EventSequenceWalkTracker called tracker may have an EventSequencer. It can have none or just 1. 

An EventSequencer may have an EventSequenceWalkTracker called tracker. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('EventSequencer,EventSequenceWalkTracker,0..1 tracker,0..1 ')" ];
  "EventSequenceWalkTracker" -> "StateWrapper" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* unvisitedStates", tooltip="EventSequenceWalkTracker 0..1  -> * unvisitedStates StateWrapper

A StateWrapper called unvisitedStates may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some StateWrappers called unvisitedStates. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceWalkTracker 0..1  -> * unvisitedStates StateWrapper

A StateWrapper called unvisitedStates may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some StateWrappers called unvisitedStates. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceWalkTracker 0..1  -> * unvisitedStates StateWrapper

A StateWrapper called unvisitedStates may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some StateWrappers called unvisitedStates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceWalkTracker,StateWrapper,* unvisitedStates,0..1 ')" ];
  "EventSequenceWalkTracker" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* unvisitedTransitions", tooltip="EventSequenceWalkTracker 0..1  -> * unvisitedTransitions Transition

A Transition called unvisitedTransitions may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some Transitions called unvisitedTransitions. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceWalkTracker 0..1  -> * unvisitedTransitions Transition

A Transition called unvisitedTransitions may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some Transitions called unvisitedTransitions. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceWalkTracker 0..1  -> * unvisitedTransitions Transition

A Transition called unvisitedTransitions may have an EventSequenceWalkTracker. It can have none or just 1. 

An EventSequenceWalkTracker has some Transitions called unvisitedTransitions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceWalkTracker,Transition,* unvisitedTransitions,0..1 ')" ];
  "StateWrapper" -> "StateWrapper" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 parent", tooltip="StateWrapper *  -> 0..1 parent StateWrapper

A StateWrapper called parent has some StateWrappers. It can have none, and there is no upper bound defined.

A StateWrapper may have a StateWrapper called parent. It can have none or just 1. 

" headtooltip="StateWrapper *  -> 0..1 parent StateWrapper

A StateWrapper called parent has some StateWrappers. It can have none, and there is no upper bound defined.

A StateWrapper may have a StateWrapper called parent. It can have none or just 1. 

" tailtooltip="StateWrapper *  -> 0..1 parent StateWrapper

A StateWrapper called parent has some StateWrappers. It can have none, and there is no upper bound defined.

A StateWrapper may have a StateWrapper called parent. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateWrapper,StateWrapper,0..1 parent,* ')" ];
  "StateWrapper" -> "EventWrapper" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* events", tooltip="StateWrapper 0..1  -> * events EventWrapper

An EventWrapper called events may have a StateWrapper. It can have none or just 1. 

A StateWrapper has some EventWrappers called events. It can have none, and there is no upper bound defined.

" headtooltip="StateWrapper 0..1  -> * events EventWrapper

An EventWrapper called events may have a StateWrapper. It can have none or just 1. 

A StateWrapper has some EventWrappers called events. It can have none, and there is no upper bound defined.

" tailtooltip="StateWrapper 0..1  -> * events EventWrapper

An EventWrapper called events may have a StateWrapper. It can have none or just 1. 

A StateWrapper has some EventWrappers called events. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('StateWrapper,EventWrapper,* events,0..1 ')" ];
  "EventWrapper" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="EventWrapper 0..1  -> *  Transition

A Transition may have an EventWrapper. It can have none or just 1. 

An EventWrapper has some Transitions. It can have none, and there is no upper bound defined.

" headtooltip="EventWrapper 0..1  -> *  Transition

A Transition may have an EventWrapper. It can have none or just 1. 

An EventWrapper has some Transitions. It can have none, and there is no upper bound defined.

" tailtooltip="EventWrapper 0..1  -> *  Transition

A Transition may have an EventWrapper. It can have none or just 1. 

An EventWrapper has some Transitions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventWrapper,Transition,* ,0..1 ')" ];
  "EventSequenceTable" -> "StateWrapper" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* headerStates", tooltip="EventSequenceTable 0..1  -> * headerStates StateWrapper

A StateWrapper called headerStates may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some StateWrappers called headerStates. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceTable 0..1  -> * headerStates StateWrapper

A StateWrapper called headerStates may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some StateWrappers called headerStates. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceTable 0..1  -> * headerStates StateWrapper

A StateWrapper called headerStates may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some StateWrappers called headerStates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceTable,StateWrapper,* headerStates,0..1 ')" ];
  "EventSequenceTable" -> "EventSequenceTableRow" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="EventSequenceTable 0..1  -> *  EventSequenceTableRow

An EventSequenceTableRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some EventSequenceTableRows. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceTable 0..1  -> *  EventSequenceTableRow

An EventSequenceTableRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some EventSequenceTableRows. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceTable 0..1  -> *  EventSequenceTableRow

An EventSequenceTableRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable has some EventSequenceTableRows. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceTable,EventSequenceTableRow,* ,0..1 ')" ];
  "EventSequenceTable" -> "EventSequenceTableHeaderRow" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 headerRow", tooltip="EventSequenceTable 0..1  -> 0..1 headerRow EventSequenceTableHeaderRow

An EventSequenceTableHeaderRow called headerRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable may have an EventSequenceTableHeaderRow called headerRow. It can have none or just 1. 

" headtooltip="EventSequenceTable 0..1  -> 0..1 headerRow EventSequenceTableHeaderRow

An EventSequenceTableHeaderRow called headerRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable may have an EventSequenceTableHeaderRow called headerRow. It can have none or just 1. 

" tailtooltip="EventSequenceTable 0..1  -> 0..1 headerRow EventSequenceTableHeaderRow

An EventSequenceTableHeaderRow called headerRow may have an EventSequenceTable. It can have none or just 1. 

An EventSequenceTable may have an EventSequenceTableHeaderRow called headerRow. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('EventSequenceTable,EventSequenceTableHeaderRow,0..1 headerRow,0..1 ')" ];
  "EventSequenceTableHeaderRow" -> "EventSequenceHeaderCell" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="EventSequenceTableHeaderRow 0..1  -> *  EventSequenceHeaderCell

An EventSequenceHeaderCell may have an EventSequenceTableHeaderRow. It can have none or just 1. 

An EventSequenceTableHeaderRow has some EventSequenceHeaderCells. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceTableHeaderRow 0..1  -> *  EventSequenceHeaderCell

An EventSequenceHeaderCell may have an EventSequenceTableHeaderRow. It can have none or just 1. 

An EventSequenceTableHeaderRow has some EventSequenceHeaderCells. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceTableHeaderRow 0..1  -> *  EventSequenceHeaderCell

An EventSequenceHeaderCell may have an EventSequenceTableHeaderRow. It can have none or just 1. 

An EventSequenceTableHeaderRow has some EventSequenceHeaderCells. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceTableHeaderRow,EventSequenceHeaderCell,* ,0..1 ')" ];
  "EventSequenceTableRow" -> "EventSequenceCell" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="EventSequenceTableRow 0..1  -> *  EventSequenceCell

An EventSequenceCell may have an EventSequenceTableRow. It can have none or just 1. 

An EventSequenceTableRow has some EventSequenceCells. It can have none, and there is no upper bound defined.

" headtooltip="EventSequenceTableRow 0..1  -> *  EventSequenceCell

An EventSequenceCell may have an EventSequenceTableRow. It can have none or just 1. 

An EventSequenceTableRow has some EventSequenceCells. It can have none, and there is no upper bound defined.

" tailtooltip="EventSequenceTableRow 0..1  -> *  EventSequenceCell

An EventSequenceCell may have an EventSequenceTableRow. It can have none or just 1. 

An EventSequenceTableRow has some EventSequenceCells. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('EventSequenceTableRow,EventSequenceCell,* ,0..1 ')" ];
  "DefineDeclaration" -> "DefineBody" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1..* ", tooltip="DefineDeclaration 1  -> 1..*  DefineBody

A DefineBody called defineBodies has A DefineDeclaration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineDeclaration.

A DefineDeclaration has at least 1 DefineBody called defineBodies and can never have none. And there is no upper bound defined.

" headtooltip="DefineDeclaration 1  -> 1..*  DefineBody

A DefineBody called defineBodies has A DefineDeclaration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineDeclaration.

A DefineDeclaration has at least 1 DefineBody called defineBodies and can never have none. And there is no upper bound defined.

" tailtooltip="DefineDeclaration 1  -> 1..*  DefineBody

A DefineBody called defineBodies has A DefineDeclaration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineDeclaration.

A DefineDeclaration has at least 1 DefineBody called defineBodies and can never have none. And there is no upper bound defined.

" URL="javascript:Action.selectAssociation('DefineDeclaration,DefineBody,1..* ,1 ')" ];
  "DefineBody" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="DefineBody 1  -> 1  BasicExpression

A BasicExpression has A DefineBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineBody.

A DefineBody has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and DefineBody, connected as Pairs.
When a DefineBody is created, its BasicExpression must be created at the same time.
When a DefineBody is deleted, its BasicExpression is deleted at the same time.
" headtooltip="DefineBody 1  -> 1  BasicExpression

A BasicExpression has A DefineBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineBody.

A DefineBody has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and DefineBody, connected as Pairs.
When a DefineBody is created, its BasicExpression must be created at the same time.
When a DefineBody is deleted, its BasicExpression is deleted at the same time.
" tailtooltip="DefineBody 1  -> 1  BasicExpression

A BasicExpression has A DefineBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one DefineBody.

A DefineBody has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and DefineBody, connected as Pairs.
When a DefineBody is created, its BasicExpression must be created at the same time.
When a DefineBody is deleted, its BasicExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('DefineBody,BasicExpression,1 ,1 ')" ];
  "BasicExpression" -> "BasicExpression" [dir="none", taillabel="0..1 parent", headlabel="0..2 children", tooltip="BasicExpression 0..1 parent -- 0..2 children BasicExpression

A BasicExpression called children may have a BasicExpression called parent. It can have none or just 1. 

A BasicExpression called parent may have a BasicExpression called children. And there is an upper bound of at most 2 BasicExpressions called children.

" headtooltip="BasicExpression 0..1 parent -- 0..2 children BasicExpression

A BasicExpression called children may have a BasicExpression called parent. It can have none or just 1. 

A BasicExpression called parent may have a BasicExpression called children. And there is an upper bound of at most 2 BasicExpressions called children.

" tailtooltip="BasicExpression 0..1 parent -- 0..2 children BasicExpression

A BasicExpression called children may have a BasicExpression called parent. It can have none or just 1. 

A BasicExpression called parent may have a BasicExpression called children. And there is an upper bound of at most 2 BasicExpressions called children.

" URL="javascript:Action.selectAssociation('BasicExpression,BasicExpression,0..2 children,0..1 parent')" ];
  "CTLSpecification" -> "CTLExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="CTLSpecification 1  -> 1  CTLExpression

A CTLExpression has A CTLSpecification. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLSpecification.

A CTLSpecification has A CTLExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLExpression.

There must always be an equal number of CTLExpression and CTLSpecification, connected as Pairs.
When a CTLSpecification is created, its CTLExpression must be created at the same time.
When a CTLSpecification is deleted, its CTLExpression is deleted at the same time.
" headtooltip="CTLSpecification 1  -> 1  CTLExpression

A CTLExpression has A CTLSpecification. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLSpecification.

A CTLSpecification has A CTLExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLExpression.

There must always be an equal number of CTLExpression and CTLSpecification, connected as Pairs.
When a CTLSpecification is created, its CTLExpression must be created at the same time.
When a CTLSpecification is deleted, its CTLExpression is deleted at the same time.
" tailtooltip="CTLSpecification 1  -> 1  CTLExpression

A CTLExpression has A CTLSpecification. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLSpecification.

A CTLSpecification has A CTLExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CTLExpression.

There must always be an equal number of CTLExpression and CTLSpecification, connected as Pairs.
When a CTLSpecification is created, its CTLExpression must be created at the same time.
When a CTLSpecification is deleted, its CTLExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('CTLSpecification,CTLExpression,1 ,1 ')" ];
  "NextExpression" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="NextExpression 1  -> 1  BasicExpression

A BasicExpression has A NextExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one NextExpression.

A NextExpression has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and NextExpression, connected as Pairs.
When a NextExpression is created, its BasicExpression must be created at the same time.
When a NextExpression is deleted, its BasicExpression is deleted at the same time.
" headtooltip="NextExpression 1  -> 1  BasicExpression

A BasicExpression has A NextExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one NextExpression.

A NextExpression has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and NextExpression, connected as Pairs.
When a NextExpression is created, its BasicExpression must be created at the same time.
When a NextExpression is deleted, its BasicExpression is deleted at the same time.
" tailtooltip="NextExpression 1  -> 1  BasicExpression

A BasicExpression has A NextExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one NextExpression.

A NextExpression has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and NextExpression, connected as Pairs.
When a NextExpression is created, its BasicExpression must be created at the same time.
When a NextExpression is deleted, its BasicExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('NextExpression,BasicExpression,1 ,1 ')" ];
  "AssignConstraint" -> "Assign" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1..* ", tooltip="AssignConstraint 1  -> 1..*  Assign

An Assign has An AssignConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssignConstraint.

An AssignConstraint has at least 1 Assign and can never have none. And there is no upper bound defined.

" headtooltip="AssignConstraint 1  -> 1..*  Assign

An Assign has An AssignConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssignConstraint.

An AssignConstraint has at least 1 Assign and can never have none. And there is no upper bound defined.

" tailtooltip="AssignConstraint 1  -> 1..*  Assign

An Assign has An AssignConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssignConstraint.

An AssignConstraint has at least 1 Assign and can never have none. And there is no upper bound defined.

" URL="javascript:Action.selectAssociation('AssignConstraint,Assign,1..* ,1 ')" ];
  "Assign" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="Assign 1  -> 1  BasicExpression

A BasicExpression has An Assign. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Assign.

An Assign has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and Assign, connected as Pairs.
When an Assign is created, its BasicExpression must be created at the same time.
When an Assign is deleted, its BasicExpression is deleted at the same time.
" headtooltip="Assign 1  -> 1  BasicExpression

A BasicExpression has An Assign. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Assign.

An Assign has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and Assign, connected as Pairs.
When an Assign is created, its BasicExpression must be created at the same time.
When an Assign is deleted, its BasicExpression is deleted at the same time.
" tailtooltip="Assign 1  -> 1  BasicExpression

A BasicExpression has An Assign. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Assign.

An Assign has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and Assign, connected as Pairs.
When an Assign is created, its BasicExpression must be created at the same time.
When an Assign is deleted, its BasicExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('Assign,BasicExpression,1 ,1 ')" ];
  "CaseExpression" -> "CaseStatement" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1..* ", tooltip="CaseExpression 1  -> 1..*  CaseStatement

A CaseStatement has A CaseExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseExpression.

A CaseExpression has at least 1 CaseStatement and can never have none. And there is no upper bound defined.

" headtooltip="CaseExpression 1  -> 1..*  CaseStatement

A CaseStatement has A CaseExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseExpression.

A CaseExpression has at least 1 CaseStatement and can never have none. And there is no upper bound defined.

" tailtooltip="CaseExpression 1  -> 1..*  CaseStatement

A CaseStatement has A CaseExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseExpression.

A CaseExpression has at least 1 CaseStatement and can never have none. And there is no upper bound defined.

" URL="javascript:Action.selectAssociation('CaseExpression,CaseStatement,1..* ,1 ')" ];
  "CaseStatement" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="2 ", tooltip="CaseStatement 1  -> 2  BasicExpression

A BasicExpression has A CaseStatement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseStatement.

A CaseStatement has 2 BasicExpressions. 
When a CaseStatement is created, its 2 BasicExpressions must be assigned.

" headtooltip="CaseStatement 1  -> 2  BasicExpression

A BasicExpression has A CaseStatement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseStatement.

A CaseStatement has 2 BasicExpressions. 
When a CaseStatement is created, its 2 BasicExpressions must be assigned.

" tailtooltip="CaseStatement 1  -> 2  BasicExpression

A BasicExpression has A CaseStatement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CaseStatement.

A CaseStatement has 2 BasicExpressions. 
When a CaseStatement is created, its 2 BasicExpressions must be assigned.

" URL="javascript:Action.selectAssociation('CaseStatement,BasicExpression,2 ,1 ')" ];
  "TransConstraint" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="TransConstraint 1  -> 1  BasicExpression

A BasicExpression has A TransConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TransConstraint.

A TransConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and TransConstraint, connected as Pairs.
When a TransConstraint is created, its BasicExpression must be created at the same time.
When a TransConstraint is deleted, its BasicExpression is deleted at the same time.
" headtooltip="TransConstraint 1  -> 1  BasicExpression

A BasicExpression has A TransConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TransConstraint.

A TransConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and TransConstraint, connected as Pairs.
When a TransConstraint is created, its BasicExpression must be created at the same time.
When a TransConstraint is deleted, its BasicExpression is deleted at the same time.
" tailtooltip="TransConstraint 1  -> 1  BasicExpression

A BasicExpression has A TransConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TransConstraint.

A TransConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and TransConstraint, connected as Pairs.
When a TransConstraint is created, its BasicExpression must be created at the same time.
When a TransConstraint is deleted, its BasicExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('TransConstraint,BasicExpression,1 ,1 ')" ];
  "InitConstraint" -> "BasicExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="InitConstraint 1  -> 1  BasicExpression

A BasicExpression has An InitConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InitConstraint.

An InitConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and InitConstraint, connected as Pairs.
When an InitConstraint is created, its BasicExpression must be created at the same time.
When an InitConstraint is deleted, its BasicExpression is deleted at the same time.
" headtooltip="InitConstraint 1  -> 1  BasicExpression

A BasicExpression has An InitConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InitConstraint.

An InitConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and InitConstraint, connected as Pairs.
When an InitConstraint is created, its BasicExpression must be created at the same time.
When an InitConstraint is deleted, its BasicExpression is deleted at the same time.
" tailtooltip="InitConstraint 1  -> 1  BasicExpression

A BasicExpression has An InitConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InitConstraint.

An InitConstraint has A BasicExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one BasicExpression.

There must always be an equal number of BasicExpression and InitConstraint, connected as Pairs.
When an InitConstraint is created, its BasicExpression must be created at the same time.
When an InitConstraint is deleted, its BasicExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('InitConstraint,BasicExpression,1 ,1 ')" ];
  "InvarConstraint" -> "InvarExpression" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="InvarConstraint 1  -> 1  InvarExpression

An InvarExpression has An InvarConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarConstraint.

An InvarConstraint has An InvarExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarExpression.

There must always be an equal number of InvarExpression and InvarConstraint, connected as Pairs.
When an InvarConstraint is created, its InvarExpression must be created at the same time.
When an InvarConstraint is deleted, its InvarExpression is deleted at the same time.
" headtooltip="InvarConstraint 1  -> 1  InvarExpression

An InvarExpression has An InvarConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarConstraint.

An InvarConstraint has An InvarExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarExpression.

There must always be an equal number of InvarExpression and InvarConstraint, connected as Pairs.
When an InvarConstraint is created, its InvarExpression must be created at the same time.
When an InvarConstraint is deleted, its InvarExpression is deleted at the same time.
" tailtooltip="InvarConstraint 1  -> 1  InvarExpression

An InvarExpression has An InvarConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarConstraint.

An InvarConstraint has An InvarExpression. It must always have exactly, one, and can never have none. And there is an upper bound of at most one InvarExpression.

There must always be an equal number of InvarExpression and InvarConstraint, connected as Pairs.
When an InvarConstraint is created, its InvarExpression must be created at the same time.
When an InvarConstraint is deleted, its InvarExpression is deleted at the same time.
" URL="javascript:Action.selectAssociation('InvarConstraint,InvarExpression,1 ,1 ')" ];
  "TargetConfiguration" -> "State" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 greatest_default_state", tooltip="TargetConfiguration 1  -> 1 greatest_default_state State

A State called greatest_default_state has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has A State called greatest_default_state. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called greatest_default_state.

There must always be an equal number of State and TargetConfiguration, connected as Pairs.
When a TargetConfiguration is created, its State must be created at the same time.
When a TargetConfiguration is deleted, its State is deleted at the same time.
" headtooltip="TargetConfiguration 1  -> 1 greatest_default_state State

A State called greatest_default_state has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has A State called greatest_default_state. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called greatest_default_state.

There must always be an equal number of State and TargetConfiguration, connected as Pairs.
When a TargetConfiguration is created, its State must be created at the same time.
When a TargetConfiguration is deleted, its State is deleted at the same time.
" tailtooltip="TargetConfiguration 1  -> 1 greatest_default_state State

A State called greatest_default_state has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has A State called greatest_default_state. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called greatest_default_state.

There must always be an equal number of State and TargetConfiguration, connected as Pairs.
When a TargetConfiguration is created, its State must be created at the same time.
When a TargetConfiguration is deleted, its State is deleted at the same time.
" URL="javascript:Action.selectAssociation('TargetConfiguration,State,1 greatest_default_state,1 ')" ];
  "TargetConfiguration" -> "State" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1..* greatest_descendant_states", tooltip="TargetConfiguration 1  -> 1..* greatest_descendant_states State

A State called greatest_descendant_states has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has at least 1 State called greatest_descendant_states and can never have none. And there is no upper bound defined.

" headtooltip="TargetConfiguration 1  -> 1..* greatest_descendant_states State

A State called greatest_descendant_states has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has at least 1 State called greatest_descendant_states and can never have none. And there is no upper bound defined.

" tailtooltip="TargetConfiguration 1  -> 1..* greatest_descendant_states State

A State called greatest_descendant_states has A TargetConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TargetConfiguration.

A TargetConfiguration has at least 1 State called greatest_descendant_states and can never have none. And there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TargetConfiguration,State,1..* greatest_descendant_states,1 ')" ];
  "ExplorationResult" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="ExplorationResult 1  -> 1  StateMachine

A StateMachine has An ExplorationResult. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ExplorationResult.

An ExplorationResult has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

There must always be an equal number of StateMachine and ExplorationResult, connected as Pairs.
When an ExplorationResult is created, its StateMachine must be created at the same time.
When an ExplorationResult is deleted, its StateMachine is deleted at the same time.
" headtooltip="ExplorationResult 1  -> 1  StateMachine

A StateMachine has An ExplorationResult. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ExplorationResult.

An ExplorationResult has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

There must always be an equal number of StateMachine and ExplorationResult, connected as Pairs.
When an ExplorationResult is created, its StateMachine must be created at the same time.
When an ExplorationResult is deleted, its StateMachine is deleted at the same time.
" tailtooltip="ExplorationResult 1  -> 1  StateMachine

A StateMachine has An ExplorationResult. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ExplorationResult.

An ExplorationResult has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

There must always be an equal number of StateMachine and ExplorationResult, connected as Pairs.
When an ExplorationResult is created, its StateMachine must be created at the same time.
When an ExplorationResult is deleted, its StateMachine is deleted at the same time.
" URL="javascript:Action.selectAssociation('ExplorationResult,StateMachine,1 ,1 ')" ];
  "Hierarchy" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 parentClass", tooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" headtooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" tailtooltip="Hierarchy *  -> 0..1 parentClass UmpleClass

An UmpleClass called parentClass has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies may have an UmpleClass called parentClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Hierarchy,UmpleClass,0..1 parentClass,* ')" ];
  "Hierarchy" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterfaces", tooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" headtooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" tailtooltip="Hierarchy *  -> * parentInterfaces UmpleInterface

An UmpleInterface called parentInterfaces has some Hierarchys called hierarchies. It can have none, and there is no upper bound defined.

A Hierarchy called hierarchies has some UmpleInterfaces called parentInterfaces. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Hierarchy,UmpleInterface,* parentInterfaces,* ')" ];
  "RulePartValue" -> "Position" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="RulePartValue *  -> 0..1  Position

A Position has some RulePartValues. It can have none, and there is no upper bound defined.

A RulePartValue may have a Position. It can have none or just 1. 

" headtooltip="RulePartValue *  -> 0..1  Position

A Position has some RulePartValues. It can have none, and there is no upper bound defined.

A RulePartValue may have a Position. It can have none or just 1. 

" tailtooltip="RulePartValue *  -> 0..1  Position

A Position has some RulePartValues. It can have none, and there is no upper bound defined.

A RulePartValue may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('RulePartValue,Position,0..1 ,* ')" ];
  "StateMachine" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" headtooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" tailtooltip="StateMachine *  -- 0..1  UmpleClass

An UmpleClass has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachine,UmpleClass,0..1 ,* ')" ];
  "StateMachine" -> "UmpleTrait" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" headtooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" tailtooltip="StateMachine *  -- 0..1  UmpleTrait

An UmpleTrait has some StateMachines. It can have none, and there is no upper bound defined.

A StateMachine may have an UmpleTrait. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachine,UmpleTrait,0..1 ,* ')" ];
  "StateMachine" -> "State" [dir="none", taillabel="* nestedStateMachines", headlabel="0..1 parentState", tooltip="StateMachine * nestedStateMachines -- 0..1 parentState State

A State called parentState has some StateMachines called nestedStateMachines. It can have none, and there is no upper bound defined.

A StateMachine called nestedStateMachines may have a State called parentState. It can have none or just 1. 

" headtooltip="StateMachine * nestedStateMachines -- 0..1 parentState State

A State called parentState has some StateMachines called nestedStateMachines. It can have none, and there is no upper bound defined.

A StateMachine called nestedStateMachines may have a State called parentState. It can have none or just 1. 

" tailtooltip="StateMachine * nestedStateMachines -- 0..1 parentState State

A State called parentState has some StateMachines called nestedStateMachines. It can have none, and there is no upper bound defined.

A StateMachine called nestedStateMachines may have a State called parentState. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachine,State,0..1 parentState,* nestedStateMachines')" ];
  "StateMachine" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" headtooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" tailtooltip="StateMachine 1  -> *  ReqImplementation

A ReqImplementation has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

A StateMachine has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its StateMachine must be assigned.
When a ReqImplementation is deleted, its StateMachine is not deleted and its list of ReqImplementations is decreased.
When a StateMachine is deleted, its ReqImplementations are not deleted. They are assigned to another StateMachine.
" URL="javascript:Action.selectAssociation('StateMachine,ReqImplementation,* ,1 ')" ];
  "State" -> "Activity" [dir="none", taillabel="1 ", headlabel="* ", tooltip="State 1  -- *  Activity

An Activity called activities has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some Activitys called activities. It can have none, and there is no upper bound defined.

When an Activity is created, its State must be assigned.
When an Activity is deleted, its State is not deleted and its list of Activitys is decreased.
When a State is deleted, its Activitys are not deleted. They are assigned to another State.
" headtooltip="State 1  -- *  Activity

An Activity called activities has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some Activitys called activities. It can have none, and there is no upper bound defined.

When an Activity is created, its State must be assigned.
When an Activity is deleted, its State is not deleted and its list of Activitys is decreased.
When a State is deleted, its Activitys are not deleted. They are assigned to another State.
" tailtooltip="State 1  -- *  Activity

An Activity called activities has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some Activitys called activities. It can have none, and there is no upper bound defined.

When an Activity is created, its State must be assigned.
When an Activity is deleted, its State is not deleted and its list of Activitys is decreased.
When a State is deleted, its Activitys are not deleted. They are assigned to another State.
" URL="javascript:Action.selectAssociation('State,Activity,* ,1 ')" ];
  "State" -> "Action" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="State 0..1  -> *  Action

An Action may have a State. It can have none or just 1. 

A State has some Actions. It can have none, and there is no upper bound defined.

" headtooltip="State 0..1  -> *  Action

An Action may have a State. It can have none or just 1. 

A State has some Actions. It can have none, and there is no upper bound defined.

" tailtooltip="State 0..1  -> *  Action

An Action may have a State. It can have none or just 1. 

A State has some Actions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('State,Action,* ,0..1 ')" ];
  "State" -> "StateMachine" [dir="none", taillabel="* ", headlabel="1 ", tooltip="State *  -- 1  StateMachine

A StateMachine has some States. It can have none, and there is no upper bound defined.

A State has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

When a State is created, its StateMachine must be assigned.
When a State is deleted, its StateMachine is not deleted and its list of States is decreased.
When a StateMachine is deleted, its States are not deleted. They are assigned to another StateMachine.
" headtooltip="State *  -- 1  StateMachine

A StateMachine has some States. It can have none, and there is no upper bound defined.

A State has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

When a State is created, its StateMachine must be assigned.
When a State is deleted, its StateMachine is not deleted and its list of States is decreased.
When a StateMachine is deleted, its States are not deleted. They are assigned to another StateMachine.
" tailtooltip="State *  -- 1  StateMachine

A StateMachine has some States. It can have none, and there is no upper bound defined.

A State has A StateMachine. It must always have exactly, one, and can never have none. And there is an upper bound of at most one StateMachine.

When a State is created, its StateMachine must be assigned.
When a State is deleted, its StateMachine is not deleted and its list of States is decreased.
When a StateMachine is deleted, its States are not deleted. They are assigned to another StateMachine.
" URL="javascript:Action.selectAssociation('State,StateMachine,1 ,* ')" ];
  "State" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="State 1  -> *  ReqImplementation

A ReqImplementation has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its State must be assigned.
When a ReqImplementation is deleted, its State is not deleted and its list of ReqImplementations is decreased.
When a State is deleted, its ReqImplementations are not deleted. They are assigned to another State.
" headtooltip="State 1  -> *  ReqImplementation

A ReqImplementation has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its State must be assigned.
When a ReqImplementation is deleted, its State is not deleted and its list of ReqImplementations is decreased.
When a State is deleted, its ReqImplementations are not deleted. They are assigned to another State.
" tailtooltip="State 1  -> *  ReqImplementation

A ReqImplementation has A State. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State.

A State has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its State must be assigned.
When a ReqImplementation is deleted, its State is not deleted and its list of ReqImplementations is decreased.
When a State is deleted, its ReqImplementations are not deleted. They are assigned to another State.
" URL="javascript:Action.selectAssociation('State,ReqImplementation,* ,1 ')" ];
  "Activity" -> "Event" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 onCompletionEvent", tooltip="Activity *  -> 0..1 onCompletionEvent Event

An Event called onCompletionEvent has some Activitys called activities. It can have none, and there is no upper bound defined.

An Activity called activities may have an Event called onCompletionEvent. It can have none or just 1. 

" headtooltip="Activity *  -> 0..1 onCompletionEvent Event

An Event called onCompletionEvent has some Activitys called activities. It can have none, and there is no upper bound defined.

An Activity called activities may have an Event called onCompletionEvent. It can have none or just 1. 

" tailtooltip="Activity *  -> 0..1 onCompletionEvent Event

An Event called onCompletionEvent has some Activitys called activities. It can have none, and there is no upper bound defined.

An Activity called activities may have an Event called onCompletionEvent. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Activity,Event,0..1 onCompletionEvent,* ')" ];
  "Transition" -> "Event" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Transition *  -> 0..1  Event

An Event has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have an Event. It can have none or just 1. 

" headtooltip="Transition *  -> 0..1  Event

An Event has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have an Event. It can have none or just 1. 

" tailtooltip="Transition *  -> 0..1  Event

An Event has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have an Event. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Transition,Event,0..1 ,* ')" ];
  "Transition" -> "State" [dir="none", taillabel="* ", headlabel="1 fromState", tooltip="Transition *  -- 1 fromState State

A State called fromState has some Transitions. It can have none, and there is no upper bound defined.

A Transition has A State called fromState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called fromState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" headtooltip="Transition *  -- 1 fromState State

A State called fromState has some Transitions. It can have none, and there is no upper bound defined.

A Transition has A State called fromState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called fromState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" tailtooltip="Transition *  -- 1 fromState State

A State called fromState has some Transitions. It can have none, and there is no upper bound defined.

A Transition has A State called fromState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called fromState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" URL="javascript:Action.selectAssociation('Transition,State,1 fromState,* ')" ];
  "Transition" -> "State" [dir="none", taillabel="* nextTransition", headlabel="1 nextState", tooltip="Transition * nextTransition -- 1 nextState State

A State called nextState has some Transitions called nextTransition. It can have none, and there is no upper bound defined.

A Transition called nextTransition has A State called nextState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called nextState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" headtooltip="Transition * nextTransition -- 1 nextState State

A State called nextState has some Transitions called nextTransition. It can have none, and there is no upper bound defined.

A Transition called nextTransition has A State called nextState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called nextState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" tailtooltip="Transition * nextTransition -- 1 nextState State

A State called nextState has some Transitions called nextTransition. It can have none, and there is no upper bound defined.

A Transition called nextTransition has A State called nextState. It must always have exactly, one, and can never have none. And there is an upper bound of at most one State called nextState.

When a Transition is created, its State must be assigned.
When a Transition is deleted, its State is not deleted and its list of Transitions is decreased.
When a State is deleted, its Transitions are not deleted. They are assigned to another State.
" URL="javascript:Action.selectAssociation('Transition,State,1 nextState,* nextTransition')" ];
  "Transition" -> "Guard" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Transition *  -> 0..1  Guard

A Guard has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have a Guard. It can have none or just 1. 

" headtooltip="Transition *  -> 0..1  Guard

A Guard has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have a Guard. It can have none or just 1. 

" tailtooltip="Transition *  -> 0..1  Guard

A Guard has some Transitions. It can have none, and there is no upper bound defined.

A Transition may have a Guard. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Transition,Guard,0..1 ,* ')" ];
  "Transition" -> "Action" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 ", tooltip="Transition 0..1  -> 0..1  Action

An Action may have a Transition. It can have none or just 1. 

A Transition may have an Action. It can have none or just 1. 

" headtooltip="Transition 0..1  -> 0..1  Action

An Action may have a Transition. It can have none or just 1. 

A Transition may have an Action. It can have none or just 1. 

" tailtooltip="Transition 0..1  -> 0..1  Action

An Action may have a Transition. It can have none or just 1. 

A Transition may have an Action. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Transition,Action,0..1 ,0..1 ')" ];
  "Event" -> "MethodParameter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* params", tooltip="Event 1  -> * params MethodParameter

A MethodParameter called params has An Event. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Event.

An Event has some MethodParameters called params. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Event must be assigned.
When a MethodParameter is deleted, its Event is not deleted and its list of MethodParameters is decreased.
When an Event is deleted, its MethodParameters are not deleted. They are assigned to another Event.
" headtooltip="Event 1  -> * params MethodParameter

A MethodParameter called params has An Event. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Event.

An Event has some MethodParameters called params. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Event must be assigned.
When a MethodParameter is deleted, its Event is not deleted and its list of MethodParameters is decreased.
When an Event is deleted, its MethodParameters are not deleted. They are assigned to another Event.
" tailtooltip="Event 1  -> * params MethodParameter

A MethodParameter called params has An Event. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Event.

An Event has some MethodParameters called params. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Event must be assigned.
When a MethodParameter is deleted, its Event is not deleted and its list of MethodParameters is decreased.
When an Event is deleted, its MethodParameters are not deleted. They are assigned to another Event.
" URL="javascript:Action.selectAssociation('Event,MethodParameter,* params,1 ')" ];
  "UmpleElement" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* positions", tooltip="UmpleElement 1  -> * positions Position

A Position has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" headtooltip="UmpleElement 1  -> * positions Position

A Position has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" tailtooltip="UmpleElement 1  -> * positions Position

A Position has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" URL="javascript:Action.selectAssociation('UmpleElement,Position,* positions,1 ')" ];
  "UmpleElement" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* endPositions", tooltip="UmpleElement 1  -> * endPositions Position

A Position called endPositions has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions called endPositions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" headtooltip="UmpleElement 1  -> * endPositions Position

A Position called endPositions has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions called endPositions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" tailtooltip="UmpleElement 1  -> * endPositions Position

A Position called endPositions has An UmpleElement. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleElement.

An UmpleElement has some Positions called endPositions. It can have none, and there is no upper bound defined.

When a Position is created, its UmpleElement must be assigned.
When a Position is deleted, its UmpleElement is not deleted and its list of Positions is decreased.
When an UmpleElement is deleted, its Positions are not deleted. They are assigned to another UmpleElement.
" URL="javascript:Action.selectAssociation('UmpleElement,Position,* endPositions,1 ')" ];
  "UmpleClassifier" -> "Method" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="UmpleClassifier 1  -> *  Method

A Method has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Methods. It can have none, and there is no upper bound defined.

When a Method is created, its UmpleClassifier must be assigned.
When a Method is deleted, its UmpleClassifier is not deleted and its list of Methods is decreased.
When an UmpleClassifier is deleted, its Methods are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('UmpleClassifier,Method,* ,1 ')" ];
  "UmpleClassifier" -> "Depend" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="UmpleClassifier *  -> *  Depend

A Depend has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier has some Depends. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClassifier *  -> *  Depend

A Depend has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier has some Depends. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClassifier *  -> *  Depend

A Depend has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier has some Depends. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClassifier,Depend,* ,* ')" ];
  "UmpleClassifier" -> "Constant" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClassifier 1  -> *  Constant

A Constant has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Constants. It can have none, and there is no upper bound defined.

When a Constant is created, its UmpleClassifier must be assigned.
When a Constant is deleted, its UmpleClassifier is not deleted and its list of Constants is decreased.
When an UmpleClassifier is deleted, its Constants are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="UmpleClassifier 1  -> *  Constant

A Constant has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Constants. It can have none, and there is no upper bound defined.

When a Constant is created, its UmpleClassifier must be assigned.
When a Constant is deleted, its UmpleClassifier is not deleted and its list of Constants is decreased.
When an UmpleClassifier is deleted, its Constants are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="UmpleClassifier 1  -> *  Constant

A Constant has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some Constants. It can have none, and there is no upper bound defined.

When a Constant is created, its UmpleClassifier must be assigned.
When a Constant is deleted, its UmpleClassifier is not deleted and its list of Constants is decreased.
When an UmpleClassifier is deleted, its Constants are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('UmpleClassifier,Constant,* ,1 ')" ];
  "UmpleClassifier" -> "ModelConstraint" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClassifier 1  -> *  ModelConstraint

A ModelConstraint has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some ModelConstraints. It can have none, and there is no upper bound defined.

When a ModelConstraint is created, its UmpleClassifier must be assigned.
When a ModelConstraint is deleted, its UmpleClassifier is not deleted and its list of ModelConstraints is decreased.
When an UmpleClassifier is deleted, its ModelConstraints are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="UmpleClassifier 1  -> *  ModelConstraint

A ModelConstraint has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some ModelConstraints. It can have none, and there is no upper bound defined.

When a ModelConstraint is created, its UmpleClassifier must be assigned.
When a ModelConstraint is deleted, its UmpleClassifier is not deleted and its list of ModelConstraints is decreased.
When an UmpleClassifier is deleted, its ModelConstraints are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="UmpleClassifier 1  -> *  ModelConstraint

A ModelConstraint has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

An UmpleClassifier has some ModelConstraints. It can have none, and there is no upper bound defined.

When a ModelConstraint is created, its UmpleClassifier must be assigned.
When a ModelConstraint is deleted, its UmpleClassifier is not deleted and its list of ModelConstraints is decreased.
When an UmpleClassifier is deleted, its ModelConstraints are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('UmpleClassifier,ModelConstraint,* ,1 ')" ];
  "UmpleClassifier" -> "Token" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 extendsToken", tooltip="UmpleClassifier *  -> 0..1 extendsToken Token

A Token called extendsToken has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier may have a Token called extendsToken. It can have none or just 1. 

" headtooltip="UmpleClassifier *  -> 0..1 extendsToken Token

A Token called extendsToken has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier may have a Token called extendsToken. It can have none or just 1. 

" tailtooltip="UmpleClassifier *  -> 0..1 extendsToken Token

A Token called extendsToken has some UmpleClassifiers. It can have none, and there is no upper bound defined.

An UmpleClassifier may have a Token called extendsToken. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleClassifier,Token,0..1 extendsToken,* ')" ];
  "UmpleClass" -> "Method" [dir="none", taillabel="0..1 ", headlabel="* stateDependentMethods", tooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- * stateDependentMethods Method

A Method called stateDependentMethods may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Methods called stateDependentMethods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,Method,* stateDependentMethods,0..1 ')" ];
  "UmpleClass" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  CodeInjection

A CodeInjection has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleClass must be assigned.
When a CodeInjection is deleted, its UmpleClass is not deleted and its list of CodeInjections is decreased.
When an UmpleClass is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,CodeInjection,* ,1 ')" ];
  "UmpleClass" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleClass must be assigned.
When an UmpleEnumeration is deleted, its UmpleClass is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleClass is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,UmpleEnumeration,* enums,1 ')" ];
  "UmpleClass" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * preConds Precondition

A Precondition called preConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleClass must be assigned.
When a Precondition is deleted, its UmpleClass is not deleted and its list of Preconditions is decreased.
When an UmpleClass is deleted, its Preconditions are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Precondition,* preConds,1 ')" ];
  "UmpleClass" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleClass must be assigned.
When a Postcondition is deleted, its UmpleClass is not deleted and its list of Postconditions is decreased.
When an UmpleClass is deleted, its Postconditions are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Postcondition,* postConds,1 ')" ];
  "UmpleClass" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTestCase,* ,0..1 ')" ];
  "UmpleClass" -> "TestSequence" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TestSequence

A TestSequence may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestSequences. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TestSequence,* ,0..1 ')" ];
  "UmpleClass" -> "TestInit" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TestInit

A TestInit may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TestInits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TestInit,* ,0..1 ')" ];
  "UmpleClass" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uClass", headlabel="* ", tooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1 uClass -> *  ConstraintTree

A ConstraintTree has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

An UmpleClass called uClass has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleClass must be assigned.
When a ConstraintTree is deleted, its UmpleClass is not deleted and its list of ConstraintTrees is decreased.
When an UmpleClass is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,ConstraintTree,* ,1 uClass')" ];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="* subclasses", headlabel="0..1 extendsClass", tooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" headtooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" tailtooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass

An UmpleClass called extendsClass has some UmpleClasss called subclasses. It can have none, and there is no upper bound defined.

An UmpleClass called subclasses may have an UmpleClass called extendsClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleClass,0..1 extendsClass,* subclasses')" ];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="0..1 outerClass", headlabel="* innerClasses", tooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1 outerClass -- * innerClasses UmpleClass

An UmpleClass called innerClasses may have an UmpleClass called outerClass. It can have none or just 1. 

An UmpleClass called outerClass has some UmpleClasss called innerClasses. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleClass,* innerClasses,0..1 outerClass')" ];
  "UmpleClass" -> "UmpleTrait" [dir="none", taillabel="* subClasses", headlabel="* extendsTraits", tooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTrait,* extendsTraits,* subClasses')" ];
  "UmpleClass" -> "UmpleTemplate" [dir="none", taillabel="* subClasses", headlabel="* extendsTemplates", tooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate

An UmpleTemplate called extendsTemplates has some UmpleClasss called subClasses. It can have none, and there is no upper bound defined.

An UmpleClass called subClasses has some UmpleTemplates called extendsTemplates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleTemplate,* extendsTemplates,* subClasses')" ];
  "UmpleClass" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterface", tooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass *  -> * parentInterface UmpleInterface

An UmpleInterface called parentInterface has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

An UmpleClass called umpleClasses has some UmpleInterfaces called parentInterface. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,UmpleInterface,* parentInterface,* ')" ];
  "UmpleClass" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" headtooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" tailtooltip="UmpleClass 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass may have an UniqueIdentifier. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleClass,UniqueIdentifier,0..1 ,1 ')" ];
  "UmpleClass" -> "Attribute" [dir="none", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -- *  Attribute

An Attribute has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Attributes. It can have none, and there is no upper bound defined.

When an Attribute is created, its UmpleClass must be assigned.
When an Attribute is deleted, its UmpleClass is not deleted and its list of Attributes is decreased.
When an UmpleClass is deleted, its Attributes are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Attribute,* ,1 ')" ];
  "UmpleClass" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some AssociationVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,AssociationVariable,* ,0..1 ')" ];
  "UmpleClass" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  Comment

A Comment has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleClass must be assigned.
When a Comment is deleted, its UmpleClass is not deleted and its list of Comments is decreased.
When an UmpleClass is deleted, its Comments are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,Comment,* ,1 ')" ];
  "UmpleClass" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  ReqImplementation

A ReqImplementation has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleClass must be assigned.
When a ReqImplementation is deleted, its UmpleClass is not deleted and its list of ReqImplementations is decreased.
When an UmpleClass is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,ReqImplementation,* ,1 ')" ];
  "UmpleClass" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" headtooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" tailtooltip="UmpleClass 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass.

An UmpleClass has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleClass must be assigned.
When a GeneralTPApplied is deleted, its UmpleClass is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleClass is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleClass.
" URL="javascript:Action.selectAssociation('UmpleClass,GeneralTPApplied,* ,1 ')" ];
  "UmpleClass" -> "TraceDirective" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TraceDirective

A TraceDirective may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceDirectives. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TraceDirective,* ,0..1 ')" ];
  "UmpleClass" -> "TraceCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TraceCase

A TraceCase may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TraceCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TraceCase,* ,0..1 ')" ];
  "UmpleClass" -> "Port" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  Port

A Port may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some Ports. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,Port,* ,0..1 ')" ];
  "UmpleClass" -> "ActiveMethod" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  ActiveMethod

An ActiveMethod may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some ActiveMethods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,ActiveMethod,* ,0..1 ')" ];
  "UmpleClass" -> "PortBinding" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  PortBinding

A PortBinding may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some PortBindings. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,PortBinding,* ,0..1 ')" ];
  "UmpleClass" -> "TemplateField" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" headtooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleClass 0..1  -- *  TemplateField

A TemplateField may have an UmpleClass. It can have none or just 1. 

An UmpleClass has some TemplateFields. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleClass,TemplateField,* ,0..1 ')" ];
  "UmpleModel" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* reqImplementations", tooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" headtooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleModel *  -> * reqImplementations ReqImplementation

A ReqImplementation has some UmpleModels. It can have none, and there is no upper bound defined.

An UmpleModel has some ReqImplementations. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleModel,ReqImplementation,* reqImplementations,* ')" ];
  "UmpleModel" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> * enums UmpleEnumeration

An UmpleEnumeration called enums has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleEnumerations called enums. It can have none, and there is no upper bound defined.

When an UmpleEnumeration is created, its UmpleModel must be assigned.
When an UmpleEnumeration is deleted, its UmpleModel is not deleted and its list of UmpleEnumerations is decreased.
When an UmpleModel is deleted, its UmpleEnumerations are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleEnumeration,* enums,1 ')" ];
  "UmpleModel" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  Association

An Association has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Associations. It can have none, and there is no upper bound defined.

When an Association is created, its UmpleModel must be assigned.
When an Association is deleted, its UmpleModel is not deleted and its list of Associations is decreased.
When an UmpleModel is deleted, its Associations are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,Association,* ,1 ')" ];
  "UmpleModel" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleClass

An UmpleClass called umpleClasses has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleClasss called umpleClasses. It can have none, and there is no upper bound defined.

When an UmpleClass is created, its UmpleModel must be assigned.
When an UmpleClass is deleted, its UmpleModel is not deleted and its list of UmpleClasss is decreased.
When an UmpleModel is deleted, its UmpleClasss are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleClass,* ,1 ')" ];
  "UmpleModel" -> "UmpleTrait" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleTrait

An UmpleTrait has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleTraits. It can have none, and there is no upper bound defined.

When an UmpleTrait is created, its UmpleModel must be assigned.
When an UmpleTrait is deleted, its UmpleModel is not deleted and its list of UmpleTraits is decreased.
When an UmpleModel is deleted, its UmpleTraits are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleTrait,* ,1 ')" ];
  "UmpleModel" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* stateMachineDefinitions", tooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine

A StateMachine called stateMachineDefinitions has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some StateMachines called stateMachineDefinitions. It can have none, and there is no upper bound defined.

When a StateMachine is created, its UmpleModel must be assigned.
When a StateMachine is deleted, its UmpleModel is not deleted and its list of StateMachines is decreased.
When an UmpleModel is deleted, its StateMachines are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,StateMachine,* stateMachineDefinitions,1 ')" ];
  "UmpleModel" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  UmpleInterface

An UmpleInterface has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some UmpleInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleModel must be assigned.
When an UmpleInterface is deleted, its UmpleModel is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleModel is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,UmpleInterface,* ,1 ')" ];
  "UmpleModel" -> "MixsetOrFile" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" headtooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleModel 0..1  -- *  MixsetOrFile

A MixsetOrFile may have an UmpleModel. It can have none or just 1. 

An UmpleModel has some MixsetOrFiles. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleModel,MixsetOrFile,* ,0..1 ')" ];
  "UmpleModel" -> "FeatureModel" [dir="none", taillabel="0..1 ", headlabel="0..1 ", tooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" headtooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" tailtooltip="UmpleModel 0..1  -- 0..1  FeatureModel

A FeatureModel may have an UmpleModel. It can have none or just 1. 

An UmpleModel may have a FeatureModel. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleModel,FeatureModel,0..1 ,0..1 ')" ];
  "UmpleModel" -> "Filter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" headtooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" tailtooltip="UmpleModel 1  -> *  Filter

A Filter has An UmpleModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel.

An UmpleModel has some Filters. It can have none, and there is no upper bound defined.

When a Filter is created, its UmpleModel must be assigned.
When a Filter is deleted, its UmpleModel is not deleted and its list of Filters is decreased.
When an UmpleModel is deleted, its Filters are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('UmpleModel,Filter,* ,1 ')" ];
  "Method" -> "MethodParameter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  MethodParameter

A MethodParameter has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Method must be assigned.
When a MethodParameter is deleted, its Method is not deleted and its list of MethodParameters is decreased.
When a Method is deleted, its MethodParameters are not deleted. They are assigned to another Method.
" headtooltip="Method 1  -> *  MethodParameter

A MethodParameter has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Method must be assigned.
When a MethodParameter is deleted, its Method is not deleted and its list of MethodParameters is decreased.
When a Method is deleted, its MethodParameters are not deleted. They are assigned to another Method.
" tailtooltip="Method 1  -> *  MethodParameter

A MethodParameter has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its Method must be assigned.
When a MethodParameter is deleted, its Method is not deleted and its list of MethodParameters is decreased.
When a Method is deleted, its MethodParameters are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Method,MethodParameter,* ,1 ')" ];
  "Method" -> "MethodBody" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="Method 1  -> 0..1  MethodBody

A MethodBody has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method may have a MethodBody. It can have none or just 1. 

" headtooltip="Method 1  -> 0..1  MethodBody

A MethodBody has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method may have a MethodBody. It can have none or just 1. 

" tailtooltip="Method 1  -> 0..1  MethodBody

A MethodBody has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method may have a MethodBody. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Method,MethodBody,0..1 ,1 ')" ];
  "Method" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" headtooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" tailtooltip="Method 1  -> *  Comment

A Comment has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Method must be assigned.
When a Comment is deleted, its Method is not deleted and its list of Comments is decreased.
When a Method is deleted, its Comments are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Method,Comment,* ,1 ')" ];
  "Method" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" headtooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" tailtooltip="Method 1  -> *  ReqImplementation

A ReqImplementation has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

A Method has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Method must be assigned.
When a ReqImplementation is deleted, its Method is not deleted and its list of ReqImplementations is decreased.
When a Method is deleted, its ReqImplementations are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Method,ReqImplementation,* ,1 ')" ];
  "MethodBody" -> "UmpleAssertion" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="MethodBody 1  -> *  UmpleAssertion

An UmpleAssertion has A MethodBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodBody.

A MethodBody has some UmpleAssertions. It can have none, and there is no upper bound defined.

When an UmpleAssertion is created, its MethodBody must be assigned.
When an UmpleAssertion is deleted, its MethodBody is not deleted and its list of UmpleAssertions is decreased.
When a MethodBody is deleted, its UmpleAssertions are not deleted. They are assigned to another MethodBody.
" headtooltip="MethodBody 1  -> *  UmpleAssertion

An UmpleAssertion has A MethodBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodBody.

A MethodBody has some UmpleAssertions. It can have none, and there is no upper bound defined.

When an UmpleAssertion is created, its MethodBody must be assigned.
When an UmpleAssertion is deleted, its MethodBody is not deleted and its list of UmpleAssertions is decreased.
When a MethodBody is deleted, its UmpleAssertions are not deleted. They are assigned to another MethodBody.
" tailtooltip="MethodBody 1  -> *  UmpleAssertion

An UmpleAssertion has A MethodBody. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodBody.

A MethodBody has some UmpleAssertions. It can have none, and there is no upper bound defined.

When an UmpleAssertion is created, its MethodBody must be assigned.
When an UmpleAssertion is deleted, its MethodBody is not deleted and its list of UmpleAssertions is decreased.
When a MethodBody is deleted, its UmpleAssertions are not deleted. They are assigned to another MethodBody.
" URL="javascript:Action.selectAssociation('MethodBody,UmpleAssertion,* ,1 ')" ];
  "MethodBody" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="MethodBody 0..1  -- *  UmpleTestCase

An UmpleTestCase may have a MethodBody. It can have none or just 1. 

A MethodBody has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="MethodBody 0..1  -- *  UmpleTestCase

An UmpleTestCase may have a MethodBody. It can have none or just 1. 

A MethodBody has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="MethodBody 0..1  -- *  UmpleTestCase

An UmpleTestCase may have a MethodBody. It can have none or just 1. 

A MethodBody has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('MethodBody,UmpleTestCase,* ,0..1 ')" ];
  "MethodBody" -> "MixsetInMethod" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="MethodBody 0..1  -- *  MixsetInMethod

A MixsetInMethod may have a MethodBody. It can have none or just 1. 

A MethodBody has some MixsetInMethods. It can have none, and there is no upper bound defined.

" headtooltip="MethodBody 0..1  -- *  MixsetInMethod

A MixsetInMethod may have a MethodBody. It can have none or just 1. 

A MethodBody has some MixsetInMethods. It can have none, and there is no upper bound defined.

" tailtooltip="MethodBody 0..1  -- *  MixsetInMethod

A MixsetInMethod may have a MethodBody. It can have none or just 1. 

A MethodBody has some MixsetInMethods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('MethodBody,MixsetInMethod,* ,0..1 ')" ];
  "UmpleTestCase" -> "UmpleAssertion" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTestCase 0..1  -- *  UmpleAssertion

An UmpleAssertion may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some UmpleAssertions. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTestCase 0..1  -- *  UmpleAssertion

An UmpleAssertion may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some UmpleAssertions. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTestCase 0..1  -- *  UmpleAssertion

An UmpleAssertion may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some UmpleAssertions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTestCase,UmpleAssertion,* ,0..1 ')" ];
  "UmpleTestCase" -> "TestAction" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTestCase 0..1  -- *  TestAction

A TestAction may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestActions. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTestCase 0..1  -- *  TestAction

A TestAction may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestActions. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTestCase 0..1  -- *  TestAction

A TestAction may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestActions. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTestCase,TestAction,* ,0..1 ')" ];
  "UmpleTestCase" -> "TestInit" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTestCase 0..1  -- *  TestInit

A TestInit may have an UmpleTestCase. It can have none or just 1. 

An UmpleTestCase has some TestInits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTestCase,TestInit,* ,0..1 ')" ];
  "TestInit" -> "TestParameter" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="TestInit 0..1  -- *  TestParameter

A TestParameter may have a TestInit. It can have none or just 1. 

A TestInit has some TestParameters. It can have none, and there is no upper bound defined.

" headtooltip="TestInit 0..1  -- *  TestParameter

A TestParameter may have a TestInit. It can have none or just 1. 

A TestInit has some TestParameters. It can have none, and there is no upper bound defined.

" tailtooltip="TestInit 0..1  -- *  TestParameter

A TestParameter may have a TestInit. It can have none or just 1. 

A TestInit has some TestParameters. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TestInit,TestParameter,* ,0..1 ')" ];
  "TraceConstraint" -> "UmpleVariable" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* variables", tooltip="TraceConstraint 1  -> * variables UmpleVariable

An UmpleVariable called variables has A TraceConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceConstraint.

A TraceConstraint has some UmpleVariables called variables. It can have none, and there is no upper bound defined.

When an UmpleVariable is created, its TraceConstraint must be assigned.
When an UmpleVariable is deleted, its TraceConstraint is not deleted and its list of UmpleVariables is decreased.
When a TraceConstraint is deleted, its UmpleVariables are not deleted. They are assigned to another TraceConstraint.
" headtooltip="TraceConstraint 1  -> * variables UmpleVariable

An UmpleVariable called variables has A TraceConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceConstraint.

A TraceConstraint has some UmpleVariables called variables. It can have none, and there is no upper bound defined.

When an UmpleVariable is created, its TraceConstraint must be assigned.
When an UmpleVariable is deleted, its TraceConstraint is not deleted and its list of UmpleVariables is decreased.
When a TraceConstraint is deleted, its UmpleVariables are not deleted. They are assigned to another TraceConstraint.
" tailtooltip="TraceConstraint 1  -> * variables UmpleVariable

An UmpleVariable called variables has A TraceConstraint. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceConstraint.

A TraceConstraint has some UmpleVariables called variables. It can have none, and there is no upper bound defined.

When an UmpleVariable is created, its TraceConstraint must be assigned.
When an UmpleVariable is deleted, its TraceConstraint is not deleted and its list of UmpleVariables is decreased.
When a TraceConstraint is deleted, its UmpleVariables are not deleted. They are assigned to another TraceConstraint.
" URL="javascript:Action.selectAssociation('TraceConstraint,UmpleVariable,* variables,1 ')" ];
  "Precondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" headtooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" tailtooltip="Precondition *  -> 1  Method

A Method has some Preconditions. It can have none, and there is no upper bound defined.

A Precondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Precondition is created, its Method must be assigned.
When a Precondition is deleted, its Method is not deleted and its list of Preconditions is decreased.
When a Method is deleted, its Preconditions are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Precondition,Method,1 ,* ')" ];
  "Postcondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" headtooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" tailtooltip="Postcondition *  -> 1  Method

A Method has some Postconditions. It can have none, and there is no upper bound defined.

A Postcondition has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

When a Postcondition is created, its Method must be assigned.
When a Postcondition is deleted, its Method is not deleted and its list of Postconditions is decreased.
When a Method is deleted, its Postconditions are not deleted. They are assigned to another Method.
" URL="javascript:Action.selectAssociation('Postcondition,Method,1 ,* ')" ];
  "CodeInjection" -> "UmpleClassifier" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" headtooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" tailtooltip="CodeInjection *  -> 1  UmpleClassifier

An UmpleClassifier has some CodeInjections. It can have none, and there is no upper bound defined.

A CodeInjection has An UmpleClassifier. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClassifier.

When a CodeInjection is created, its UmpleClassifier must be assigned.
When a CodeInjection is deleted, its UmpleClassifier is not deleted and its list of CodeInjections is decreased.
When an UmpleClassifier is deleted, its CodeInjections are not deleted. They are assigned to another UmpleClassifier.
" URL="javascript:Action.selectAssociation('CodeInjection,UmpleClassifier,1 ,* ')" ];
  "CodeInjection" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" headtooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" tailtooltip="CodeInjection 1  -> 0..1  ConstraintTree

A ConstraintTree has A CodeInjection. It must always have exactly, one, and can never have none. And there is an upper bound of at most one CodeInjection.

A CodeInjection may have a ConstraintTree. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('CodeInjection,ConstraintTree,0..1 ,1 ')" ];
  "UmpleEnumeration" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleEnumeration 1  -> 0..1  Position

A Position has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration may have a Position. It can have none or just 1. 

" headtooltip="UmpleEnumeration 1  -> 0..1  Position

A Position has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration may have a Position. It can have none or just 1. 

" tailtooltip="UmpleEnumeration 1  -> 0..1  Position

A Position has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleEnumeration,Position,0..1 ,1 ')" ];
  "UmpleEnumeration" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" headtooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" tailtooltip="UmpleEnumeration 1  -> *  ReqImplementation

A ReqImplementation has An UmpleEnumeration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleEnumeration.

An UmpleEnumeration has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleEnumeration must be assigned.
When a ReqImplementation is deleted, its UmpleEnumeration is not deleted and its list of ReqImplementations is decreased.
When an UmpleEnumeration is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleEnumeration.
" URL="javascript:Action.selectAssociation('UmpleEnumeration,ReqImplementation,* ,1 ')" ];
  "UmpleInterface" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* extendsInterface", tooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" headtooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleInterface *  -> * extendsInterface UmpleInterface

An UmpleInterface called extendsInterface has some UmpleInterfaces. It can have none, and there is no upper bound defined.

An UmpleInterface has some UmpleInterfaces called extendsInterface. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleInterface,UmpleInterface,* extendsInterface,* ')" ];
  "UmpleInterface" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" headtooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" tailtooltip="UmpleInterface 1  -> *  Comment

A Comment has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleInterface must be assigned.
When a Comment is deleted, its UmpleInterface is not deleted and its list of Comments is decreased.
When an UmpleInterface is deleted, its Comments are not deleted. They are assigned to another UmpleInterface.
" URL="javascript:Action.selectAssociation('UmpleInterface,Comment,* ,1 ')" ];
  "UmpleInterface" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" headtooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" tailtooltip="UmpleInterface 1  -> *  ReqImplementation

A ReqImplementation has An UmpleInterface. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInterface.

An UmpleInterface has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleInterface must be assigned.
When a ReqImplementation is deleted, its UmpleInterface is not deleted and its list of ReqImplementations is decreased.
When an UmpleInterface is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleInterface.
" URL="javascript:Action.selectAssociation('UmpleInterface,ReqImplementation,* ,1 ')" ];
  "UmpleInterface" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleInterface 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleInterface. It can have none or just 1. 

An UmpleInterface has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleInterface,UmpleTestCase,* ,0..1 ')" ];
  "UmpleTrait" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  CodeInjection

A CodeInjection has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some CodeInjections. It can have none, and there is no upper bound defined.

When a CodeInjection is created, its UmpleTrait must be assigned.
When a CodeInjection is deleted, its UmpleTrait is not deleted and its list of CodeInjections is decreased.
When an UmpleTrait is deleted, its CodeInjections are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,CodeInjection,* ,1 ')" ];
  "UmpleTrait" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * preConds Precondition

A Precondition called preConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Preconditions called preConds. It can have none, and there is no upper bound defined.

When a Precondition is created, its UmpleTrait must be assigned.
When a Precondition is deleted, its UmpleTrait is not deleted and its list of Preconditions is decreased.
When an UmpleTrait is deleted, its Preconditions are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Precondition,* preConds,1 ')" ];
  "UmpleTrait" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * postConds Postcondition

A Postcondition called postConds has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Postconditions called postConds. It can have none, and there is no upper bound defined.

When a Postcondition is created, its UmpleTrait must be assigned.
When a Postcondition is deleted, its UmpleTrait is not deleted and its list of Postconditions is decreased.
When an UmpleTrait is deleted, its Postconditions are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Postcondition,* postConds,1 ')" ];
  "UmpleTrait" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uTrait", headlabel="* ", tooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1 uTrait -> *  ConstraintTree

A ConstraintTree has An UmpleTrait called uTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait called uTrait.

An UmpleTrait called uTrait has some ConstraintTrees. It can have none, and there is no upper bound defined.

When a ConstraintTree is created, its UmpleTrait must be assigned.
When a ConstraintTree is deleted, its UmpleTrait is not deleted and its list of ConstraintTrees is decreased.
When an UmpleTrait is deleted, its ConstraintTrees are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,ConstraintTree,* ,1 uTrait')" ];
  "UmpleTrait" -> "UmpleTrait" [dir="none", taillabel="* subTraits", headlabel="* extendsTraits", tooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait

An UmpleTrait called extendsTraits has some UmpleTraits called subTraits. It can have none, and there is no upper bound defined.

An UmpleTrait called subTraits has some UmpleTraits called extendsTraits. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleTrait,* extendsTraits,* subTraits')" ];
  "UmpleTrait" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" headtooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" tailtooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier

An UniqueIdentifier has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait may have an UniqueIdentifier. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('UmpleTrait,UniqueIdentifier,0..1 ,1 ')" ];
  "UmpleTrait" -> "Attribute" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  Attribute

An Attribute may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some Attributes. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,Attribute,* ,0..1 ')" ];
  "UmpleTrait" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  AssociationVariable

An AssociationVariable may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some AssociationVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,AssociationVariable,* ,0..1 ')" ];
  "UmpleTrait" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  Comment

A Comment has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its UmpleTrait must be assigned.
When a Comment is deleted, its UmpleTrait is not deleted and its list of Comments is decreased.
When an UmpleTrait is deleted, its Comments are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,Comment,* ,1 ')" ];
  "UmpleTrait" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  ReqImplementation

A ReqImplementation has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its UmpleTrait must be assigned.
When a ReqImplementation is deleted, its UmpleTrait is not deleted and its list of ReqImplementations is decreased.
When an UmpleTrait is deleted, its ReqImplementations are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,ReqImplementation,* ,1 ')" ];
  "UmpleTrait" -> "GeneralTemplateParameter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  GeneralTemplateParameter

A GeneralTemplateParameter has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTemplateParameters. It can have none, and there is no upper bound defined.

When a GeneralTemplateParameter is created, its UmpleTrait must be assigned.
When a GeneralTemplateParameter is deleted, its UmpleTrait is not deleted and its list of GeneralTemplateParameters is decreased.
When an UmpleTrait is deleted, its GeneralTemplateParameters are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  GeneralTemplateParameter

A GeneralTemplateParameter has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTemplateParameters. It can have none, and there is no upper bound defined.

When a GeneralTemplateParameter is created, its UmpleTrait must be assigned.
When a GeneralTemplateParameter is deleted, its UmpleTrait is not deleted and its list of GeneralTemplateParameters is decreased.
When an UmpleTrait is deleted, its GeneralTemplateParameters are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  GeneralTemplateParameter

A GeneralTemplateParameter has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTemplateParameters. It can have none, and there is no upper bound defined.

When a GeneralTemplateParameter is created, its UmpleTrait must be assigned.
When a GeneralTemplateParameter is deleted, its UmpleTrait is not deleted and its list of GeneralTemplateParameters is decreased.
When an UmpleTrait is deleted, its GeneralTemplateParameters are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,GeneralTemplateParameter,* ,1 ')" ];
  "UmpleTrait" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> *  GeneralTPApplied

A GeneralTPApplied has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some GeneralTPApplieds. It can have none, and there is no upper bound defined.

When a GeneralTPApplied is created, its UmpleTrait must be assigned.
When a GeneralTPApplied is deleted, its UmpleTrait is not deleted and its list of GeneralTPApplieds is decreased.
When an UmpleTrait is deleted, its GeneralTPApplieds are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,GeneralTPApplied,* ,1 ')" ];
  "UmpleTrait" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* requiredInterfaces", tooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" headtooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" tailtooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface

An UmpleInterface called requiredInterfaces has An UmpleTrait. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleTrait.

An UmpleTrait has some UmpleInterfaces called requiredInterfaces. It can have none, and there is no upper bound defined.

When an UmpleInterface is created, its UmpleTrait must be assigned.
When an UmpleInterface is deleted, its UmpleTrait is not deleted and its list of UmpleInterfaces is decreased.
When an UmpleTrait is deleted, its UmpleInterfaces are not deleted. They are assigned to another UmpleTrait.
" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleInterface,* requiredInterfaces,1 ')" ];
  "UmpleTrait" -> "UmpleTestCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" headtooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" tailtooltip="UmpleTrait 0..1  -- *  UmpleTestCase

An UmpleTestCase may have an UmpleTrait. It can have none or just 1. 

An UmpleTrait has some UmpleTestCases. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('UmpleTrait,UmpleTestCase,* ,0..1 ')" ];
  "GeneralTPApplied" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 positions", tooltip="GeneralTPApplied 1  -> 0..1 positions Position

A Position has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied may have a Position. It can have none or just 1. 

" headtooltip="GeneralTPApplied 1  -> 0..1 positions Position

A Position has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied may have a Position. It can have none or just 1. 

" tailtooltip="GeneralTPApplied 1  -> 0..1 positions Position

A Position has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('GeneralTPApplied,Position,0..1 positions,1 ')" ];
  "GeneralTPApplied" -> "MethodTemplateSignature" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="GeneralTPApplied 1  -> *  MethodTemplateSignature

A MethodTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some MethodTemplateSignatures. It can have none, and there is no upper bound defined.

When a MethodTemplateSignature is created, its GeneralTPApplied must be assigned.
When a MethodTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of MethodTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its MethodTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" headtooltip="GeneralTPApplied 1  -> *  MethodTemplateSignature

A MethodTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some MethodTemplateSignatures. It can have none, and there is no upper bound defined.

When a MethodTemplateSignature is created, its GeneralTPApplied must be assigned.
When a MethodTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of MethodTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its MethodTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" tailtooltip="GeneralTPApplied 1  -> *  MethodTemplateSignature

A MethodTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some MethodTemplateSignatures. It can have none, and there is no upper bound defined.

When a MethodTemplateSignature is created, its GeneralTPApplied must be assigned.
When a MethodTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of MethodTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its MethodTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" URL="javascript:Action.selectAssociation('GeneralTPApplied,MethodTemplateSignature,* ,1 ')" ];
  "GeneralTPApplied" -> "StateMachineTemplateSignature" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="GeneralTPApplied 1  -> *  StateMachineTemplateSignature

A StateMachineTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineTemplateSignatures. It can have none, and there is no upper bound defined.

When a StateMachineTemplateSignature is created, its GeneralTPApplied must be assigned.
When a StateMachineTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of StateMachineTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its StateMachineTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" headtooltip="GeneralTPApplied 1  -> *  StateMachineTemplateSignature

A StateMachineTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineTemplateSignatures. It can have none, and there is no upper bound defined.

When a StateMachineTemplateSignature is created, its GeneralTPApplied must be assigned.
When a StateMachineTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of StateMachineTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its StateMachineTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" tailtooltip="GeneralTPApplied 1  -> *  StateMachineTemplateSignature

A StateMachineTemplateSignature has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineTemplateSignatures. It can have none, and there is no upper bound defined.

When a StateMachineTemplateSignature is created, its GeneralTPApplied must be assigned.
When a StateMachineTemplateSignature is deleted, its GeneralTPApplied is not deleted and its list of StateMachineTemplateSignatures is decreased.
When a GeneralTPApplied is deleted, its StateMachineTemplateSignatures are not deleted. They are assigned to another GeneralTPApplied.
" URL="javascript:Action.selectAssociation('GeneralTPApplied,StateMachineTemplateSignature,* ,1 ')" ];
  "GeneralTPApplied" -> "StateMachineModifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="GeneralTPApplied 1  -> *  StateMachineModifier

A StateMachineModifier has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineModifiers. It can have none, and there is no upper bound defined.

When a StateMachineModifier is created, its GeneralTPApplied must be assigned.
When a StateMachineModifier is deleted, its GeneralTPApplied is not deleted and its list of StateMachineModifiers is decreased.
When a GeneralTPApplied is deleted, its StateMachineModifiers are not deleted. They are assigned to another GeneralTPApplied.
" headtooltip="GeneralTPApplied 1  -> *  StateMachineModifier

A StateMachineModifier has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineModifiers. It can have none, and there is no upper bound defined.

When a StateMachineModifier is created, its GeneralTPApplied must be assigned.
When a StateMachineModifier is deleted, its GeneralTPApplied is not deleted and its list of StateMachineModifiers is decreased.
When a GeneralTPApplied is deleted, its StateMachineModifiers are not deleted. They are assigned to another GeneralTPApplied.
" tailtooltip="GeneralTPApplied 1  -> *  StateMachineModifier

A StateMachineModifier has A GeneralTPApplied. It must always have exactly, one, and can never have none. And there is an upper bound of at most one GeneralTPApplied.

A GeneralTPApplied has some StateMachineModifiers. It can have none, and there is no upper bound defined.

When a StateMachineModifier is created, its GeneralTPApplied must be assigned.
When a StateMachineModifier is deleted, its GeneralTPApplied is not deleted and its list of StateMachineModifiers is decreased.
When a GeneralTPApplied is deleted, its StateMachineModifiers are not deleted. They are assigned to another GeneralTPApplied.
" URL="javascript:Action.selectAssociation('GeneralTPApplied,StateMachineModifier,* ,1 ')" ];
  "MethodTemplateSignature" -> "Method" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="MethodTemplateSignature 1  -> 1  Method

A Method has A MethodTemplateSignature. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodTemplateSignature.

A MethodTemplateSignature has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

There must always be an equal number of Method and MethodTemplateSignature, connected as Pairs.
When a MethodTemplateSignature is created, its Method must be created at the same time.
When a MethodTemplateSignature is deleted, its Method is deleted at the same time.
" headtooltip="MethodTemplateSignature 1  -> 1  Method

A Method has A MethodTemplateSignature. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodTemplateSignature.

A MethodTemplateSignature has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

There must always be an equal number of Method and MethodTemplateSignature, connected as Pairs.
When a MethodTemplateSignature is created, its Method must be created at the same time.
When a MethodTemplateSignature is deleted, its Method is deleted at the same time.
" tailtooltip="MethodTemplateSignature 1  -> 1  Method

A Method has A MethodTemplateSignature. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MethodTemplateSignature.

A MethodTemplateSignature has A Method. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Method.

There must always be an equal number of Method and MethodTemplateSignature, connected as Pairs.
When a MethodTemplateSignature is created, its Method must be created at the same time.
When a MethodTemplateSignature is deleted, its Method is deleted at the same time.
" URL="javascript:Action.selectAssociation('MethodTemplateSignature,Method,1 ,1 ')" ];
  "StateMachineTemplateSignature" -> "MethodTemplateSignature" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 ", tooltip="StateMachineTemplateSignature 0..1  -> 0..1  MethodTemplateSignature

A MethodTemplateSignature may have a StateMachineTemplateSignature. It can have none or just 1. 

A StateMachineTemplateSignature may have a MethodTemplateSignature. It can have none or just 1. 

" headtooltip="StateMachineTemplateSignature 0..1  -> 0..1  MethodTemplateSignature

A MethodTemplateSignature may have a StateMachineTemplateSignature. It can have none or just 1. 

A StateMachineTemplateSignature may have a MethodTemplateSignature. It can have none or just 1. 

" tailtooltip="StateMachineTemplateSignature 0..1  -> 0..1  MethodTemplateSignature

A MethodTemplateSignature may have a StateMachineTemplateSignature. It can have none or just 1. 

A StateMachineTemplateSignature may have a MethodTemplateSignature. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachineTemplateSignature,MethodTemplateSignature,0..1 ,0..1 ')" ];
  "EventModifier" -> "Method" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 ", tooltip="EventModifier 0..1  -> 0..1  Method

A Method may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Method. It can have none or just 1. 

" headtooltip="EventModifier 0..1  -> 0..1  Method

A Method may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Method. It can have none or just 1. 

" tailtooltip="EventModifier 0..1  -> 0..1  Method

A Method may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Method. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('EventModifier,Method,0..1 ,0..1 ')" ];
  "EventModifier" -> "Guard" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 ", tooltip="EventModifier 0..1  -> 0..1  Guard

A Guard may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Guard. It can have none or just 1. 

" headtooltip="EventModifier 0..1  -> 0..1  Guard

A Guard may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Guard. It can have none or just 1. 

" tailtooltip="EventModifier 0..1  -> 0..1  Guard

A Guard may have an EventModifier. It can have none or just 1. 

An EventModifier may have a Guard. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('EventModifier,Guard,0..1 ,0..1 ')" ];
  "AssociationClass" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..2 associatedTo", tooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" headtooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" tailtooltip="AssociationClass 1  -> 0..2 associatedTo Association

An Association called associatedTo has An AssociationClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationClass.

An AssociationClass may have an Association called associatedTo. And there is an upper bound of at most 2 Associations called associatedTo.

" URL="javascript:Action.selectAssociation('AssociationClass,Association,0..2 associatedTo,1 ')" ];
  "Attribute" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" headtooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" tailtooltip="Attribute 1  -> *  Comment

A Comment has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its Attribute must be assigned.
When a Comment is deleted, its Attribute is not deleted and its list of Comments is decreased.
When an Attribute is deleted, its Comments are not deleted. They are assigned to another Attribute.
" URL="javascript:Action.selectAssociation('Attribute,Comment,* ,1 ')" ];
  "Attribute" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" headtooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" tailtooltip="Attribute 1  -> *  ReqImplementation

A ReqImplementation has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its Attribute must be assigned.
When a ReqImplementation is deleted, its Attribute is not deleted and its list of ReqImplementations is decreased.
When an Attribute is deleted, its ReqImplementations are not deleted. They are assigned to another Attribute.
" URL="javascript:Action.selectAssociation('Attribute,ReqImplementation,* ,1 ')" ];
  "Attribute" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="Attribute 1  -> 0..1  Position

A Position has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position. It can have none or just 1. 

" headtooltip="Attribute 1  -> 0..1  Position

A Position has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position. It can have none or just 1. 

" tailtooltip="Attribute 1  -> 0..1  Position

A Position has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Attribute,Position,0..1 ,1 ')" ];
  "Attribute" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 endPosition", tooltip="Attribute 1  -> 0..1 endPosition Position

A Position called endPosition has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position called endPosition. It can have none or just 1. 

" headtooltip="Attribute 1  -> 0..1 endPosition Position

A Position called endPosition has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position called endPosition. It can have none or just 1. 

" tailtooltip="Attribute 1  -> 0..1 endPosition Position

A Position called endPosition has An Attribute. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Attribute.

An Attribute may have a Position called endPosition. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Attribute,Position,0..1 endPosition,1 ')" ];
  "Association" -> "AssociationEnd" [dir="none", taillabel="0..1 ", headlabel="2 ends", tooltip="Association 0..1  -- 2 ends AssociationEnd

An AssociationEnd called ends may have an Association. It can have none or just 1. 

An Association has 2 AssociationEnds called ends. 
When an Association is created, its 2 AssociationEnds called ends must be assigned.

" headtooltip="Association 0..1  -- 2 ends AssociationEnd

An AssociationEnd called ends may have an Association. It can have none or just 1. 

An Association has 2 AssociationEnds called ends. 
When an Association is created, its 2 AssociationEnds called ends must be assigned.

" tailtooltip="Association 0..1  -- 2 ends AssociationEnd

An AssociationEnd called ends may have an Association. It can have none or just 1. 

An Association has 2 AssociationEnds called ends. 
When an Association is created, its 2 AssociationEnds called ends must be assigned.

" URL="javascript:Action.selectAssociation('Association,AssociationEnd,2 ends,0..1 ')" ];
  "Association" -> "Association" [dir="none", taillabel="0..1 specializedFrom", headlabel="* specializedAssociations", tooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" headtooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" tailtooltip="Association 0..1 specializedFrom -- * specializedAssociations Association

An Association called specializedAssociations may have an Association called specializedFrom. It can have none or just 1. 

An Association called specializedFrom has some Associations called specializedAssociations. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Association,Association,* specializedAssociations,0..1 specializedFrom')" ];
  "AssociationVariable" -> "AssociationVariable" [dir="none", label="0..1 relatedAssociation", tooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" labeltooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" headtooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" tailtooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable

There is a set of AssociationVariable that have the 0..1 relatedAssociation relationship with each other" URL="javascript:Action.selectAssociation('AssociationVariable,AssociationVariable,0..1 relatedAssociation')" ];
  "AssociationVariable" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" headtooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" tailtooltip="AssociationVariable 1  -> *  Comment

A Comment has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its AssociationVariable must be assigned.
When a Comment is deleted, its AssociationVariable is not deleted and its list of Comments is decreased.
When an AssociationVariable is deleted, its Comments are not deleted. They are assigned to another AssociationVariable.
" URL="javascript:Action.selectAssociation('AssociationVariable,Comment,* ,1 ')" ];
  "AssociationVariable" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" headtooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" tailtooltip="AssociationVariable 1  -> *  ReqImplementation

A ReqImplementation has An AssociationVariable. It must always have exactly, one, and can never have none. And there is an upper bound of at most one AssociationVariable.

An AssociationVariable has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its AssociationVariable must be assigned.
When a ReqImplementation is deleted, its AssociationVariable is not deleted and its list of ReqImplementations is decreased.
When an AssociationVariable is deleted, its ReqImplementations are not deleted. They are assigned to another AssociationVariable.
" URL="javascript:Action.selectAssociation('AssociationVariable,ReqImplementation,* ,1 ')" ];
  "GeneratedClass" -> "UmpleModel" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 model", tooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" headtooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" tailtooltip="GeneratedClass *  -> 1 model UmpleModel

An UmpleModel called model has some GeneratedClasss called generatedClasses. It can have none, and there is no upper bound defined.

A GeneratedClass called generatedClasses has An UmpleModel called model. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleModel called model.

When a GeneratedClass is created, its UmpleModel must be assigned.
When a GeneratedClass is deleted, its UmpleModel is not deleted and its list of GeneratedClasss is decreased.
When an UmpleModel is deleted, its GeneratedClasss are not deleted. They are assigned to another UmpleModel.
" URL="javascript:Action.selectAssociation('GeneratedClass,UmpleModel,1 model,* ')" ];
  "GeneratedClass" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 uClass", tooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" headtooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" tailtooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass

An UmpleClass called uClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass has An UmpleClass called uClass. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleClass called uClass.

" URL="javascript:Action.selectAssociation('GeneratedClass,UmpleClass,1 uClass,0..1 ')" ];
  "GeneratedClass" -> "GeneratedClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 parentClass", tooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" headtooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" tailtooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass

A GeneratedClass called parentClass may have a GeneratedClass. It can have none or just 1. 

A GeneratedClass may have a GeneratedClass called parentClass. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('GeneratedClass,GeneratedClass,0..1 parentClass,0..1 ')" ];
  "Requirement" -> "Token" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* reqToken", tooltip="Requirement *  -> * reqToken Token

A Token called reqToken has some Requirements. It can have none, and there is no upper bound defined.

A Requirement has some Tokens called reqToken. It can have none, and there is no upper bound defined.

" headtooltip="Requirement *  -> * reqToken Token

A Token called reqToken has some Requirements. It can have none, and there is no upper bound defined.

A Requirement has some Tokens called reqToken. It can have none, and there is no upper bound defined.

" tailtooltip="Requirement *  -> * reqToken Token

A Token called reqToken has some Requirements. It can have none, and there is no upper bound defined.

A Requirement has some Tokens called reqToken. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Requirement,Token,* reqToken,* ')" ];
  "ReqImplementation" -> "Requirement" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="ReqImplementation *  -- 0..1  Requirement

A Requirement has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation may have a Requirement. It can have none or just 1. 

" headtooltip="ReqImplementation *  -- 0..1  Requirement

A Requirement has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation may have a Requirement. It can have none or just 1. 

" tailtooltip="ReqImplementation *  -- 0..1  Requirement

A Requirement has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation may have a Requirement. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('ReqImplementation,Requirement,0..1 ,* ')" ];
  "ReqImplementation" -> "Token" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 reqToken", tooltip="ReqImplementation *  -> 1 reqToken Token

A Token called reqToken has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation has A Token called reqToken. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Token called reqToken.

When a ReqImplementation is created, its Token must be assigned.
When a ReqImplementation is deleted, its Token is not deleted and its list of ReqImplementations is decreased.
When a Token is deleted, its ReqImplementations are not deleted. They are assigned to another Token.
" headtooltip="ReqImplementation *  -> 1 reqToken Token

A Token called reqToken has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation has A Token called reqToken. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Token called reqToken.

When a ReqImplementation is created, its Token must be assigned.
When a ReqImplementation is deleted, its Token is not deleted and its list of ReqImplementations is decreased.
When a Token is deleted, its ReqImplementations are not deleted. They are assigned to another Token.
" tailtooltip="ReqImplementation *  -> 1 reqToken Token

A Token called reqToken has some ReqImplementations. It can have none, and there is no upper bound defined.

A ReqImplementation has A Token called reqToken. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Token called reqToken.

When a ReqImplementation is created, its Token must be assigned.
When a ReqImplementation is deleted, its Token is not deleted and its list of ReqImplementations is decreased.
When a Token is deleted, its ReqImplementations are not deleted. They are assigned to another Token.
" URL="javascript:Action.selectAssociation('ReqImplementation,Token,1 reqToken,* ')" ];
  "Port" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="Port 1  -> 0..1  Position

A Position has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position. It can have none or just 1. 

" headtooltip="Port 1  -> 0..1  Position

A Position has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position. It can have none or just 1. 

" tailtooltip="Port 1  -> 0..1  Position

A Position has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Port,Position,0..1 ,1 ')" ];
  "Port" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 endPosition", tooltip="Port 1  -> 0..1 endPosition Position

A Position called endPosition has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position called endPosition. It can have none or just 1. 

" headtooltip="Port 1  -> 0..1 endPosition Position

A Position called endPosition has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position called endPosition. It can have none or just 1. 

" tailtooltip="Port 1  -> 0..1 endPosition Position

A Position called endPosition has A Port. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port.

A Port may have a Position called endPosition. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Port,Position,0..1 endPosition,1 ')" ];
  "Port" -> "PortBinding" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* bindings", tooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" headtooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" tailtooltip="Port *  -> * bindings PortBinding

A PortBinding called bindings has some Ports. It can have none, and there is no upper bound defined.

A Port has some PortBindings called bindings. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Port,PortBinding,* bindings,* ')" ];
  "Port" -> "Protocol" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 protocol", tooltip="Port *  -> 0..1 protocol Protocol

A Protocol has some Ports. It can have none, and there is no upper bound defined.

A Port may have a Protocol. It can have none or just 1. 

" headtooltip="Port *  -> 0..1 protocol Protocol

A Protocol has some Ports. It can have none, and there is no upper bound defined.

A Port may have a Protocol. It can have none or just 1. 

" tailtooltip="Port *  -> 0..1 protocol Protocol

A Protocol has some Ports. It can have none, and there is no upper bound defined.

A Port may have a Protocol. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Port,Protocol,0..1 protocol,* ')" ];
  "ModelConstraint" -> "ModelConstraint" [dir="none", taillabel="0..1 parentConstraint", headlabel="* ", tooltip="ModelConstraint 0..1 parentConstraint -- *  ModelConstraint

A ModelConstraint may have a ModelConstraint called parentConstraint. It can have none or just 1. 

A ModelConstraint called parentConstraint has some ModelConstraints. It can have none, and there is no upper bound defined.

" headtooltip="ModelConstraint 0..1 parentConstraint -- *  ModelConstraint

A ModelConstraint may have a ModelConstraint called parentConstraint. It can have none or just 1. 

A ModelConstraint called parentConstraint has some ModelConstraints. It can have none, and there is no upper bound defined.

" tailtooltip="ModelConstraint 0..1 parentConstraint -- *  ModelConstraint

A ModelConstraint may have a ModelConstraint called parentConstraint. It can have none or just 1. 

A ModelConstraint called parentConstraint has some ModelConstraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('ModelConstraint,ModelConstraint,* ,0..1 parentConstraint')" ];
  "MixsetOrFile" -> "Position" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="MixsetOrFile 1  -> 0..1  Position

A Position has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile may have a Position. It can have none or just 1. 

" headtooltip="MixsetOrFile 1  -> 0..1  Position

A Position has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile may have a Position. It can have none or just 1. 

" tailtooltip="MixsetOrFile 1  -> 0..1  Position

A Position has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile may have a Position. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('MixsetOrFile,Position,0..1 ,1 ')" ];
  "MixsetOrFile" -> "ReqImplementation" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" headtooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" tailtooltip="MixsetOrFile 1  -> *  ReqImplementation

A ReqImplementation has A MixsetOrFile. It must always have exactly, one, and can never have none. And there is an upper bound of at most one MixsetOrFile.

A MixsetOrFile has some ReqImplementations. It can have none, and there is no upper bound defined.

When a ReqImplementation is created, its MixsetOrFile must be assigned.
When a ReqImplementation is deleted, its MixsetOrFile is not deleted and its list of ReqImplementations is decreased.
When a MixsetOrFile is deleted, its ReqImplementations are not deleted. They are assigned to another MixsetOrFile.
" URL="javascript:Action.selectAssociation('MixsetOrFile,ReqImplementation,* ,1 ')" ];
  "FeatureModel" -> "FeatureNode" [dir="none", taillabel="1 ", headlabel="* node", tooltip="FeatureModel 1  -- * node FeatureNode

A FeatureNode called node has A FeatureModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one FeatureModel.

A FeatureModel has some FeatureNodes called node. It can have none, and there is no upper bound defined.

When a FeatureNode is created, its FeatureModel must be assigned.
When a FeatureNode is deleted, its FeatureModel is not deleted and its list of FeatureNodes is decreased.
When a FeatureModel is deleted, its FeatureNodes are not deleted. They are assigned to another FeatureModel.
" headtooltip="FeatureModel 1  -- * node FeatureNode

A FeatureNode called node has A FeatureModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one FeatureModel.

A FeatureModel has some FeatureNodes called node. It can have none, and there is no upper bound defined.

When a FeatureNode is created, its FeatureModel must be assigned.
When a FeatureNode is deleted, its FeatureModel is not deleted and its list of FeatureNodes is decreased.
When a FeatureModel is deleted, its FeatureNodes are not deleted. They are assigned to another FeatureModel.
" tailtooltip="FeatureModel 1  -- * node FeatureNode

A FeatureNode called node has A FeatureModel. It must always have exactly, one, and can never have none. And there is an upper bound of at most one FeatureModel.

A FeatureModel has some FeatureNodes called node. It can have none, and there is no upper bound defined.

When a FeatureNode is created, its FeatureModel must be assigned.
When a FeatureNode is deleted, its FeatureModel is not deleted and its list of FeatureNodes is decreased.
When a FeatureModel is deleted, its FeatureNodes are not deleted. They are assigned to another FeatureModel.
" URL="javascript:Action.selectAssociation('FeatureModel,FeatureNode,* node,1 ')" ];
  "FeatureModel" -> "FeatureLink" [dir="none", taillabel="0..1 ", headlabel="* featurelink", tooltip="FeatureModel 0..1  -- * featurelink FeatureLink

A FeatureLink may have a FeatureModel. It can have none or just 1. 

A FeatureModel has some FeatureLinks. It can have none, and there is no upper bound defined.

" headtooltip="FeatureModel 0..1  -- * featurelink FeatureLink

A FeatureLink may have a FeatureModel. It can have none or just 1. 

A FeatureModel has some FeatureLinks. It can have none, and there is no upper bound defined.

" tailtooltip="FeatureModel 0..1  -- * featurelink FeatureLink

A FeatureLink may have a FeatureModel. It can have none or just 1. 

A FeatureModel has some FeatureLinks. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('FeatureModel,FeatureLink,* featurelink,0..1 ')" ];
  "FeatureNode" -> "FeatureLink" [dir="none", taillabel="0..1 targetFeatureNode", headlabel="* incomingFeatureLinks", tooltip="FeatureNode 0..1 targetFeatureNode -- * incomingFeatureLinks FeatureLink

A FeatureLink called incomingFeatureLinks may have a FeatureNode called targetFeatureNode. It can have none or just 1. 

A FeatureNode called targetFeatureNode has some FeatureLinks called incomingFeatureLinks. It can have none, and there is no upper bound defined.

" headtooltip="FeatureNode 0..1 targetFeatureNode -- * incomingFeatureLinks FeatureLink

A FeatureLink called incomingFeatureLinks may have a FeatureNode called targetFeatureNode. It can have none or just 1. 

A FeatureNode called targetFeatureNode has some FeatureLinks called incomingFeatureLinks. It can have none, and there is no upper bound defined.

" tailtooltip="FeatureNode 0..1 targetFeatureNode -- * incomingFeatureLinks FeatureLink

A FeatureLink called incomingFeatureLinks may have a FeatureNode called targetFeatureNode. It can have none or just 1. 

A FeatureNode called targetFeatureNode has some FeatureLinks called incomingFeatureLinks. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('FeatureNode,FeatureLink,* incomingFeatureLinks,0..1 targetFeatureNode')" ];
  "FeatureNode" -> "FeatureLink" [dir="none", taillabel="0..1 sourceFeatureNode", headlabel="* outgoingFeatureLinks", tooltip="FeatureNode 0..1 sourceFeatureNode -- * outgoingFeatureLinks FeatureLink

A FeatureLink called outgoingFeatureLinks may have a FeatureNode called sourceFeatureNode. It can have none or just 1. 

A FeatureNode called sourceFeatureNode has some FeatureLinks called outgoingFeatureLinks. It can have none, and there is no upper bound defined.

" headtooltip="FeatureNode 0..1 sourceFeatureNode -- * outgoingFeatureLinks FeatureLink

A FeatureLink called outgoingFeatureLinks may have a FeatureNode called sourceFeatureNode. It can have none or just 1. 

A FeatureNode called sourceFeatureNode has some FeatureLinks called outgoingFeatureLinks. It can have none, and there is no upper bound defined.

" tailtooltip="FeatureNode 0..1 sourceFeatureNode -- * outgoingFeatureLinks FeatureLink

A FeatureLink called outgoingFeatureLinks may have a FeatureNode called sourceFeatureNode. It can have none or just 1. 

A FeatureNode called sourceFeatureNode has some FeatureLinks called outgoingFeatureLinks. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('FeatureNode,FeatureLink,* outgoingFeatureLinks,0..1 sourceFeatureNode')" ];
  "CompoundFeatureNode" -> "FeatureNode" [dir="none", taillabel="0..1 ", headlabel="* childFeatures", tooltip="CompoundFeatureNode 0..1  -- * childFeatures FeatureNode

A FeatureNode called childFeatures may have a CompoundFeatureNode. It can have none or just 1. 

A CompoundFeatureNode has some FeatureNodes called childFeatures. It can have none, and there is no upper bound defined.

" headtooltip="CompoundFeatureNode 0..1  -- * childFeatures FeatureNode

A FeatureNode called childFeatures may have a CompoundFeatureNode. It can have none or just 1. 

A CompoundFeatureNode has some FeatureNodes called childFeatures. It can have none, and there is no upper bound defined.

" tailtooltip="CompoundFeatureNode 0..1  -- * childFeatures FeatureNode

A FeatureNode called childFeatures may have a CompoundFeatureNode. It can have none or just 1. 

A CompoundFeatureNode has some FeatureNodes called childFeatures. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('CompoundFeatureNode,FeatureNode,* childFeatures,0..1 ')" ];
  "FeatureLeaf" -> "MixsetOrFile" [dir="none", taillabel="0..1 ", headlabel="0..1 mixsetOrFileNode", tooltip="FeatureLeaf 0..1  -- 0..1 mixsetOrFileNode MixsetOrFile

A MixsetOrFile called mixsetOrFileNode may have a FeatureLeaf. It can have none or just 1. 

A FeatureLeaf may have a MixsetOrFile called mixsetOrFileNode. It can have none or just 1. 

" headtooltip="FeatureLeaf 0..1  -- 0..1 mixsetOrFileNode MixsetOrFile

A MixsetOrFile called mixsetOrFileNode may have a FeatureLeaf. It can have none or just 1. 

A FeatureLeaf may have a MixsetOrFile called mixsetOrFileNode. It can have none or just 1. 

" tailtooltip="FeatureLeaf 0..1  -- 0..1 mixsetOrFileNode MixsetOrFile

A MixsetOrFile called mixsetOrFileNode may have a FeatureLeaf. It can have none or just 1. 

A FeatureLeaf may have a MixsetOrFile called mixsetOrFileNode. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('FeatureLeaf,MixsetOrFile,0..1 mixsetOrFileNode,0..1 ')" ];
  "TracerDirective" -> "TracerArgument" [dir="none", taillabel="1 ", headlabel="* ", tooltip="TracerDirective 1  -- *  TracerArgument

A TracerArgument has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective has some TracerArguments. It can have none, and there is no upper bound defined.

When a TracerArgument is created, its TracerDirective must be assigned.
When a TracerArgument is deleted, its TracerDirective is not deleted and its list of TracerArguments is decreased.
When a TracerDirective is deleted, its TracerArguments are not deleted. They are assigned to another TracerDirective.
" headtooltip="TracerDirective 1  -- *  TracerArgument

A TracerArgument has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective has some TracerArguments. It can have none, and there is no upper bound defined.

When a TracerArgument is created, its TracerDirective must be assigned.
When a TracerArgument is deleted, its TracerDirective is not deleted and its list of TracerArguments is decreased.
When a TracerDirective is deleted, its TracerArguments are not deleted. They are assigned to another TracerDirective.
" tailtooltip="TracerDirective 1  -- *  TracerArgument

A TracerArgument has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective has some TracerArguments. It can have none, and there is no upper bound defined.

When a TracerArgument is created, its TracerDirective must be assigned.
When a TracerArgument is deleted, its TracerDirective is not deleted and its list of TracerArguments is decreased.
When a TracerDirective is deleted, its TracerArguments are not deleted. They are assigned to another TracerDirective.
" URL="javascript:Action.selectAssociation('TracerDirective,TracerArgument,* ,1 ')" ];
  "TracerDirective" -> "TraceMessageSwitch" [dir="none", taillabel="1 ", headlabel="0..1 ", tooltip="TracerDirective 1  -- 0..1  TraceMessageSwitch

A TraceMessageSwitch has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a TraceMessageSwitch. It can have none or just 1. 

" headtooltip="TracerDirective 1  -- 0..1  TraceMessageSwitch

A TraceMessageSwitch has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a TraceMessageSwitch. It can have none or just 1. 

" tailtooltip="TracerDirective 1  -- 0..1  TraceMessageSwitch

A TraceMessageSwitch has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a TraceMessageSwitch. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('TracerDirective,TraceMessageSwitch,0..1 ,1 ')" ];
  "TracerDirective" -> "LogConfiguration" [dir="none", taillabel="1 ", headlabel="0..1 ", tooltip="TracerDirective 1  -- 0..1  LogConfiguration

A LogConfiguration has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a LogConfiguration. It can have none or just 1. 

" headtooltip="TracerDirective 1  -- 0..1  LogConfiguration

A LogConfiguration has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a LogConfiguration. It can have none or just 1. 

" tailtooltip="TracerDirective 1  -- 0..1  LogConfiguration

A LogConfiguration has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

A TracerDirective may have a LogConfiguration. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('TracerDirective,LogConfiguration,0..1 ,1 ')" ];
  "TraceMessageSwitch" -> "MessageComponent" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* option", tooltip="TraceMessageSwitch 1  -> * option MessageComponent

A MessageComponent called option has A TraceMessageSwitch. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceMessageSwitch.

A TraceMessageSwitch has some MessageComponents called option. It can have none, and there is no upper bound defined.

When a MessageComponent is created, its TraceMessageSwitch must be assigned.
When a MessageComponent is deleted, its TraceMessageSwitch is not deleted and its list of MessageComponents is decreased.
When a TraceMessageSwitch is deleted, its MessageComponents are not deleted. They are assigned to another TraceMessageSwitch.
" headtooltip="TraceMessageSwitch 1  -> * option MessageComponent

A MessageComponent called option has A TraceMessageSwitch. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceMessageSwitch.

A TraceMessageSwitch has some MessageComponents called option. It can have none, and there is no upper bound defined.

When a MessageComponent is created, its TraceMessageSwitch must be assigned.
When a MessageComponent is deleted, its TraceMessageSwitch is not deleted and its list of MessageComponents is decreased.
When a TraceMessageSwitch is deleted, its MessageComponents are not deleted. They are assigned to another TraceMessageSwitch.
" tailtooltip="TraceMessageSwitch 1  -> * option MessageComponent

A MessageComponent called option has A TraceMessageSwitch. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceMessageSwitch.

A TraceMessageSwitch has some MessageComponents called option. It can have none, and there is no upper bound defined.

When a MessageComponent is created, its TraceMessageSwitch must be assigned.
When a MessageComponent is deleted, its TraceMessageSwitch is not deleted and its list of MessageComponents is decreased.
When a TraceMessageSwitch is deleted, its MessageComponents are not deleted. They are assigned to another TraceMessageSwitch.
" URL="javascript:Action.selectAssociation('TraceMessageSwitch,MessageComponent,* option,1 ')" ];
  "LogConfiguration" -> "LoggerLevelToAppender" [dir="none", taillabel="1 ", headlabel="* ", tooltip="LogConfiguration 1  -- *  LoggerLevelToAppender

A LoggerLevelToAppender has A LogConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LogConfiguration.

A LogConfiguration has some LoggerLevelToAppenders. It can have none, and there is no upper bound defined.

When a LoggerLevelToAppender is created, its LogConfiguration must be assigned.
When a LoggerLevelToAppender is deleted, its LogConfiguration is not deleted and its list of LoggerLevelToAppenders is decreased.
When a LogConfiguration is deleted, its LoggerLevelToAppenders are not deleted. They are assigned to another LogConfiguration.
" headtooltip="LogConfiguration 1  -- *  LoggerLevelToAppender

A LoggerLevelToAppender has A LogConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LogConfiguration.

A LogConfiguration has some LoggerLevelToAppenders. It can have none, and there is no upper bound defined.

When a LoggerLevelToAppender is created, its LogConfiguration must be assigned.
When a LoggerLevelToAppender is deleted, its LogConfiguration is not deleted and its list of LoggerLevelToAppenders is decreased.
When a LogConfiguration is deleted, its LoggerLevelToAppenders are not deleted. They are assigned to another LogConfiguration.
" tailtooltip="LogConfiguration 1  -- *  LoggerLevelToAppender

A LoggerLevelToAppender has A LogConfiguration. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LogConfiguration.

A LogConfiguration has some LoggerLevelToAppenders. It can have none, and there is no upper bound defined.

When a LoggerLevelToAppender is created, its LogConfiguration must be assigned.
When a LoggerLevelToAppender is deleted, its LogConfiguration is not deleted and its list of LoggerLevelToAppenders is decreased.
When a LogConfiguration is deleted, its LoggerLevelToAppenders are not deleted. They are assigned to another LogConfiguration.
" URL="javascript:Action.selectAssociation('LogConfiguration,LoggerLevelToAppender,* ,1 ')" ];
  "LoggerLevelToAppender" -> "Appender" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="LoggerLevelToAppender 1  -> *  Appender

An Appender has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Appenders. It can have none, and there is no upper bound defined.

When an Appender is created, its LoggerLevelToAppender must be assigned.
When an Appender is deleted, its LoggerLevelToAppender is not deleted and its list of Appenders is decreased.
When a LoggerLevelToAppender is deleted, its Appenders are not deleted. They are assigned to another LoggerLevelToAppender.
" headtooltip="LoggerLevelToAppender 1  -> *  Appender

An Appender has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Appenders. It can have none, and there is no upper bound defined.

When an Appender is created, its LoggerLevelToAppender must be assigned.
When an Appender is deleted, its LoggerLevelToAppender is not deleted and its list of Appenders is decreased.
When a LoggerLevelToAppender is deleted, its Appenders are not deleted. They are assigned to another LoggerLevelToAppender.
" tailtooltip="LoggerLevelToAppender 1  -> *  Appender

An Appender has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Appenders. It can have none, and there is no upper bound defined.

When an Appender is created, its LoggerLevelToAppender must be assigned.
When an Appender is deleted, its LoggerLevelToAppender is not deleted and its list of Appenders is decreased.
When a LoggerLevelToAppender is deleted, its Appenders are not deleted. They are assigned to another LoggerLevelToAppender.
" URL="javascript:Action.selectAssociation('LoggerLevelToAppender,Appender,* ,1 ')" ];
  "LoggerLevelToAppender" -> "Level" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="LoggerLevelToAppender 1  -> *  Level

A Level has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Levels. It can have none, and there is no upper bound defined.

When a Level is created, its LoggerLevelToAppender must be assigned.
When a Level is deleted, its LoggerLevelToAppender is not deleted and its list of Levels is decreased.
When a LoggerLevelToAppender is deleted, its Levels are not deleted. They are assigned to another LoggerLevelToAppender.
" headtooltip="LoggerLevelToAppender 1  -> *  Level

A Level has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Levels. It can have none, and there is no upper bound defined.

When a Level is created, its LoggerLevelToAppender must be assigned.
When a Level is deleted, its LoggerLevelToAppender is not deleted and its list of Levels is decreased.
When a LoggerLevelToAppender is deleted, its Levels are not deleted. They are assigned to another LoggerLevelToAppender.
" tailtooltip="LoggerLevelToAppender 1  -> *  Level

A Level has A LoggerLevelToAppender. It must always have exactly, one, and can never have none. And there is an upper bound of at most one LoggerLevelToAppender.

A LoggerLevelToAppender has some Levels. It can have none, and there is no upper bound defined.

When a Level is created, its LoggerLevelToAppender must be assigned.
When a Level is deleted, its LoggerLevelToAppender is not deleted and its list of Levels is decreased.
When a LoggerLevelToAppender is deleted, its Levels are not deleted. They are assigned to another LoggerLevelToAppender.
" URL="javascript:Action.selectAssociation('LoggerLevelToAppender,Level,* ,1 ')" ];
  "TraceDirective" -> "TracerDirective" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="TraceDirective 1  -> 1  TracerDirective

A TracerDirective has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

There must always be an equal number of TracerDirective and TraceDirective, connected as Pairs.
When a TraceDirective is created, its TracerDirective must be created at the same time.
When a TraceDirective is deleted, its TracerDirective is deleted at the same time.
" headtooltip="TraceDirective 1  -> 1  TracerDirective

A TracerDirective has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

There must always be an equal number of TracerDirective and TraceDirective, connected as Pairs.
When a TraceDirective is created, its TracerDirective must be created at the same time.
When a TraceDirective is deleted, its TracerDirective is deleted at the same time.
" tailtooltip="TraceDirective 1  -> 1  TracerDirective

A TracerDirective has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has A TracerDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TracerDirective.

There must always be an equal number of TracerDirective and TraceDirective, connected as Pairs.
When a TraceDirective is created, its TracerDirective must be created at the same time.
When a TraceDirective is deleted, its TracerDirective is deleted at the same time.
" URL="javascript:Action.selectAssociation('TraceDirective,TracerDirective,1 ,1 ')" ];
  "TraceDirective" -> "AttributeTraceItem" [dir="none", taillabel="1 ", headlabel="* ", tooltip="TraceDirective 1  -- *  AttributeTraceItem

An AttributeTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AttributeTraceItems. It can have none, and there is no upper bound defined.

When an AttributeTraceItem is created, its TraceDirective must be assigned.
When an AttributeTraceItem is deleted, its TraceDirective is not deleted and its list of AttributeTraceItems is decreased.
When a TraceDirective is deleted, its AttributeTraceItems are not deleted. They are assigned to another TraceDirective.
" headtooltip="TraceDirective 1  -- *  AttributeTraceItem

An AttributeTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AttributeTraceItems. It can have none, and there is no upper bound defined.

When an AttributeTraceItem is created, its TraceDirective must be assigned.
When an AttributeTraceItem is deleted, its TraceDirective is not deleted and its list of AttributeTraceItems is decreased.
When a TraceDirective is deleted, its AttributeTraceItems are not deleted. They are assigned to another TraceDirective.
" tailtooltip="TraceDirective 1  -- *  AttributeTraceItem

An AttributeTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AttributeTraceItems. It can have none, and there is no upper bound defined.

When an AttributeTraceItem is created, its TraceDirective must be assigned.
When an AttributeTraceItem is deleted, its TraceDirective is not deleted and its list of AttributeTraceItems is decreased.
When a TraceDirective is deleted, its AttributeTraceItems are not deleted. They are assigned to another TraceDirective.
" URL="javascript:Action.selectAssociation('TraceDirective,AttributeTraceItem,* ,1 ')" ];
  "TraceDirective" -> "StateMachineTraceItem" [dir="none", taillabel="1 ", headlabel="* ", tooltip="TraceDirective 1  -- *  StateMachineTraceItem

A StateMachineTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

When a StateMachineTraceItem is created, its TraceDirective must be assigned.
When a StateMachineTraceItem is deleted, its TraceDirective is not deleted and its list of StateMachineTraceItems is decreased.
When a TraceDirective is deleted, its StateMachineTraceItems are not deleted. They are assigned to another TraceDirective.
" headtooltip="TraceDirective 1  -- *  StateMachineTraceItem

A StateMachineTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

When a StateMachineTraceItem is created, its TraceDirective must be assigned.
When a StateMachineTraceItem is deleted, its TraceDirective is not deleted and its list of StateMachineTraceItems is decreased.
When a TraceDirective is deleted, its StateMachineTraceItems are not deleted. They are assigned to another TraceDirective.
" tailtooltip="TraceDirective 1  -- *  StateMachineTraceItem

A StateMachineTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

When a StateMachineTraceItem is created, its TraceDirective must be assigned.
When a StateMachineTraceItem is deleted, its TraceDirective is not deleted and its list of StateMachineTraceItems is decreased.
When a TraceDirective is deleted, its StateMachineTraceItems are not deleted. They are assigned to another TraceDirective.
" URL="javascript:Action.selectAssociation('TraceDirective,StateMachineTraceItem,* ,1 ')" ];
  "TraceDirective" -> "MethodTraceItem" [dir="none", taillabel="1 ", headlabel="* ", tooltip="TraceDirective 1  -- *  MethodTraceItem

A MethodTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some MethodTraceItems. It can have none, and there is no upper bound defined.

When a MethodTraceItem is created, its TraceDirective must be assigned.
When a MethodTraceItem is deleted, its TraceDirective is not deleted and its list of MethodTraceItems is decreased.
When a TraceDirective is deleted, its MethodTraceItems are not deleted. They are assigned to another TraceDirective.
" headtooltip="TraceDirective 1  -- *  MethodTraceItem

A MethodTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some MethodTraceItems. It can have none, and there is no upper bound defined.

When a MethodTraceItem is created, its TraceDirective must be assigned.
When a MethodTraceItem is deleted, its TraceDirective is not deleted and its list of MethodTraceItems is decreased.
When a TraceDirective is deleted, its MethodTraceItems are not deleted. They are assigned to another TraceDirective.
" tailtooltip="TraceDirective 1  -- *  MethodTraceItem

A MethodTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some MethodTraceItems. It can have none, and there is no upper bound defined.

When a MethodTraceItem is created, its TraceDirective must be assigned.
When a MethodTraceItem is deleted, its TraceDirective is not deleted and its list of MethodTraceItems is decreased.
When a TraceDirective is deleted, its MethodTraceItems are not deleted. They are assigned to another TraceDirective.
" URL="javascript:Action.selectAssociation('TraceDirective,MethodTraceItem,* ,1 ')" ];
  "TraceDirective" -> "AssociationTraceItem" [dir="none", taillabel="1 ", headlabel="* ", tooltip="TraceDirective 1  -- *  AssociationTraceItem

An AssociationTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AssociationTraceItems. It can have none, and there is no upper bound defined.

When an AssociationTraceItem is created, its TraceDirective must be assigned.
When an AssociationTraceItem is deleted, its TraceDirective is not deleted and its list of AssociationTraceItems is decreased.
When a TraceDirective is deleted, its AssociationTraceItems are not deleted. They are assigned to another TraceDirective.
" headtooltip="TraceDirective 1  -- *  AssociationTraceItem

An AssociationTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AssociationTraceItems. It can have none, and there is no upper bound defined.

When an AssociationTraceItem is created, its TraceDirective must be assigned.
When an AssociationTraceItem is deleted, its TraceDirective is not deleted and its list of AssociationTraceItems is decreased.
When a TraceDirective is deleted, its AssociationTraceItems are not deleted. They are assigned to another TraceDirective.
" tailtooltip="TraceDirective 1  -- *  AssociationTraceItem

An AssociationTraceItem has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some AssociationTraceItems. It can have none, and there is no upper bound defined.

When an AssociationTraceItem is created, its TraceDirective must be assigned.
When an AssociationTraceItem is deleted, its TraceDirective is not deleted and its list of AssociationTraceItems is decreased.
When a TraceDirective is deleted, its AssociationTraceItems are not deleted. They are assigned to another TraceDirective.
" URL="javascript:Action.selectAssociation('TraceDirective,AssociationTraceItem,* ,1 ')" ];
  "TraceDirective" -> "TraceCondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* condition", tooltip="TraceDirective 1  -> * condition TraceCondition

A TraceCondition called condition has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some TraceConditions called condition. It can have none, and there is no upper bound defined.

When a TraceCondition is created, its TraceDirective must be assigned.
When a TraceCondition is deleted, its TraceDirective is not deleted and its list of TraceConditions is decreased.
When a TraceDirective is deleted, its TraceConditions are not deleted. They are assigned to another TraceDirective.
" headtooltip="TraceDirective 1  -> * condition TraceCondition

A TraceCondition called condition has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some TraceConditions called condition. It can have none, and there is no upper bound defined.

When a TraceCondition is created, its TraceDirective must be assigned.
When a TraceCondition is deleted, its TraceDirective is not deleted and its list of TraceConditions is decreased.
When a TraceDirective is deleted, its TraceConditions are not deleted. They are assigned to another TraceDirective.
" tailtooltip="TraceDirective 1  -> * condition TraceCondition

A TraceCondition called condition has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective has some TraceConditions called condition. It can have none, and there is no upper bound defined.

When a TraceCondition is created, its TraceDirective must be assigned.
When a TraceCondition is deleted, its TraceDirective is not deleted and its list of TraceConditions is decreased.
When a TraceDirective is deleted, its TraceConditions are not deleted. They are assigned to another TraceDirective.
" URL="javascript:Action.selectAssociation('TraceDirective,TraceCondition,* condition,1 ')" ];
  "TraceDirective" -> "Postfix" [dir="none", taillabel="1 ", headlabel="0..1 ", tooltip="TraceDirective 1  -- 0..1  Postfix

A Postfix has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a Postfix. It can have none or just 1. 

" headtooltip="TraceDirective 1  -- 0..1  Postfix

A Postfix has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a Postfix. It can have none or just 1. 

" tailtooltip="TraceDirective 1  -- 0..1  Postfix

A Postfix has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a Postfix. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('TraceDirective,Postfix,0..1 ,1 ')" ];
  "TraceDirective" -> "TraceRecord" [dir="none", taillabel="1 ", headlabel="0..1 ", tooltip="TraceDirective 1  -- 0..1  TraceRecord

A TraceRecord has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a TraceRecord. It can have none or just 1. 

" headtooltip="TraceDirective 1  -- 0..1  TraceRecord

A TraceRecord has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a TraceRecord. It can have none or just 1. 

" tailtooltip="TraceDirective 1  -- 0..1  TraceRecord

A TraceRecord has A TraceDirective. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceDirective.

A TraceDirective may have a TraceRecord. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('TraceDirective,TraceRecord,0..1 ,1 ')" ];
  "Postfix" -> "Condition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="Postfix 1  -> 0..1  Condition

A Condition has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a Condition. It can have none or just 1. 

" headtooltip="Postfix 1  -> 0..1  Condition

A Condition has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a Condition. It can have none or just 1. 

" tailtooltip="Postfix 1  -> 0..1  Condition

A Condition has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a Condition. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Postfix,Condition,0..1 ,1 ')" ];
  "Postfix" -> "TraceRecord" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="Postfix 1  -> 0..1  TraceRecord

A TraceRecord has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a TraceRecord. It can have none or just 1. 

" headtooltip="Postfix 1  -> 0..1  TraceRecord

A TraceRecord has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a TraceRecord. It can have none or just 1. 

" tailtooltip="Postfix 1  -> 0..1  TraceRecord

A TraceRecord has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix may have a TraceRecord. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Postfix,TraceRecord,0..1 ,1 ')" ];
  "Postfix" -> "LogLevel" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Postfix 1  -> *  LogLevel

A LogLevel has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix has some LogLevels. It can have none, and there is no upper bound defined.

When a LogLevel is created, its Postfix must be assigned.
When a LogLevel is deleted, its Postfix is not deleted and its list of LogLevels is decreased.
When a Postfix is deleted, its LogLevels are not deleted. They are assigned to another Postfix.
" headtooltip="Postfix 1  -> *  LogLevel

A LogLevel has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix has some LogLevels. It can have none, and there is no upper bound defined.

When a LogLevel is created, its Postfix must be assigned.
When a LogLevel is deleted, its Postfix is not deleted and its list of LogLevels is decreased.
When a Postfix is deleted, its LogLevels are not deleted. They are assigned to another Postfix.
" tailtooltip="Postfix 1  -> *  LogLevel

A LogLevel has A Postfix. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Postfix.

A Postfix has some LogLevels. It can have none, and there is no upper bound defined.

When a LogLevel is created, its Postfix must be assigned.
When a LogLevel is deleted, its Postfix is not deleted and its list of LogLevels is decreased.
When a Postfix is deleted, its LogLevels are not deleted. They are assigned to another Postfix.
" URL="javascript:Action.selectAssociation('Postfix,LogLevel,* ,1 ')" ];
  "AttributeTraceItem" -> "UmpleVariable" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="AttributeTraceItem *  -> *  UmpleVariable

An UmpleVariable has some AttributeTraceItems. It can have none, and there is no upper bound defined.

An AttributeTraceItem has some UmpleVariables. It can have none, and there is no upper bound defined.

" headtooltip="AttributeTraceItem *  -> *  UmpleVariable

An UmpleVariable has some AttributeTraceItems. It can have none, and there is no upper bound defined.

An AttributeTraceItem has some UmpleVariables. It can have none, and there is no upper bound defined.

" tailtooltip="AttributeTraceItem *  -> *  UmpleVariable

An UmpleVariable has some AttributeTraceItems. It can have none, and there is no upper bound defined.

An AttributeTraceItem has some UmpleVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('AttributeTraceItem,UmpleVariable,* ,* ')" ];
  "StateMachineTraceItem" -> "StateMachine" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  StateMachine

A StateMachine has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a StateMachine. It can have none or just 1. 

" headtooltip="StateMachineTraceItem *  -- 0..1  StateMachine

A StateMachine has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a StateMachine. It can have none or just 1. 

" tailtooltip="StateMachineTraceItem *  -- 0..1  StateMachine

A StateMachine has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a StateMachine. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachineTraceItem,StateMachine,0..1 ,* ')" ];
  "StateMachineTraceItem" -> "State" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  State

A State has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a State. It can have none or just 1. 

" headtooltip="StateMachineTraceItem *  -- 0..1  State

A State has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a State. It can have none or just 1. 

" tailtooltip="StateMachineTraceItem *  -- 0..1  State

A State has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a State. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachineTraceItem,State,0..1 ,* ')" ];
  "StateMachineTraceItem" -> "Transition" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  Transition

A Transition has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a Transition. It can have none or just 1. 

" headtooltip="StateMachineTraceItem *  -- 0..1  Transition

A Transition has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a Transition. It can have none or just 1. 

" tailtooltip="StateMachineTraceItem *  -- 0..1  Transition

A Transition has some StateMachineTraceItems. It can have none, and there is no upper bound defined.

A StateMachineTraceItem may have a Transition. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('StateMachineTraceItem,Transition,0..1 ,* ')" ];
  "AssociationTraceItem" -> "AssociationVariable" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="AssociationTraceItem *  -> *  AssociationVariable

An AssociationVariable has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some AssociationVariables. It can have none, and there is no upper bound defined.

" headtooltip="AssociationTraceItem *  -> *  AssociationVariable

An AssociationVariable has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some AssociationVariables. It can have none, and there is no upper bound defined.

" tailtooltip="AssociationTraceItem *  -> *  AssociationVariable

An AssociationVariable has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some AssociationVariables. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('AssociationTraceItem,AssociationVariable,* ,* ')" ];
  "AssociationTraceItem" -> "Association" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="AssociationTraceItem *  -> *  Association

An Association has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some Associations. It can have none, and there is no upper bound defined.

" headtooltip="AssociationTraceItem *  -> *  Association

An Association has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some Associations. It can have none, and there is no upper bound defined.

" tailtooltip="AssociationTraceItem *  -> *  Association

An Association has some AssociationTraceItems. It can have none, and there is no upper bound defined.

An AssociationTraceItem has some Associations. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('AssociationTraceItem,Association,* ,* ')" ];
  "MethodTraceItem" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="MethodTraceItem *  -> *  Method

A Method has some MethodTraceItems. It can have none, and there is no upper bound defined.

A MethodTraceItem has some Methods. It can have none, and there is no upper bound defined.

" headtooltip="MethodTraceItem *  -> *  Method

A Method has some MethodTraceItems. It can have none, and there is no upper bound defined.

A MethodTraceItem has some Methods. It can have none, and there is no upper bound defined.

" tailtooltip="MethodTraceItem *  -> *  Method

A Method has some MethodTraceItems. It can have none, and there is no upper bound defined.

A MethodTraceItem has some Methods. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('MethodTraceItem,Method,* ,* ')" ];
  "TraceCase" -> "TraceDirective" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" headtooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" tailtooltip="TraceCase 1  -> *  TraceDirective

A TraceDirective has A TraceCase. It must always have exactly, one, and can never have none. And there is an upper bound of at most one TraceCase.

A TraceCase has some TraceDirectives. It can have none, and there is no upper bound defined.

When a TraceDirective is created, its TraceCase must be assigned.
When a TraceDirective is deleted, its TraceCase is not deleted and its list of TraceDirectives is decreased.
When a TraceCase is deleted, its TraceDirectives are not deleted. They are assigned to another TraceCase.
" URL="javascript:Action.selectAssociation('TraceCase,TraceDirective,* ,1 ')" ];
  "TraceCondition" -> "ConditionRhs" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 rhs", tooltip="TraceCondition 0..1  -> 1 rhs ConditionRhs

A ConditionRhs called rhs may have a TraceCondition. It can have none or just 1. 

A TraceCondition has A ConditionRhs called rhs. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConditionRhs called rhs.

" headtooltip="TraceCondition 0..1  -> 1 rhs ConditionRhs

A ConditionRhs called rhs may have a TraceCondition. It can have none or just 1. 

A TraceCondition has A ConditionRhs called rhs. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConditionRhs called rhs.

" tailtooltip="TraceCondition 0..1  -> 1 rhs ConditionRhs

A ConditionRhs called rhs may have a TraceCondition. It can have none or just 1. 

A TraceCondition has A ConditionRhs called rhs. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ConditionRhs called rhs.

" URL="javascript:Action.selectAssociation('TraceCondition,ConditionRhs,1 rhs,0..1 ')" ];
  "TraceRecord" -> "Attribute" [dir="none", taillabel="* ", headlabel="* ", tooltip="TraceRecord *  -- *  Attribute

An Attribute has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some Attributes. It can have none, and there is no upper bound defined.

" headtooltip="TraceRecord *  -- *  Attribute

An Attribute has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some Attributes. It can have none, and there is no upper bound defined.

" tailtooltip="TraceRecord *  -- *  Attribute

An Attribute has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some Attributes. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TraceRecord,Attribute,* ,* ')" ];
  "TraceRecord" -> "StateMachine" [dir="none", taillabel="* ", headlabel="* ", tooltip="TraceRecord *  -- *  StateMachine

A StateMachine has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some StateMachines. It can have none, and there is no upper bound defined.

" headtooltip="TraceRecord *  -- *  StateMachine

A StateMachine has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some StateMachines. It can have none, and there is no upper bound defined.

" tailtooltip="TraceRecord *  -- *  StateMachine

A StateMachine has some TraceRecords. It can have none, and there is no upper bound defined.

A TraceRecord has some StateMachines. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TraceRecord,StateMachine,* ,* ')" ];
  "Primitive" -> "BasicConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* constraints", tooltip="Primitive *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Primitives. It can have none, and there is no upper bound defined.

A Primitive has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" headtooltip="Primitive *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Primitives. It can have none, and there is no upper bound defined.

A Primitive has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" tailtooltip="Primitive *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Primitives. It can have none, and there is no upper bound defined.

A Primitive has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Primitive,BasicConstraint,* constraints,* ')" ];
  "PortBinding" -> "Port" [dir="none", taillabel="* ", headlabel="1 fromPort", tooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" headtooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" tailtooltip="PortBinding *  -- 1 fromPort Port

A Port called fromPort has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding has A Port called fromPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called fromPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" URL="javascript:Action.selectAssociation('PortBinding,Port,1 fromPort,* ')" ];
  "PortBinding" -> "Port" [dir="none", taillabel="* connector", headlabel="1 toPort", tooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" headtooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" tailtooltip="PortBinding * connector -- 1 toPort Port

A Port called toPort has some PortBindings called connector. It can have none, and there is no upper bound defined.

A PortBinding called connector has A Port called toPort. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Port called toPort.

When a PortBinding is created, its Port must be assigned.
When a PortBinding is deleted, its Port is not deleted and its list of PortBindings is decreased.
When a Port is deleted, its PortBindings are not deleted. They are assigned to another Port.
" URL="javascript:Action.selectAssociation('PortBinding,Port,1 toPort,* connector')" ];
  "PortBinding" -> "AnonymousFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 specialHandler", tooltip="PortBinding *  -> 0..1 specialHandler AnonymousFunction

An AnonymousFunction called specialHandler has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding may have an AnonymousFunction called specialHandler. It can have none or just 1. 

" headtooltip="PortBinding *  -> 0..1 specialHandler AnonymousFunction

An AnonymousFunction called specialHandler has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding may have an AnonymousFunction called specialHandler. It can have none or just 1. 

" tailtooltip="PortBinding *  -> 0..1 specialHandler AnonymousFunction

An AnonymousFunction called specialHandler has some PortBindings. It can have none, and there is no upper bound defined.

A PortBinding may have an AnonymousFunction called specialHandler. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('PortBinding,AnonymousFunction,0..1 specialHandler,* ')" ];
  "Monitor" -> "BasicConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* constraints", tooltip="Monitor *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" headtooltip="Monitor *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" tailtooltip="Monitor *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Monitor,BasicConstraint,* constraints,* ')" ];
  "Monitor" -> "TimerConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="Monitor *  -> *  TimerConstraint

A TimerConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some TimerConstraints. It can have none, and there is no upper bound defined.

" headtooltip="Monitor *  -> *  TimerConstraint

A TimerConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some TimerConstraints. It can have none, and there is no upper bound defined.

" tailtooltip="Monitor *  -> *  TimerConstraint

A TimerConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some TimerConstraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Monitor,TimerConstraint,* ,* ')" ];
  "Monitor" -> "PortConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="Monitor *  -> *  PortConstraint

A PortConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some PortConstraints. It can have none, and there is no upper bound defined.

" headtooltip="Monitor *  -> *  PortConstraint

A PortConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some PortConstraints. It can have none, and there is no upper bound defined.

" tailtooltip="Monitor *  -> *  PortConstraint

A PortConstraint has some Monitors. It can have none, and there is no upper bound defined.

A Monitor has some PortConstraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Monitor,PortConstraint,* ,* ')" ];
  "Monitor" -> "ActiveMethod" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="Monitor 1  -> 1  ActiveMethod

An ActiveMethod has A Monitor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Monitor.

A Monitor has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

There must always be an equal number of ActiveMethod and Monitor, connected as Pairs.
When a Monitor is created, its ActiveMethod must be created at the same time.
When a Monitor is deleted, its ActiveMethod is deleted at the same time.
" headtooltip="Monitor 1  -> 1  ActiveMethod

An ActiveMethod has A Monitor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Monitor.

A Monitor has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

There must always be an equal number of ActiveMethod and Monitor, connected as Pairs.
When a Monitor is created, its ActiveMethod must be created at the same time.
When a Monitor is deleted, its ActiveMethod is deleted at the same time.
" tailtooltip="Monitor 1  -> 1  ActiveMethod

An ActiveMethod has A Monitor. It must always have exactly, one, and can never have none. And there is an upper bound of at most one Monitor.

A Monitor has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

There must always be an equal number of ActiveMethod and Monitor, connected as Pairs.
When a Monitor is created, its ActiveMethod must be created at the same time.
When a Monitor is deleted, its ActiveMethod is deleted at the same time.
" URL="javascript:Action.selectAssociation('Monitor,ActiveMethod,1 ,1 ')" ];
  "PortConstraint" -> "BasicConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* constraints", tooltip="PortConstraint *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some PortConstraints. It can have none, and there is no upper bound defined.

A PortConstraint has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" headtooltip="PortConstraint *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some PortConstraints. It can have none, and there is no upper bound defined.

A PortConstraint has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" tailtooltip="PortConstraint *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some PortConstraints. It can have none, and there is no upper bound defined.

A PortConstraint has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('PortConstraint,BasicConstraint,* constraints,* ')" ];
  "ActiveMethod" -> "Monitor" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* watchList", tooltip="ActiveMethod 0..1  -> * watchList Monitor

A Monitor called watchList may have an ActiveMethod. It can have none or just 1. 

An ActiveMethod has some Monitors called watchList. It can have none, and there is no upper bound defined.

" headtooltip="ActiveMethod 0..1  -> * watchList Monitor

A Monitor called watchList may have an ActiveMethod. It can have none or just 1. 

An ActiveMethod has some Monitors called watchList. It can have none, and there is no upper bound defined.

" tailtooltip="ActiveMethod 0..1  -> * watchList Monitor

A Monitor called watchList may have an ActiveMethod. It can have none or just 1. 

An ActiveMethod has some Monitors called watchList. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('ActiveMethod,Monitor,* watchList,0..1 ')" ];
  "ActiveMethod" -> "MethodParameter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="ActiveMethod 1  -> *  MethodParameter

A MethodParameter has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its ActiveMethod must be assigned.
When a MethodParameter is deleted, its ActiveMethod is not deleted and its list of MethodParameters is decreased.
When an ActiveMethod is deleted, its MethodParameters are not deleted. They are assigned to another ActiveMethod.
" headtooltip="ActiveMethod 1  -> *  MethodParameter

A MethodParameter has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its ActiveMethod must be assigned.
When a MethodParameter is deleted, its ActiveMethod is not deleted and its list of MethodParameters is decreased.
When an ActiveMethod is deleted, its MethodParameters are not deleted. They are assigned to another ActiveMethod.
" tailtooltip="ActiveMethod 1  -> *  MethodParameter

A MethodParameter has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some MethodParameters. It can have none, and there is no upper bound defined.

When a MethodParameter is created, its ActiveMethod must be assigned.
When a MethodParameter is deleted, its ActiveMethod is not deleted and its list of MethodParameters is decreased.
When an ActiveMethod is deleted, its MethodParameters are not deleted. They are assigned to another ActiveMethod.
" URL="javascript:Action.selectAssociation('ActiveMethod,MethodParameter,* ,1 ')" ];
  "ActiveMethod" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" headtooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" tailtooltip="ActiveMethod 1  -> *  Comment

A Comment has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Comments. It can have none, and there is no upper bound defined.

When a Comment is created, its ActiveMethod must be assigned.
When a Comment is deleted, its ActiveMethod is not deleted and its list of Comments is decreased.
When an ActiveMethod is deleted, its Comments are not deleted. They are assigned to another ActiveMethod.
" URL="javascript:Action.selectAssociation('ActiveMethod,Comment,* ,1 ')" ];
  "ActiveMethod" -> "Requirement" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="ActiveMethod 1  -> *  Requirement

A Requirement has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Requirements. It can have none, and there is no upper bound defined.

When a Requirement is created, its ActiveMethod must be assigned.
When a Requirement is deleted, its ActiveMethod is not deleted and its list of Requirements is decreased.
When an ActiveMethod is deleted, its Requirements are not deleted. They are assigned to another ActiveMethod.
" headtooltip="ActiveMethod 1  -> *  Requirement

A Requirement has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Requirements. It can have none, and there is no upper bound defined.

When a Requirement is created, its ActiveMethod must be assigned.
When a Requirement is deleted, its ActiveMethod is not deleted and its list of Requirements is decreased.
When an ActiveMethod is deleted, its Requirements are not deleted. They are assigned to another ActiveMethod.
" tailtooltip="ActiveMethod 1  -> *  Requirement

A Requirement has An ActiveMethod. It must always have exactly, one, and can never have none. And there is an upper bound of at most one ActiveMethod.

An ActiveMethod has some Requirements. It can have none, and there is no upper bound defined.

When a Requirement is created, its ActiveMethod must be assigned.
When a Requirement is deleted, its ActiveMethod is not deleted and its list of Requirements is decreased.
When an ActiveMethod is deleted, its Requirements are not deleted. They are assigned to another ActiveMethod.
" URL="javascript:Action.selectAssociation('ActiveMethod,Requirement,* ,1 ')" ];
  "Trigger" -> "BasicConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* constraints", tooltip="Trigger *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" headtooltip="Trigger *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" tailtooltip="Trigger *  -> * constraints BasicConstraint

A BasicConstraint called constraints has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some BasicConstraints called constraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Trigger,BasicConstraint,* constraints,* ')" ];
  "Trigger" -> "TimerConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* ", tooltip="Trigger *  -> *  TimerConstraint

A TimerConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some TimerConstraints. It can have none, and there is no upper bound defined.

" headtooltip="Trigger *  -> *  TimerConstraint

A TimerConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some TimerConstraints. It can have none, and there is no upper bound defined.

" tailtooltip="Trigger *  -> *  TimerConstraint

A TimerConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger has some TimerConstraints. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Trigger,TimerConstraint,* ,* ')" ];
  "Trigger" -> "MessageConstraint" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Trigger *  -> 0..1  MessageConstraint

A MessageConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a MessageConstraint. It can have none or just 1. 

" headtooltip="Trigger *  -> 0..1  MessageConstraint

A MessageConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a MessageConstraint. It can have none or just 1. 

" tailtooltip="Trigger *  -> 0..1  MessageConstraint

A MessageConstraint has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a MessageConstraint. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Trigger,MessageConstraint,0..1 ,* ')" ];
  "Trigger" -> "DeferredCall" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Trigger *  -> 0..1  DeferredCall

A DeferredCall has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a DeferredCall. It can have none or just 1. 

" headtooltip="Trigger *  -> 0..1  DeferredCall

A DeferredCall has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a DeferredCall. It can have none or just 1. 

" tailtooltip="Trigger *  -> 0..1  DeferredCall

A DeferredCall has some Triggers. It can have none, and there is no upper bound defined.

A Trigger may have a DeferredCall. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('Trigger,DeferredCall,0..1 ,* ')" ];
  "DeferredCall" -> "DeferredFunction" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* list", tooltip="DeferredCall 0..1  -> * list DeferredFunction

A DeferredFunction called list may have a DeferredCall. It can have none or just 1. 

A DeferredCall has some DeferredFunctions called list. It can have none, and there is no upper bound defined.

" headtooltip="DeferredCall 0..1  -> * list DeferredFunction

A DeferredFunction called list may have a DeferredCall. It can have none or just 1. 

A DeferredCall has some DeferredFunctions called list. It can have none, and there is no upper bound defined.

" tailtooltip="DeferredCall 0..1  -> * list DeferredFunction

A DeferredFunction called list may have a DeferredCall. It can have none or just 1. 

A DeferredCall has some DeferredFunctions called list. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('DeferredCall,DeferredFunction,* list,0..1 ')" ];
  "DeferredCall" -> "DeferredFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 then", tooltip="DeferredCall *  -> 0..1 then DeferredFunction

A DeferredFunction called then has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called then. It can have none or just 1. 

" headtooltip="DeferredCall *  -> 0..1 then DeferredFunction

A DeferredFunction called then has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called then. It can have none or just 1. 

" tailtooltip="DeferredCall *  -> 0..1 then DeferredFunction

A DeferredFunction called then has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called then. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('DeferredCall,DeferredFunction,0..1 then,* ')" ];
  "DeferredCall" -> "DeferredFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 timeout", tooltip="DeferredCall *  -> 0..1 timeout DeferredFunction

A DeferredFunction called timeout has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called timeout. It can have none or just 1. 

" headtooltip="DeferredCall *  -> 0..1 timeout DeferredFunction

A DeferredFunction called timeout has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called timeout. It can have none or just 1. 

" tailtooltip="DeferredCall *  -> 0..1 timeout DeferredFunction

A DeferredFunction called timeout has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called timeout. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('DeferredCall,DeferredFunction,0..1 timeout,* ')" ];
  "DeferredCall" -> "DeferredFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 resolve", tooltip="DeferredCall *  -> 0..1 resolve DeferredFunction

A DeferredFunction called resolve has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called resolve. It can have none or just 1. 

" headtooltip="DeferredCall *  -> 0..1 resolve DeferredFunction

A DeferredFunction called resolve has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called resolve. It can have none or just 1. 

" tailtooltip="DeferredCall *  -> 0..1 resolve DeferredFunction

A DeferredFunction called resolve has some DeferredCalls. It can have none, and there is no upper bound defined.

A DeferredCall may have a DeferredFunction called resolve. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('DeferredCall,DeferredFunction,0..1 resolve,* ')" ];
  "DeferredFunction" -> "PortFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="DeferredFunction *  -> 0..1  PortFunction

A PortFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have a PortFunction. It can have none or just 1. 

" headtooltip="DeferredFunction *  -> 0..1  PortFunction

A PortFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have a PortFunction. It can have none or just 1. 

" tailtooltip="DeferredFunction *  -> 0..1  PortFunction

A PortFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have a PortFunction. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('DeferredFunction,PortFunction,0..1 ,* ')" ];
  "DeferredFunction" -> "AnonymousFunction" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="DeferredFunction *  -> 0..1  AnonymousFunction

An AnonymousFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have an AnonymousFunction. It can have none or just 1. 

" headtooltip="DeferredFunction *  -> 0..1  AnonymousFunction

An AnonymousFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have an AnonymousFunction. It can have none or just 1. 

" tailtooltip="DeferredFunction *  -> 0..1  AnonymousFunction

An AnonymousFunction has some DeferredFunctions. It can have none, and there is no upper bound defined.

A DeferredFunction may have an AnonymousFunction. It can have none or just 1. 

" URL="javascript:Action.selectAssociation('DeferredFunction,AnonymousFunction,0..1 ,* ')" ];
  "Protocol" -> "Monitor" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* watchList", tooltip="Protocol 0..1  -> * watchList Monitor

A Monitor called watchList may have a Protocol. It can have none or just 1. 

A Protocol has some Monitors called watchList. It can have none, and there is no upper bound defined.

" headtooltip="Protocol 0..1  -> * watchList Monitor

A Monitor called watchList may have a Protocol. It can have none or just 1. 

A Protocol has some Monitors called watchList. It can have none, and there is no upper bound defined.

" tailtooltip="Protocol 0..1  -> * watchList Monitor

A Monitor called watchList may have a Protocol. It can have none or just 1. 

A Protocol has some Monitors called watchList. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Protocol,Monitor,* watchList,0..1 ')" ];
  "Protocol" -> "Trigger" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* incomingList", tooltip="Protocol 0..1  -> * incomingList Trigger

A Trigger called incomingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called incomingList. It can have none, and there is no upper bound defined.

" headtooltip="Protocol 0..1  -> * incomingList Trigger

A Trigger called incomingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called incomingList. It can have none, and there is no upper bound defined.

" tailtooltip="Protocol 0..1  -> * incomingList Trigger

A Trigger called incomingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called incomingList. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Protocol,Trigger,* incomingList,0..1 ')" ];
  "Protocol" -> "Trigger" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* outgoingList", tooltip="Protocol 0..1  -> * outgoingList Trigger

A Trigger called outgoingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called outgoingList. It can have none, and there is no upper bound defined.

" headtooltip="Protocol 0..1  -> * outgoingList Trigger

A Trigger called outgoingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called outgoingList. It can have none, and there is no upper bound defined.

" tailtooltip="Protocol 0..1  -> * outgoingList Trigger

A Trigger called outgoingList may have a Protocol. It can have none or just 1. 

A Protocol has some Triggers called outgoingList. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('Protocol,Trigger,* outgoingList,0..1 ')" ];
  "TemplateElement" -> "TemplateField" [dir="none", taillabel="0..1 ", headlabel="* fields", tooltip="TemplateElement 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateElement. It can have none or just 1. 

A TemplateElement has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" headtooltip="TemplateElement 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateElement. It can have none or just 1. 

A TemplateElement has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateElement 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateElement. It can have none or just 1. 

A TemplateElement has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateElement,TemplateField,* fields,0..1 ')" ];
  "TemplateElement" -> "TemplateElement" [dir="none", taillabel="0..1 parentElement", headlabel="* subElements", tooltip="TemplateElement 0..1 parentElement -- * subElements TemplateElement

A TemplateElement called subElements may have a TemplateElement called parentElement. It can have none or just 1. 

A TemplateElement called parentElement has some TemplateElements called subElements. It can have none, and there is no upper bound defined.

" headtooltip="TemplateElement 0..1 parentElement -- * subElements TemplateElement

A TemplateElement called subElements may have a TemplateElement called parentElement. It can have none or just 1. 

A TemplateElement called parentElement has some TemplateElements called subElements. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateElement 0..1 parentElement -- * subElements TemplateElement

A TemplateElement called subElements may have a TemplateElement called parentElement. It can have none or just 1. 

A TemplateElement called parentElement has some TemplateElements called subElements. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateElement,TemplateElement,* subElements,0..1 parentElement')" ];
  "UmpleInternalParser" -> "NameSpace" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* parsedNameSpaces", tooltip="UmpleInternalParser 1  -> * parsedNameSpaces NameSpace

A NameSpace called parsedNameSpaces has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some NameSpaces called parsedNameSpaces. It can have none, and there is no upper bound defined.

When a NameSpace is created, its UmpleInternalParser must be assigned.
When a NameSpace is deleted, its UmpleInternalParser is not deleted and its list of NameSpaces is decreased.
When an UmpleInternalParser is deleted, its NameSpaces are not deleted. They are assigned to another UmpleInternalParser.
" headtooltip="UmpleInternalParser 1  -> * parsedNameSpaces NameSpace

A NameSpace called parsedNameSpaces has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some NameSpaces called parsedNameSpaces. It can have none, and there is no upper bound defined.

When a NameSpace is created, its UmpleInternalParser must be assigned.
When a NameSpace is deleted, its UmpleInternalParser is not deleted and its list of NameSpaces is decreased.
When an UmpleInternalParser is deleted, its NameSpaces are not deleted. They are assigned to another UmpleInternalParser.
" tailtooltip="UmpleInternalParser 1  -> * parsedNameSpaces NameSpace

A NameSpace called parsedNameSpaces has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some NameSpaces called parsedNameSpaces. It can have none, and there is no upper bound defined.

When a NameSpace is created, its UmpleInternalParser must be assigned.
When a NameSpace is deleted, its UmpleInternalParser is not deleted and its list of NameSpaces is decreased.
When an UmpleInternalParser is deleted, its NameSpaces are not deleted. They are assigned to another UmpleInternalParser.
" URL="javascript:Action.selectAssociation('UmpleInternalParser,NameSpace,* parsedNameSpaces,1 ')" ];
  "UmpleInternalParser" -> "ErrorType" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* messagesToExpect", tooltip="UmpleInternalParser 1  -> * messagesToExpect ErrorType

An ErrorType called messagesToExpect has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called messagesToExpect. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" headtooltip="UmpleInternalParser 1  -> * messagesToExpect ErrorType

An ErrorType called messagesToExpect has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called messagesToExpect. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" tailtooltip="UmpleInternalParser 1  -> * messagesToExpect ErrorType

An ErrorType called messagesToExpect has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called messagesToExpect. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" URL="javascript:Action.selectAssociation('UmpleInternalParser,ErrorType,* messagesToExpect,1 ')" ];
  "UmpleInternalParser" -> "ErrorType" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* warningsToIgnore", tooltip="UmpleInternalParser 1  -> * warningsToIgnore ErrorType

An ErrorType called warningsToIgnore has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called warningsToIgnore. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" headtooltip="UmpleInternalParser 1  -> * warningsToIgnore ErrorType

An ErrorType called warningsToIgnore has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called warningsToIgnore. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" tailtooltip="UmpleInternalParser 1  -> * warningsToIgnore ErrorType

An ErrorType called warningsToIgnore has An UmpleInternalParser. It must always have exactly, one, and can never have none. And there is an upper bound of at most one UmpleInternalParser.

An UmpleInternalParser has some ErrorTypes called warningsToIgnore. It can have none, and there is no upper bound defined.

When an ErrorType is created, its UmpleInternalParser must be assigned.
When an ErrorType is deleted, its UmpleInternalParser is not deleted and its list of ErrorTypes is decreased.
When an UmpleInternalParser is deleted, its ErrorTypes are not deleted. They are assigned to another UmpleInternalParser.
" URL="javascript:Action.selectAssociation('UmpleInternalParser,ErrorType,* warningsToIgnore,1 ')" ];
  "CompositeStructureTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* components", tooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" headtooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" tailtooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass

An UmpleClass called components may have a CompositeStructureTokenAnalyzer. It can have none or just 1. 

A CompositeStructureTokenAnalyzer has some UmpleClasss called components. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('CompositeStructureTokenAnalyzer,UmpleClass,* components,0..1 ')" ];
  "TemplateAttributeParser" -> "TemplateElement" [dir="none", taillabel="0..1 ", headlabel="* elements", tooltip="TemplateAttributeParser 0..1  -- * elements TemplateElement

A TemplateElement called elements may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateElements called elements. It can have none, and there is no upper bound defined.

" headtooltip="TemplateAttributeParser 0..1  -- * elements TemplateElement

A TemplateElement called elements may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateElements called elements. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateAttributeParser 0..1  -- * elements TemplateElement

A TemplateElement called elements may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateElements called elements. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateAttributeParser,TemplateElement,* elements,0..1 ')" ];
  "TemplateAttributeParser" -> "TemplateField" [dir="none", taillabel="0..1 ", headlabel="* fields", tooltip="TemplateAttributeParser 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" headtooltip="TemplateAttributeParser 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateAttributeParser 0..1  -- * fields TemplateField

A TemplateField called fields may have a TemplateAttributeParser. It can have none or just 1. 

A TemplateAttributeParser has some TemplateFields called fields. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateAttributeParser,TemplateField,* fields,0..1 ')" ];
  "TemplateTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* templates", tooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" headtooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" tailtooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass

An UmpleClass called templates may have a TemplateTokenAnalyzer. It can have none or just 1. 

A TemplateTokenAnalyzer has some UmpleClasss called templates. It can have none, and there is no upper bound defined.

" URL="javascript:Action.selectAssociation('TemplateTokenAnalyzer,UmpleClass,* templates,0..1 ')" ];
}
