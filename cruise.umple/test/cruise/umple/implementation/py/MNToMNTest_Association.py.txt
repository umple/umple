#PLEASE DO NOT EDIT THIS CODE
#This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!
# line 1 "MNToMNTest.ump"

class Mentor():
    #------------------------
    # MEMBER VARIABLES
    #------------------------
    #Mentor Attributes
    #Mentor Associations
    #------------------------
    # CONSTRUCTOR
    #------------------------
    def __init__(self, aName):
        self._students = None
        self._name = None
        self._name = aName
        self._students = []

    #------------------------
    # INTERFACE
    #------------------------
    def setName(self, aName):
        wasSet = False
        self._name = aName
        wasSet = True
        return wasSet

    def getName(self):
        return self._name

    # Code from template association_GetMany 
    def getStudent(self, index):
        aStudent = self._students[index]
        return aStudent

    def getStudents(self):
        newStudents = tuple(self._students)
        return newStudents

    def numberOfStudents(self):
        number = len(self._students)
        return number

    def hasStudents(self):
        has = len(self._students) > 0
        return has

    def indexOfStudent(self, aStudent):
        index = (-1 if not aStudent in self._students else self._students.index(aStudent))
        return index

    # Code from template association_IsNumberOfValidMethod 
    def isNumberOfStudentsValid(self):
        isValid = self.numberOfStudents() >= Mentor.minimumNumberOfStudents() and self.numberOfStudents() <= Mentor.maximumNumberOfStudents()
        return isValid

    # Code from template association_MinimumNumberOfMethod 
    @staticmethod
    def minimumNumberOfStudents():
        return 3

    # Code from template association_MaximumNumberOfMethod 
    @staticmethod
    def maximumNumberOfStudents():
        return 6

    # Code from template association_AddManyToManyMethod 
    def addStudent(self, aStudent):
        wasAdded = False
        if (aStudent) in self._students :
            return False
        if self.numberOfStudents() >= Mentor.maximumNumberOfStudents() :
            return wasAdded
        self._students.append(aStudent)
        if aStudent.indexOfMentor(self) != -1 :
            wasAdded = True
        else :
            wasAdded = aStudent.addMentor(self)
            if not wasAdded :
                self._students.remove(aStudent)
        return wasAdded

    # Code from template association_AddMNToMany 
    def removeStudent(self, aStudent):
        wasRemoved = False
        if not (aStudent) in self._students :
            return wasRemoved
        if self.numberOfStudents() <= Mentor.minimumNumberOfStudents() :
            return wasRemoved
        oldIndex = (-1 if not aStudent in self._students else self._students.index(aStudent))
        self._students.remove(oldIndex)
        if aStudent.indexOfMentor(self) == -1 :
            wasRemoved = True
        else :
            wasRemoved = aStudent.removeMentor(self)
            if not wasRemoved :
                self._students.insert(oldIndex, aStudent)
        return wasRemoved

    # Code from template association_SetMNToMany 
    def setStudents(self, *newStudents):
        newStudents = list(newStudents)
        wasSet = False
        verifiedStudents = []
        for aStudent in newStudents:
            if (aStudent) in verifiedStudents :
                continue
            verifiedStudents.append(aStudent)

        if len(verifiedStudents) != len(newStudents) or len(verifiedStudents) < Mentor.minimumNumberOfStudents() or len(verifiedStudents) > Mentor.maximumNumberOfStudents() :
            return wasSet
        oldStudents = self._students.copy()
        self._students.clear()
        for aNewStudent in verifiedStudents:
            self._students.append(aNewStudent)
            if (aNewStudent) in oldStudents :
                oldStudents.remove(aNewStudent)
            else :
                aNewStudent.addMentor(self)

        for anOldStudent in oldStudents:
            anOldStudent.removeMentor(self)

        wasSet = True
        return wasSet

    # Code from template association_AddIndexControlFunctions 
    def addStudentAt(self, aStudent, index):
        wasAdded = False
        if self.addStudent(aStudent) :
            if index < 0 :
                index = 0
            if index > self.numberOfStudents() :
                index = self.numberOfStudents() - 1
            self._students.remove(aStudent)
            self._students.insert(index, aStudent)
            wasAdded = True
        return wasAdded

    def addOrMoveStudentAt(self, aStudent, index):
        wasAdded = False
        if (aStudent) in self._students :
            if index < 0 :
                index = 0
            if index > self.numberOfStudents() :
                index = self.numberOfStudents() - 1
            self._students.remove(aStudent)
            self._students.insert(index, aStudent)
            wasAdded = True
        else :
            wasAdded = self.addStudentAt(aStudent, index)
        return wasAdded

    def delete(self):
        from example.Student import Student
        copyOfStudents = self._students.copy()
        self._students.clear()
        for aStudent in copyOfStudents:
            if aStudent.numberOfMentors() <= Student.minimumNumberOfMentors() :
                aStudent.delete()
            else :
                aStudent.removeMentor(self)

    def __str__(self):
        return str(super().__str__()) + "[" + "name" + ":" + str(self.getName()) + "]"

