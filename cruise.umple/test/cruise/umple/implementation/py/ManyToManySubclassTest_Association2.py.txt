#PLEASE DO NOT EDIT THIS CODE
#This code was generated using the UMPLE 1.35.0.7523.c616a4dce modeling language!


class Analyzer():
    #------------------------
    # MEMBER VARIABLES
    #------------------------
    #Analyzer Associations
    #------------------------
    # CONSTRUCTOR
    #------------------------
    def __init__(self):
        self._offspring = None
        self._offspring = []

    #------------------------
    # INTERFACE
    #------------------------
    # Code from template association_GetMany 
    def getOffspring1(self, index):
        aOffspring = self._offspring[index]
        return aOffspring

    def getOffspring2(self):
        newOffspring = tuple(self._offspring)
        return newOffspring

    def numberOfOffspring(self):
        number = len(self._offspring)
        return number

    def hasOffspring(self):
        has = len(self._offspring) > 0
        return has

    def indexOfOffspring(self, aOffspring):
        index = (-1 if not aOffspring in self._offspring else self._offspring.index(aOffspring))
        return index

    # Code from template association_MinimumNumberOfMethod 
    @staticmethod
    def minimumNumberOfOffspring():
        return 0

    # Code from template association_AddManyToManyMethod 
    def addOffspring(self, aOffspring):
        wasAdded = False
        if (aOffspring) in self._offspring :
            return False
        self._offspring.append(aOffspring)
        if aOffspring.indexOfParent(self) != -1 :
            wasAdded = True
        else :
            wasAdded = aOffspring.addParent(self)
            if not wasAdded :
                self._offspring.remove(aOffspring)
        return wasAdded

    # Code from template association_RemoveMany 
    def removeOffspring(self, aOffspring):
        wasRemoved = False
        if not (aOffspring) in self._offspring :
            return wasRemoved
        oldIndex = (-1 if not aOffspring in self._offspring else self._offspring.index(aOffspring))
        self._offspring.remove(oldIndex)
        if aOffspring.indexOfParent(self) == -1 :
            wasRemoved = True
        else :
            wasRemoved = aOffspring.removeParent(self)
            if not wasRemoved :
                self._offspring.insert(oldIndex, aOffspring)
        return wasRemoved

    # Code from template association_AddIndexControlFunctions 
    def addOffspringAt(self, aOffspring, index):
        wasAdded = False
        if self.addOffspring(aOffspring) :
            if index < 0 :
                index = 0
            if index > self.numberOfOffspring() :
                index = self.numberOfOffspring() - 1
            self._offspring.remove(aOffspring)
            self._offspring.insert(index, aOffspring)
            wasAdded = True
        return wasAdded

    def addOrMoveOffspringAt(self, aOffspring, index):
        wasAdded = False
        if (aOffspring) in self._offspring :
            if index < 0 :
                index = 0
            if index > self.numberOfOffspring() :
                index = self.numberOfOffspring() - 1
            self._offspring.remove(aOffspring)
            self._offspring.insert(index, aOffspring)
            wasAdded = True
        else :
            wasAdded = self.addOffspringAt(aOffspring, index)
        return wasAdded

    def delete(self):
        copyOfOffspring = self._offspring.copy()
        self._offspring.clear()
        for aOffspring in copyOfOffspring:
            aOffspring.removeParent(self)

    def getOffspring(self, *argv):
        if len(argv) == 1 and isinstance(argv[0], int) :
            return self.getOffspring1(argv[0])
        if len(argv) == 0 :
            return self.getOffspring2()
        raise TypeError("No method matches provided parameters")
