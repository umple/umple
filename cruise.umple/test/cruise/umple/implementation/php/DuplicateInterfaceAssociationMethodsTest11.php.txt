<?php
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE @UMPLE_VERSION@ modeling language!*/

class First implements I
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //First Associations
  private $seconds;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public function __construct()
  {
    $this->seconds = array();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public function getSecond_index($index)
  {
    $aSecond = $this->seconds[$index];
    return $aSecond;
  }

  public function getSeconds()
  {
    $newSeconds = $this->seconds;
    return $newSeconds;
  }

  public function numberOfSeconds()
  {
    $number = count($this->seconds);
    return $number;
  }

  public function hasSeconds()
  {
    $has = $this->numberOfSeconds() > 0;
    return $has;
  }

  public function indexOfSecond($aSecond)
  {
    $wasFound = false;
    $index = 0;
    foreach($this->seconds as $second)
    {
      if ($second->equals($aSecond))
      {
        $wasFound = true;
        break;
      }
      $index += 1;
    }
    $index = $wasFound ? $index : -1;
    return $index;
  }

  public function isNumberOfSecondsValid()
  {
    $isValid = $this->numberOfSeconds() >= self::minimumNumberOfSeconds() && $this->numberOfSeconds() <= self::maximumNumberOfSeconds();
    return $isValid;
  }

  public static function minimumNumberOfSeconds()
  {
    return 1;
  }

  public static function maximumNumberOfSeconds()
  {
    return 4;
  }

  public function addSecondVia()
  {
    if ($this->numberOfSeconds() >= self::maximumNumberOfSeconds())
    {
      return null;
    }
    else
    {
      return new Second($this);
    }
  }

  public function addSecond($aSecond)
  {
    $wasAdded = false;
    if ($this->indexOfSecond($aSecond) !== -1) { return false; }
    if ($this->numberOfSeconds() >= self::maximumNumberOfSeconds())
    {
      return $wasAdded;
    }

    $existingFirst = $aSecond->getFirst();
    $isNewFirst = $existingFirst != null && $this !== $existingFirst;

    if ($isNewFirst && $existingFirst->numberOfSeconds() <= self::minimumNumberOfSeconds())
    {
      return $wasAdded;
    }

    if ($isNewFirst)
    {
      $aSecond->setFirst($this);
    }
    else
    {
      $this->seconds[] = $aSecond;
    }
    $wasAdded = true;
    return $wasAdded;
  }

  public function removeSecond($aSecond)
  {
    $wasRemoved = false;
    //Unable to remove aSecond, as it must always have a first
    if ($this === $aSecond->getFirst())
    {
      return $wasRemoved;
    }

    //first already at minimum (1)
    if ($this->numberOfSeconds() <= self::minimumNumberOfSeconds())
    {
      return $wasRemoved;
    }

    unset($this->seconds[$this->indexOfSecond($aSecond)]);
    $this->seconds = array_values($this->seconds);
    $wasRemoved = true;
    return $wasRemoved;
  }

  public function addSecondAt($aSecond, $index)
  {  
    $wasAdded = false;
    if($this->addSecond($aSecond))
    {
      if($index < 0 ) { $index = 0; }
      if($index > $this->numberOfSeconds()) { $index = $this->numberOfSeconds() - 1; }
      array_splice($this->seconds, $this->indexOfSecond($aSecond), 1);
      array_splice($this->seconds, $index, 0, array($aSecond));
      $wasAdded = true;
    }
    return $wasAdded;
  }

  public function addOrMoveSecondAt($aSecond, $index)
  {
    $wasAdded = false;
    if($this->indexOfSecond($aSecond) !== -1)
    {
      if($index < 0 ) { $index = 0; }
      if($index > $this->numberOfSeconds()) { $index = $this->numberOfSeconds() - 1; }
      array_splice($this->seconds, $this->indexOfSecond($aSecond), 1);
      array_splice($this->seconds, $index, 0, array($aSecond));
      $wasAdded = true;
    } 
    else 
    {
      $wasAdded = $this->addSecondAt($aSecond, $index);
    }
    return $wasAdded;
  }

  public function equals($compareTo)
  {
    return $this === $compareTo;
  }

  public function delete()
  {
    foreach ($this->seconds as $aSecond)
    {
      $aSecond->delete();
    }
  }

  public function setSecond(Second $aSecond)
  {
          return "";
  }

  public function setSeconds(Second... $newSeconds)
  {
          return "";
  }

}
?>
