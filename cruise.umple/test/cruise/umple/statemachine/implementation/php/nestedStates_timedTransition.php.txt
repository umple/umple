<?php
/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.22.0.5146 modeling language!*/

class X
{

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //X State Machines
  private static $SmS1 = 1;
  private static $SmS2 = 2;
  private static $SmS1Null = 3;
  private static $SmS1S1a = 4;
  private static $SmS1S1b = 5;
  private $sm;
  private $smS1;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public function __construct()
  {
    $this->setSmS1(self::$SmS1Null);
    $this->setSm(self::$SmS1);
  }

  //------------------------
  // INTERFACE
  //------------------------

  public function getSmFullName()
  {
    $answer = $this->getSm();
    if ($this->smS1 != self::$SmS1Null) { $answer .= "." . $this->getSmS1(); }
    return $answer;
  }

  public function getSm()
  {
    if ($this->sm == self::$SmS1) { return "SmS1"; }
    elseif ($this->sm == self::$SmS2) { return "SmS2"; }
    return null;
  }

  public function getSmS1()
  {
    if ($this->smS1 == self::$SmS1Null) { return "SmS1Null"; }
    elseif ($this->smS1 == self::$SmS1S1a) { return "SmS1S1a"; }
    elseif ($this->smS1 == self::$SmS1S1b) { return "SmS1S1b"; }
    return null;
  }

  public function e2()
  {
    $wasEventProcessed = false;
    
    $aSm = $this->sm;
    if ($aSm == self::$SmS2)
    {
      $this->setSm(self::$SmS1);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  private function enterS1()
  {
    $wasEventProcessed = false;
    
    $aSmS1 = $this->smS1;
    if ($aSmS1 == self::$SmS1Null)
    {
      $this->setSmS1(self::$SmS1S1a);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  private function exitS1()
  {
    $wasEventProcessed = false;
    
    $aSmS1 = $this->smS1;
    if ($aSmS1 == self::$SmS1S1a)
    {
      $this->setSmS1(self::$SmS1Null);
      $wasEventProcessed = true;
    }
    elseif ($aSmS1 == self::$SmS1S1b)
    {
      $this->setSmS1(self::$SmS1Null);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  public function timeouts1aTos1b()
  {
    $wasEventProcessed = false;
    
    $aSmS1 = $this->smS1;
    if ($aSmS1 == self::$SmS1S1a)
    {
      $this->setSmS1(self::$SmS1S1b);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  public function e1()
  {
    $wasEventProcessed = false;
    
    $aSmS1 = $this->smS1;
    if ($aSmS1 == self::$SmS1S1b)
    {
      $this->exitSm();
      $this->setSm(self::$SmS2);
      $wasEventProcessed = true;
    }
    return $wasEventProcessed;
  }

  private function exitSm()
  {
    if ($this->sm == self::$SmS1)
    {
      $this->exitS1();
    }
  }

  private function setSm($aSm)
  {
    $this->sm = $aSm;

    // entry actions and do activities
    if ($this->sm == self::$SmS1)
    {
      if ($this->smS1 == self::$SmS1Null) { $this->setSmS1(self::$SmS1S1a); }
    }
  }

  private function setSmS1($aSmS1)
  {
    $this->smS1 = $aSmS1;
    if ($this->sm != self::$SmS1 && $aSmS1 != self::$SmS1Null) { $this->setSm(self::$SmS1); }
  }

  public function equals($compareTo)
  {
    return $this === $compareTo;
  }

  public function delete()
  {}

}
?>
