//In order to see the class diagram with traits, please select option "GraphViz Class" in the menu "OPTIONS" and then checkout traits in the section "SHOW VIEW".
//developed by Vahdat Abdelzad, in August 2015.

//A root class for all elements (classes) in the system.
class RootClass{
  abstract;
  autounique id;  
}

//A class which represent basic features of color.
class Color{
  isA RootClass;
  isA TEquality<TP1=Color>;
  String rgb;
  Integer getRed() {return 1;}
  Integer getBlue() {return 2;}
  Integer getGreen() {return 3;}
  Boolean isEqual(Color object) {return true;}
}

//used to draw geometric objects.
class Canvas {  
  isA RootClass;
  void paint (GeometricObject g) {/*implementation*/}
  void update (GeometricObject g) {/*implementation*/}
}

// a root abstract class for geometric objects.
class GeometricObject {
  abstract;
  isA RootClass;
  isA TDrawable;
  isA Subject<Observer=Canvas>;
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//an abstract class for two-dimensional objects such as circles and rectangles.
class Shape2D{
  abstract;
  isA GeometricObject;  
  isA TDrawableWithEdge;
  Point center;
  abstract Double getArea();
  abstract Double getPerimeterLength();
  
}

//an abstract class for three-dimensional objects such as cubes, prisms, cylinders and spheres.
class Shape3D {
  abstract;
  isA GeometricObject;
  Point center;
  abstract Double volume();
  abstract Double surfaceArea();
}

// a class for points. A point doesn't have a dimension.
class Point {
  isA GeometricObject;
  isA TEquality<TP1=Point>;
  Double pX;
  Double pY;
  Boolean isEqual (Point object) {return true;}
}

//a class for lines. A line doesn't have an end.
class Line {
  isA GeometricObject;
  isA TEquality<TP1=Line>;
  Point pA;
  Point pB;
  Boolean isEqual (Line object) {return true;}
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
// an abstract class for curved two-dimensional shapes.
//Trait TComparable applied here because we wanted to have type-checking through parameters. For example, curved shapes can only be accepted in the related methods.
class CurvedShape{
  abstract;
  isA Shape2D;
  isA TComparable <TP2=CurvedShape>;
}

// an abstract class for polygon.
//Trait TComparable applied here because we wanted to have type-checking through parameters. For example, polygon shapes can only be accepted in the related methods.
class Polygon {
  abstract;
  isA Shape2D;
  isA TComparable <TP2=Polygon>;
    0..1 -> 3..* Point vertices;
}

//three-dimensional shapes that must have flat faces.
//an abstract class for Polyhedra.
//Trait TComparable applied here because we wanted to have type-checking through parameters. For example, polyhedra shapes can only be accepted in the related methods.
class Polyhedra{
  abstract;
  isA Shape3D;
  isA TComparable <TP2=Polyhedra>;
  isA TDrawableWithEdge;
  0..1-> *  Point vertices;
} 

//three-dimensional shapes that don't have any flat surface
//an abstract class for non-polyhedra shapes.
//Trait TComparable applied here because we wanted to have type-checking through parameters. For example, non-polyhedra shapes can only be accepted in related methods.
class NonPolyhedra{
  abstract;
  isA Shape3D;
  isA TComparable <TP2=NonPolyhedra>;
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
class Circle{
  isA CurvedShape;
  Double radius;
  Double getArea() {return 1.0;}
  Double getPerimeterLength() {return 1.0;}
  Boolean isEqual(CurvedShape object) {return true;}
  Boolean isLessThan(CurvedShape object) {return true;}
}
class Ellipse {
  isA CurvedShape;
  Double majorAxis;
  Double minorAxis;
  Point fFocus;
  Point gFocus;
  Point[] getFoci() {return new Point[2];}
  Double getArea() {return 1.0;}
  Double getPerimeterLength() {return 1.0;}
  Line getTangent() {return new Line(fFocus, gFocus);}
  Boolean isEqual(CurvedShape object) {return true;}
  Boolean isLessThan(CurvedShape object) {return true;}
}
class Quadrilateral{
  isA Polygon;
  Double getArea() {return 1.0;}
  Double getPerimeterLength() {return 1.0;}
  Boolean isEqual(Polygon object) {return true;}
  Boolean isLessThan(Polygon object) {return true;}
}

class Rectangle{
  isA Quadrilateral;
  //overwrite for better calculation
  Double getArea() {return 1.0;}
  //overwrite for better calculation
  Double getPerimeterLength() {return 1.0;}  
}
class ArbitraryPolygon{
  isA Polygon;
  Double getArea() {return 1.0;}
  Double getPerimeterLength() {return 1.0;}
  Boolean isEqual(Polygon object) {return true;}
  Boolean isLessThan(Polygon object) {return true;}
}

class Sphere{
  isA NonPolyhedra;
  Double radius;
  Double volume(){return 1.0;}
  Double surfaceArea(){return 1.0;}
  Boolean isEqual(NonPolyhedra object){return true;}
  Boolean isLessThan(NonPolyhedra object){return true;}
}

class Torus {
  isA NonPolyhedra;
  Double radius_r; 
  Double radius_R;
  Double theta;
  Double phi;
  Double volume() {return 1.0;}
  Double surfaceArea() {return 1.0;}
  Boolean isEqual(NonPolyhedra object) {return true;}
  Boolean isLessThan(NonPolyhedra object) {return true;}
}

class Cylinder{
  isA NonPolyhedra;
  Double radius;
  Double height;
  Double volume() {return 1.0;}
  Double surfaceArea() {return 1.0;} 
  Boolean isEqual(NonPolyhedra object) {return true;}
  Boolean isLessThan(NonPolyhedra object) {return true;}
}

class Cone{
  isA NonPolyhedra;
  Double radius;
  Double height;
  Double sideLength;
  Double volume() {return 1.0;}
  Double surfaceArea() {return 1.0;}
  Boolean isEqual(NonPolyhedra object) {return true;}
  Boolean isLessThan(NonPolyhedra object) {return true;}     
}

class Cube{
  isA Polyhedra;
  Double edgeLength;
  Double volume() {return 1.0;}
  Double surfaceArea() {return 1.0;}   
  Boolean isEqual(Polyhedra object) {return true;}
  Boolean isLessThan(Polyhedra object) {return true;}  
}

class RectangularPrism{
  isA Polyhedra;  
  Double length;
  Double width;
  Double height;
  Double volume() {return 1.0;}
  Double surfaceArea() {return 1.0;} 
  Boolean isEqual(Polyhedra object) {return true;}
  Boolean isLessThan(Polyhedra object) {return true;}  
}

class TriangularPyramid{
  isA Polyhedra;
  Double slideLength;
  Double height;
  Double volume(){return 1.0;}
  Double surfaceArea(){return 1.0;}
  Boolean isEqual(Polyhedra object){return true;}
  Boolean isLessThan(Polyhedra object){return true;}      
}
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//used for all elements that can be just compared regarding being equal or not. These elements cannot compare regarding being either bigger or smaller.
//for example: point, line
trait TEquality<TP1>{
  abstract Boolean isEqual (TP1 object);
  Boolean isNotEqual(TP1 object) {
    return isEqual(object) ? true : false;
  }
}

//used for elements which can be compared regarding being equal, bigger, smaller, etc.
//for example, 2-dimensional shapes.  
trait TComparable<TP2>{
  isA TEquality<TP1=TP2>;
  abstract Boolean isLessThan(TP2 object);
  Boolean isLessAndEqual(TP2 object) {
    return (isLessThan(object) && isEqual(object)) ? true : false;
  }
  Boolean isBiggerThan(TP2 object) {
    return isLessAndEqual(object) ? false : true;
  }
  Boolean isBiggerAndEqual(TP2 object) {
    return (!isLessThan(object) && isEqual(object)) ? true : false;
  }
}

//For geometric objects that cannot have color for edges.
trait TDrawable {
  0..1 -> * Color;
  Integer getRed() {return 1;}
  Integer getBlue() {return 2;}
  Integer getGreen() {return 3;}
  void applyTransparency(Integer percentage) {/*implementation */}
  void applyPattern(Integer type) {/*implementation */}
  void applyColorFilter(Integer f) {/*implementation */}
}

//For geometric objects that can have colors for filling and edges.
trait TDrawableWithEdge{
  isA TDrawable;
  Integer getERed() {return 1;}
  Integer getEBlue() {return 2;}
  Integer getEGreen() {return 3;}  
  void applyETransparency(Integer percentage) {/*implementation */}
  void applyEPattern(Integer type) {/*implementation */}
  void applyEColorFilter(Integer f) {/*implementation */}
}

//this trait brings the features that a Subject must have in Observerable Pattern.
//It makes connection with Observer through a template parameter.
trait Subject <Observer> {
  0..1  -> * Observer;
  void notifyObservers() {/*implementation*/ }
}

// @@@skipphpcompile -  skip PHP compilation until issue #964 "Umple's PHP method generation fails to create valid method parameters" is fixed
// @@@skippythoncompile - Contains Java Code