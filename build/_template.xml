<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="Template">

  <!-- ```````````````````````````
    Environment Variables
  ``````````````````````````` -->

  <condition property="is.osx"><os family="mac" /></condition>

  <!-- Environment Detection: -->
  <!-- Check different environment settings, eventually we will match to `wlocal` or `local` if no
       special environment is detected. This may be overwritten with the `-Dmyenv` variable at 
       runtime -->
  <local name="env" />
  <property environment="env"/>

  <condition property="myenv" value="travis">
    <and>
      <isset property="env.CI" />
      <isset property="env.TRAVIS" />
    </and>
  </condition>

  <condition property="myenv" value="appveyor">
    <and>
      <isset property="env.CI" />
      <isset property="env.APPVEYOR" />
    </and>
  </condition>

  <local name="computer.hostname" />
  <exec executable="hostname" outputproperty="computer.hostname"/>

  <condition property="myenv" value="cc">
    <and> <!-- Check for CC on cruise -->
      <os family="unix" />
      <equals arg1="${computer.hostname}" arg2="cruise" />
    </and>
  </condition>

  <condition property="myenv" value="local">
    <os family="unix" />
  </condition>

  <condition property="myenv" value="wlocal">
    <os family="windows" />
  </condition>

  <echo message="Using myenv=${myenv}" />
  <!-- /end Environment Detection -->


  <import file="_${myenv}.xml" />
  
  <property name="dist.dir"                     value="${basedir}/dist" />
  <property name="dist.libs.dir"                value="${dist.dir}/libs" />

  <!-- Note: dist.dir and dist.libs.dir must be defined before importing this file. -->
  <import file="build.deps.xml" />

  <!-- Macro that will build up jar properties: creates two, 
  1. dist.umple.@{name}.jar      -> most recent built jar
  2. dist.umple.@{name}.jar.prev -> previously built jar -->
  <macrodef name="umple-jar">
    <attribute name="name" description="Name of the jar" />
    <sequential>
      <property name="dist.umple.@{name}.jar"       value="umple@{name}-${umple.version}.jar" />
      <property name="dist.umple.@{name}.jar.prev"  value="umple@{name}-${last.version}.jar" />
    </sequential>
  </macrodef>

  <property name="dist.umple.jar"       value="umple-${umple.version}.jar" />
  <property name="dist.umple.jar.prev"  value="umple-${last.version}.jar" />

  <umple-jar name="umplificator" />
  <umple-jar name="validator" />
  <umple-jar name="stats" />
  <umple-jar name="docs" />
  <umple-jar name="sync" />
  <umple-jar name="parser" />
  <umple-jar name="run" />

  <macrodef name="isreachable" >
    <attribute name="property" description="Property to hold result value" />
    <attribute name="host"     description="Host validated" />
    <sequential>
      <!-- Declare local variables -->
      <local name="temp.file" />
      <local name="file.length" />

      <!-- get a temporary file to write to -->
      <tempfile property="temp.file" prefix="@{property}."/>
      <!-- Actually fetch the URL into the temporary file -->
      <get src="@{host}" dest="${temp.file}" ignoreerrors="true" />
      
      <!-- See if the downloaded resource is larger than 0 -->
      <condition property="@{property}">
        <length file="${temp.file}" when="gt" length="0" />
      </condition>

      <delete file="${temp.file}" 
              deleteonexit="true" 
              quiet="true"/>
    </sequential> 
  </macrodef>

  <macrodef name="check-connectivity-no-contrib">
    <sequential>
      <echo message="Checking for Internet connectivity..." />
      <echo message="Set property -Donline=false if connectivity is known to be unavailable." />

      <!-- Some local variables to the macro -->
      <local name="access.maven" />
      <local name="access.umple" />
      <local name="access.github" />
      
      <!-- 
        We ping three different sources that we know of to check if they are available. If they are not available
        then we know that the build is offline (as far as we are concerned).
      -->
      <parallel>
        <isreachable property="access.maven" 
                     host="https://repo1.maven.org" />
        <isreachable property="access.umple" 
                     host="https://cruise.umple.org/index.shtml" />
        <isreachable property="access.github" 
                     host="https://github.com" />
      </parallel>

      <condition property="online">
        <and>
          <istrue value="${access.maven}" />
          <istrue value="${access.umple}" />
          <istrue value="${access.github}" />
        </and>
      </condition>
      <echo message="Internet connectivity available: ${online}" />
    </sequential>
  </macrodef>

  <macrodef name="check-connectivity">
    <sequential>
      <if>
        <not><isset property="online" /></not>
        <then>
          <check-connectivity-no-contrib />
        </then>
      </if>
    </sequential>
  </macrodef>

  <!-- ```````````````````````````
    Clean up and initialize any potential byproduct
  ``````````````````````````` -->

  <target name="template.clean">
    <delete dir="cruise.umple.validator/bin" failonerror="false" />
    <delete dir="cruise.umplificator/bin" failonerror="false" />
    <delete dir="${bin.path}" failonerror="false" />
    <delete dir="${dist.path}" failonerror="false" />
    <touch file="${dist.dir}/.gitkeep"/>
  </target>

  <target name="template.init">
    <mkdir dir="cruise.umple.validator/bin"/>
    <mkdir dir="cruise.umplificator/bin"/>
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${dist.path}"/>
    <mkdir dir="${test.output.path}"/>
  </target>

  <target name="template.setVersion">
    <echo message="Setting Version: ${umple.version}" />
    <replace dir="cruise.umple/src-gen-umpletl/cruise" token="@UMPLE_VERSION@" value="${umple.version}">
      <include name="**/*.java"/>
    </replace>
    <replace file="cruise.umple/src/UmpleVersion.ump" token="@UMPLE_VERSION@" value="${umple.version}" />
    <replace file="cruise.umple/test/cruise/umple/UmpleConsoleMainTest.java" token="@UMPLE_VERSION@" value="${umple.version}" />
    <replace file="cruise.umple/test/cruise/umple/compiler/UmpleModelTest.java" token="@UMPLE_VERSION@" value="${umple.version}" />
    <!-- <replace file="cruise.umple/src-gen-umple/cruise/umple/compiler/UmpleModel.java" token="@UMPLE_VERSION@" value="${umple.version}" /> -->
    <replace file="cruise.umple.eclipse/META-INF/MANIFEST.MF" token="Bundle-Version: 0.0.1" value="Bundle-Version: ${umple.version}" />
    <replace file="cruise.umple.xtext.ui/META-INF/MANIFEST.MF" token="Bundle-Version: 0.0.1" value="Bundle-Version: ${umple.version}" />
  </target>

  <target name="template.resetVersion">
    <echo message="Resetting To Test Version: ${last.version} -> @UMPLE_VERSION@" />
    <replace file="cruise.umple/src-gen-umple/cruise/umple/compiler/UmpleModel.java" token="${last.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/src/UmpleVersion.ump" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/test/cruise/umple/UmpleConsoleMainTest.java" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple/test/cruise/umple/compiler/UmpleModelTest.java" token="${umple.version}" value="@UMPLE_VERSION@" />
    <replace file="cruise.umple.eclipse/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />
    <replace file="cruise.umple.xtext.ui/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />

    <echo message="Resetting To Last Version: ${umple.version} -> $${last.version}" />
    <replace dir="cruise.umple/src-gen-umple/cruise" token="${umple.version}" value="$${last.version}"><include name="**/*.java"/></replace>
    <replace dir="cruise.umple/src-gen-umpletl/cruise" token="${umple.version}" value="$${last.version}">
      <include name="**/*.java"/>
    </replace>
    <replace dir="cruise.umple/test/cruise/umple/implementation/test" token="${umple.version}" value="$${last.version}">
      <include name="*.umpt"/>
    </replace>    

    <!-- TODO: UNCOMMENT ONCE RSM IN THE MIX -->
    <!--
    <replace file="../cruise.umple.rsm/META-INF/MANIFEST.MF" token="Bundle-Version: ${umple.version}" value="Bundle-Version: 0.0.1" />
    -->
  </target>

  <target name="template.localVersion">
    <replace dir="cruise.umple/src-gen-umple/cruise" token="${umple.version}" value="@UMPLE_VERSION@">
      <include name="**/*.java"/>
    </replace>
    <replace dir="cruise.umple/src-gen-umpletl/cruise" token="${umple.version}" value="@UMPLE_VERSION@">
      <include name="**/*.java"/>
    </replace>
  </target>

  <!-- ```````````````````````````
    Test the application
  ``````````````````````````` -->

  <target name="template.test">

    <deps-get-path conf="core" pathid="core.ivy.classpath" />
    <deps-get-path conf="test" pathid="test.ivy.classpath" />

    <junit fork="yes" forkmode="perBatch" haltonfailure="${haltonfailure}" showoutput="${showJunitOutput}" printsummary="${showJunitSummary}" >
      <jvmarg value="-Xmx500m"/>    
      <!-- <jmvarg value="-XstartOnFirstThread"/> -->
      <formatter type="xml" unless="${showJunitOutput}"/>
      <formatter usefile="false" type="brief" if="${showJunitOutput}"/>
      <batchtest fork="yes" todir="${test.output.path}">
         <fileset dir="${project.path}/test">
          <include name="**/${junit}.java"/>
          <include name="**/AssociationSortedWithNameSpace.java"/>
          <exclude name="**/AllTests.java"/>
          <exclude name="**/vml/**"/>
        </fileset>
      </batchtest>
      <classpath refid="project.classpath"/>
      <classpath refid="core.ivy.classpath"/>
      <classpath refid="test.ivy.classpath"/>
    </junit>
    <delete>
    	<fileset dir="cruise.umple/test/cruise/umple/statemachine/implementation">
        <include name="Agent.php"/>
      </fileset>
    </delete>  

    <junitreport todir="${test.output.path}">
      <fileset dir="${test.output.path}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.output.path}"/>
    </junitreport>
  </target>


</project>
